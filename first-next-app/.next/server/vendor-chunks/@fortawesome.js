/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@fortawesome";
exports.ids = ["vendor-chunks/@fortawesome"];
exports.modules = {

/***/ "(rsc)/../node_modules/@fortawesome/react-fontawesome/index.js":
/*!***************************************************************!*\
  !*** ../node_modules/@fortawesome/react-fontawesome/index.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("(function(global, factory) {\n     true ? factory(exports, __webpack_require__(/*! @fortawesome/fontawesome-svg-core */ \"(rsc)/../node_modules/@fortawesome/fontawesome-svg-core/index.mjs\"), __webpack_require__(/*! prop-types */ \"(rsc)/../node_modules/prop-types/index.js\"), __webpack_require__(/*! react */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react.js\")) : 0;\n})(this, function(exports1, fontawesomeSvgCore, PropTypes, React) {\n    \"use strict\";\n    function _interopDefaultLegacy(e) {\n        return e && typeof e === \"object\" && \"default\" in e ? e : {\n            \"default\": e\n        };\n    }\n    var PropTypes__default = /*#__PURE__*/ _interopDefaultLegacy(PropTypes);\n    var React__default = /*#__PURE__*/ _interopDefaultLegacy(React);\n    function ownKeys(object, enumerableOnly) {\n        var keys = Object.keys(object);\n        if (Object.getOwnPropertySymbols) {\n            var symbols = Object.getOwnPropertySymbols(object);\n            enumerableOnly && (symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            })), keys.push.apply(keys, symbols);\n        }\n        return keys;\n    }\n    function _objectSpread2(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = null != arguments[i] ? arguments[i] : {};\n            i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n        return target;\n    }\n    function _typeof(obj) {\n        \"@babel/helpers - typeof\";\n        return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n            return typeof obj;\n        } : function(obj) {\n            return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        }, _typeof(obj);\n    }\n    function _defineProperty(obj, key, value) {\n        if (key in obj) {\n            Object.defineProperty(obj, key, {\n                value: value,\n                enumerable: true,\n                configurable: true,\n                writable: true\n            });\n        } else {\n            obj[key] = value;\n        }\n        return obj;\n    }\n    function _objectWithoutPropertiesLoose(source, excluded) {\n        if (source == null) return {};\n        var target = {};\n        var sourceKeys = Object.keys(source);\n        var key, i;\n        for(i = 0; i < sourceKeys.length; i++){\n            key = sourceKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            target[key] = source[key];\n        }\n        return target;\n    }\n    function _objectWithoutProperties(source, excluded) {\n        if (source == null) return {};\n        var target = _objectWithoutPropertiesLoose(source, excluded);\n        var key, i;\n        if (Object.getOwnPropertySymbols) {\n            var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n            for(i = 0; i < sourceSymbolKeys.length; i++){\n                key = sourceSymbolKeys[i];\n                if (excluded.indexOf(key) >= 0) continue;\n                if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n                target[key] = source[key];\n            }\n        }\n        return target;\n    }\n    function _toConsumableArray(arr) {\n        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n    }\n    function _arrayWithoutHoles(arr) {\n        if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n    }\n    function _iterableToArray(iter) {\n        if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n    }\n    function _unsupportedIterableToArray(o, minLen) {\n        if (!o) return;\n        if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n        var n = Object.prototype.toString.call(o).slice(8, -1);\n        if (n === \"Object\" && o.constructor) n = o.constructor.name;\n        if (n === \"Map\" || n === \"Set\") return Array.from(o);\n        if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n    }\n    function _arrayLikeToArray(arr, len) {\n        if (len == null || len > arr.length) len = arr.length;\n        for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n        return arr2;\n    }\n    function _nonIterableSpread() {\n        throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    // Get CSS class list from a props object\n    function classList(props) {\n        var _classes;\n        var beat = props.beat, fade = props.fade, beatFade = props.beatFade, bounce = props.bounce, shake = props.shake, flash = props.flash, spin = props.spin, spinPulse = props.spinPulse, spinReverse = props.spinReverse, pulse = props.pulse, fixedWidth = props.fixedWidth, inverse = props.inverse, border = props.border, listItem = props.listItem, flip = props.flip, size = props.size, rotation = props.rotation, pull = props.pull; // map of CSS class names to properties\n        var classes = (_classes = {\n            \"fa-beat\": beat,\n            \"fa-fade\": fade,\n            \"fa-beat-fade\": beatFade,\n            \"fa-bounce\": bounce,\n            \"fa-shake\": shake,\n            \"fa-flash\": flash,\n            \"fa-spin\": spin,\n            \"fa-spin-reverse\": spinReverse,\n            \"fa-spin-pulse\": spinPulse,\n            \"fa-pulse\": pulse,\n            \"fa-fw\": fixedWidth,\n            \"fa-inverse\": inverse,\n            \"fa-border\": border,\n            \"fa-li\": listItem,\n            \"fa-flip\": flip === true,\n            \"fa-flip-horizontal\": flip === \"horizontal\" || flip === \"both\",\n            \"fa-flip-vertical\": flip === \"vertical\" || flip === \"both\"\n        }, _defineProperty(_classes, \"fa-\".concat(size), typeof size !== \"undefined\" && size !== null), _defineProperty(_classes, \"fa-rotate-\".concat(rotation), typeof rotation !== \"undefined\" && rotation !== null && rotation !== 0), _defineProperty(_classes, \"fa-pull-\".concat(pull), typeof pull !== \"undefined\" && pull !== null), _defineProperty(_classes, \"fa-swap-opacity\", props.swapOpacity), _classes); // map over all the keys in the classes object\n        // return an array of the keys where the value for the key is not null\n        return Object.keys(classes).map(function(key) {\n            return classes[key] ? key : null;\n        }).filter(function(key) {\n            return key;\n        });\n    }\n    // Camelize taken from humps\n    // humps is copyright Â© 2012+ Dom Christie\n    // Released under the MIT license.\n    // Performant way to determine if object coerces to a number\n    function _isNumerical(obj) {\n        obj = obj - 0; // eslint-disable-next-line no-self-compare\n        return obj === obj;\n    }\n    function camelize(string) {\n        if (_isNumerical(string)) {\n            return string;\n        } // eslint-disable-next-line no-useless-escape\n        string = string.replace(/[\\-_\\s]+(.)?/g, function(match, chr) {\n            return chr ? chr.toUpperCase() : \"\";\n        }); // Ensure 1st char is always lowercase\n        return string.substr(0, 1).toLowerCase() + string.substr(1);\n    }\n    var _excluded = [\n        \"style\"\n    ];\n    function capitalize(val) {\n        return val.charAt(0).toUpperCase() + val.slice(1);\n    }\n    function styleToObject(style) {\n        return style.split(\";\").map(function(s) {\n            return s.trim();\n        }).filter(function(s) {\n            return s;\n        }).reduce(function(acc, pair) {\n            var i = pair.indexOf(\":\");\n            var prop = camelize(pair.slice(0, i));\n            var value = pair.slice(i + 1).trim();\n            prop.startsWith(\"webkit\") ? acc[capitalize(prop)] = value : acc[prop] = value;\n            return acc;\n        }, {});\n    }\n    function convert(createElement, element) {\n        var extraProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        if (typeof element === \"string\") {\n            return element;\n        }\n        var children = (element.children || []).map(function(child) {\n            return convert(createElement, child);\n        });\n        /* eslint-disable dot-notation */ var mixins = Object.keys(element.attributes || {}).reduce(function(acc, key) {\n            var val = element.attributes[key];\n            switch(key){\n                case \"class\":\n                    acc.attrs[\"className\"] = val;\n                    delete element.attributes[\"class\"];\n                    break;\n                case \"style\":\n                    acc.attrs[\"style\"] = styleToObject(val);\n                    break;\n                default:\n                    if (key.indexOf(\"aria-\") === 0 || key.indexOf(\"data-\") === 0) {\n                        acc.attrs[key.toLowerCase()] = val;\n                    } else {\n                        acc.attrs[camelize(key)] = val;\n                    }\n            }\n            return acc;\n        }, {\n            attrs: {}\n        });\n        var _extraProps$style = extraProps.style, existingStyle = _extraProps$style === void 0 ? {} : _extraProps$style, remaining = _objectWithoutProperties(extraProps, _excluded);\n        mixins.attrs[\"style\"] = _objectSpread2(_objectSpread2({}, mixins.attrs[\"style\"]), existingStyle);\n        /* eslint-enable */ return createElement.apply(void 0, [\n            element.tag,\n            _objectSpread2(_objectSpread2({}, mixins.attrs), remaining)\n        ].concat(_toConsumableArray(children)));\n    }\n    var PRODUCTION = false;\n    try {\n        PRODUCTION = \"development\" === \"production\";\n    } catch (e) {}\n    function log() {\n        if (!PRODUCTION && console && typeof console.error === \"function\") {\n            var _console;\n            (_console = console).error.apply(_console, arguments);\n        }\n    }\n    function normalizeIconArgs(icon) {\n        // this has everything that it needs to be rendered which means it was probably imported\n        // directly from an icon svg package\n        if (icon && _typeof(icon) === \"object\" && icon.prefix && icon.iconName && icon.icon) {\n            return icon;\n        }\n        if (fontawesomeSvgCore.parse.icon) {\n            return fontawesomeSvgCore.parse.icon(icon);\n        } // if the icon is null, there's nothing to do\n        if (icon === null) {\n            return null;\n        } // if the icon is an object and has a prefix and an icon name, return it\n        if (icon && _typeof(icon) === \"object\" && icon.prefix && icon.iconName) {\n            return icon;\n        } // if it's an array with length of two\n        if (Array.isArray(icon) && icon.length === 2) {\n            // use the first item as prefix, second as icon name\n            return {\n                prefix: icon[0],\n                iconName: icon[1]\n            };\n        } // if it's a string, use it as the icon name\n        if (typeof icon === \"string\") {\n            return {\n                prefix: \"fas\",\n                iconName: icon\n            };\n        }\n    }\n    // creates an object with a key of key\n    // and a value of value\n    // if certain conditions are met\n    function objectWithKey(key, value) {\n        // if the value is a non-empty array\n        // or it's not an array but it is truthy\n        // then create the object with the key and the value\n        // if not, return an empty array\n        return Array.isArray(value) && value.length > 0 || !Array.isArray(value) && value ? _defineProperty({}, key, value) : {};\n    }\n    var FontAwesomeIcon = /*#__PURE__*/ React__default[\"default\"].forwardRef(function(props, ref) {\n        var iconArgs = props.icon, maskArgs = props.mask, symbol = props.symbol, className = props.className, title = props.title, titleId = props.titleId, maskId = props.maskId;\n        var iconLookup = normalizeIconArgs(iconArgs);\n        var classes = objectWithKey(\"classes\", [].concat(_toConsumableArray(classList(props)), _toConsumableArray(className.split(\" \"))));\n        var transform = objectWithKey(\"transform\", typeof props.transform === \"string\" ? fontawesomeSvgCore.parse.transform(props.transform) : props.transform);\n        var mask = objectWithKey(\"mask\", normalizeIconArgs(maskArgs));\n        var renderedIcon = fontawesomeSvgCore.icon(iconLookup, _objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2({}, classes), transform), mask), {}, {\n            symbol: symbol,\n            title: title,\n            titleId: titleId,\n            maskId: maskId\n        }));\n        if (!renderedIcon) {\n            log(\"Could not find icon\", iconLookup);\n            return null;\n        }\n        var abstract = renderedIcon.abstract;\n        var extraProps = {\n            ref: ref\n        };\n        Object.keys(props).forEach(function(key) {\n            // eslint-disable-next-line no-prototype-builtins\n            if (!FontAwesomeIcon.defaultProps.hasOwnProperty(key)) {\n                extraProps[key] = props[key];\n            }\n        });\n        return convertCurry(abstract[0], extraProps);\n    });\n    FontAwesomeIcon.displayName = \"FontAwesomeIcon\";\n    FontAwesomeIcon.propTypes = {\n        beat: PropTypes__default[\"default\"].bool,\n        border: PropTypes__default[\"default\"].bool,\n        beatFade: PropTypes__default[\"default\"].bool,\n        bounce: PropTypes__default[\"default\"].bool,\n        className: PropTypes__default[\"default\"].string,\n        fade: PropTypes__default[\"default\"].bool,\n        flash: PropTypes__default[\"default\"].bool,\n        mask: PropTypes__default[\"default\"].oneOfType([\n            PropTypes__default[\"default\"].object,\n            PropTypes__default[\"default\"].array,\n            PropTypes__default[\"default\"].string\n        ]),\n        maskId: PropTypes__default[\"default\"].string,\n        fixedWidth: PropTypes__default[\"default\"].bool,\n        inverse: PropTypes__default[\"default\"].bool,\n        flip: PropTypes__default[\"default\"].oneOf([\n            true,\n            false,\n            \"horizontal\",\n            \"vertical\",\n            \"both\"\n        ]),\n        icon: PropTypes__default[\"default\"].oneOfType([\n            PropTypes__default[\"default\"].object,\n            PropTypes__default[\"default\"].array,\n            PropTypes__default[\"default\"].string\n        ]),\n        listItem: PropTypes__default[\"default\"].bool,\n        pull: PropTypes__default[\"default\"].oneOf([\n            \"right\",\n            \"left\"\n        ]),\n        pulse: PropTypes__default[\"default\"].bool,\n        rotation: PropTypes__default[\"default\"].oneOf([\n            0,\n            90,\n            180,\n            270\n        ]),\n        shake: PropTypes__default[\"default\"].bool,\n        size: PropTypes__default[\"default\"].oneOf([\n            \"2xs\",\n            \"xs\",\n            \"sm\",\n            \"lg\",\n            \"xl\",\n            \"2xl\",\n            \"1x\",\n            \"2x\",\n            \"3x\",\n            \"4x\",\n            \"5x\",\n            \"6x\",\n            \"7x\",\n            \"8x\",\n            \"9x\",\n            \"10x\"\n        ]),\n        spin: PropTypes__default[\"default\"].bool,\n        spinPulse: PropTypes__default[\"default\"].bool,\n        spinReverse: PropTypes__default[\"default\"].bool,\n        symbol: PropTypes__default[\"default\"].oneOfType([\n            PropTypes__default[\"default\"].bool,\n            PropTypes__default[\"default\"].string\n        ]),\n        title: PropTypes__default[\"default\"].string,\n        titleId: PropTypes__default[\"default\"].string,\n        transform: PropTypes__default[\"default\"].oneOfType([\n            PropTypes__default[\"default\"].string,\n            PropTypes__default[\"default\"].object\n        ]),\n        swapOpacity: PropTypes__default[\"default\"].bool\n    };\n    FontAwesomeIcon.defaultProps = {\n        border: false,\n        className: \"\",\n        mask: null,\n        maskId: null,\n        fixedWidth: false,\n        inverse: false,\n        flip: false,\n        icon: null,\n        listItem: false,\n        pull: null,\n        pulse: false,\n        rotation: null,\n        size: null,\n        spin: false,\n        spinPulse: false,\n        spinReverse: false,\n        beat: false,\n        fade: false,\n        beatFade: false,\n        bounce: false,\n        shake: false,\n        symbol: false,\n        title: \"\",\n        titleId: null,\n        transform: null,\n        swapOpacity: false\n    };\n    var convertCurry = convert.bind(null, React__default[\"default\"].createElement);\n    exports1.FontAwesomeIcon = FontAwesomeIcon;\n    Object.defineProperty(exports1, \"__esModule\", {\n        value: true\n    });\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@fortawesome/react-fontawesome/index.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/@fortawesome/fontawesome-svg-core/index.mjs":
/*!*******************************************************************!*\
  !*** ../node_modules/@fortawesome/fontawesome-svg-core/index.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   api: () => (/* binding */ api),\n/* harmony export */   config: () => (/* binding */ config$1),\n/* harmony export */   counter: () => (/* binding */ counter),\n/* harmony export */   dom: () => (/* binding */ dom$1),\n/* harmony export */   findIconDefinition: () => (/* binding */ findIconDefinition$1),\n/* harmony export */   icon: () => (/* binding */ icon),\n/* harmony export */   layer: () => (/* binding */ layer),\n/* harmony export */   library: () => (/* binding */ library$1),\n/* harmony export */   noAuto: () => (/* binding */ noAuto$1),\n/* harmony export */   parse: () => (/* binding */ parse$1),\n/* harmony export */   text: () => (/* binding */ text),\n/* harmony export */   toHtml: () => (/* binding */ toHtml$1)\n/* harmony export */ });\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread2(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nfunction _wrapRegExp() {\n    _wrapRegExp = function(re, groups) {\n        return new BabelRegExp(re, void 0, groups);\n    };\n    var _super = RegExp.prototype, _groups = new WeakMap();\n    function BabelRegExp(re, flags, groups) {\n        var _this = new RegExp(re, flags);\n        return _groups.set(_this, groups || _groups.get(re)), _setPrototypeOf(_this, BabelRegExp.prototype);\n    }\n    function buildGroups(result, re) {\n        var g = _groups.get(re);\n        return Object.keys(g).reduce(function(groups, name) {\n            return groups[name] = result[g[name]], groups;\n        }, Object.create(null));\n    }\n    return _inherits(BabelRegExp, RegExp), BabelRegExp.prototype.exec = function(str) {\n        var result = _super.exec.call(this, str);\n        return result && (result.groups = buildGroups(result, this)), result;\n    }, BabelRegExp.prototype[Symbol.replace] = function(str, substitution) {\n        if (\"string\" == typeof substitution) {\n            var groups = _groups.get(this);\n            return _super[Symbol.replace].call(this, str, substitution.replace(/\\$<([^>]+)>/g, function(_, name) {\n                return \"$\" + groups[name];\n            }));\n        }\n        if (\"function\" == typeof substitution) {\n            var _this = this;\n            return _super[Symbol.replace].call(this, str, function() {\n                var args = arguments;\n                return \"object\" != typeof args[args.length - 1] && (args = [].slice.call(args)).push(buildGroups(args, _this)), substitution.apply(this, args);\n            });\n        }\n        return _super[Symbol.replace].call(this, str, substitution);\n    }, _wrapRegExp.apply(this, arguments);\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n        writable: false\n    });\n    return Constructor;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    Object.defineProperty(subClass, \"prototype\", {\n        writable: false\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _iterableToArrayLimit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nvar noop = function noop() {};\nvar _WINDOW = {};\nvar _DOCUMENT = {};\nvar _MUTATION_OBSERVER = null;\nvar _PERFORMANCE = {\n    mark: noop,\n    measure: noop\n};\ntry {\n    if (false) {}\n    if (typeof document !== \"undefined\") _DOCUMENT = document;\n    if (typeof MutationObserver !== \"undefined\") _MUTATION_OBSERVER = MutationObserver;\n    if (typeof performance !== \"undefined\") _PERFORMANCE = performance;\n} catch (e) {}\nvar _ref = _WINDOW.navigator || {}, _ref$userAgent = _ref.userAgent, userAgent = _ref$userAgent === void 0 ? \"\" : _ref$userAgent;\nvar WINDOW = _WINDOW;\nvar DOCUMENT = _DOCUMENT;\nvar MUTATION_OBSERVER = _MUTATION_OBSERVER;\nvar PERFORMANCE = _PERFORMANCE;\nvar IS_BROWSER = !!WINDOW.document;\nvar IS_DOM = !!DOCUMENT.documentElement && !!DOCUMENT.head && typeof DOCUMENT.addEventListener === \"function\" && typeof DOCUMENT.createElement === \"function\";\nvar IS_IE = ~userAgent.indexOf(\"MSIE\") || ~userAgent.indexOf(\"Trident/\");\nvar _familyProxy, _familyProxy2, _familyProxy3, _familyProxy4, _familyProxy5;\nvar NAMESPACE_IDENTIFIER = \"___FONT_AWESOME___\";\nvar UNITS_IN_GRID = 16;\nvar DEFAULT_CSS_PREFIX = \"fa\";\nvar DEFAULT_REPLACEMENT_CLASS = \"svg-inline--fa\";\nvar DATA_FA_I2SVG = \"data-fa-i2svg\";\nvar DATA_FA_PSEUDO_ELEMENT = \"data-fa-pseudo-element\";\nvar DATA_FA_PSEUDO_ELEMENT_PENDING = \"data-fa-pseudo-element-pending\";\nvar DATA_PREFIX = \"data-prefix\";\nvar DATA_ICON = \"data-icon\";\nvar HTML_CLASS_I2SVG_BASE_CLASS = \"fontawesome-i2svg\";\nvar MUTATION_APPROACH_ASYNC = \"async\";\nvar TAGNAMES_TO_SKIP_FOR_PSEUDOELEMENTS = [\n    \"HTML\",\n    \"HEAD\",\n    \"STYLE\",\n    \"SCRIPT\"\n];\nvar PRODUCTION = function() {\n    try {\n        return \"development\" === \"production\";\n    } catch (e) {\n        return false;\n    }\n}();\nvar FAMILY_CLASSIC = \"classic\";\nvar FAMILY_SHARP = \"sharp\";\nvar FAMILIES = [\n    FAMILY_CLASSIC,\n    FAMILY_SHARP\n];\nfunction familyProxy(obj) {\n    // Defaults to the classic family if family is not available\n    return new Proxy(obj, {\n        get: function get(target, prop) {\n            return prop in target ? target[prop] : target[FAMILY_CLASSIC];\n        }\n    });\n}\nvar PREFIX_TO_STYLE = familyProxy((_familyProxy = {}, _defineProperty(_familyProxy, FAMILY_CLASSIC, {\n    \"fa\": \"solid\",\n    \"fas\": \"solid\",\n    \"fa-solid\": \"solid\",\n    \"far\": \"regular\",\n    \"fa-regular\": \"regular\",\n    \"fal\": \"light\",\n    \"fa-light\": \"light\",\n    \"fat\": \"thin\",\n    \"fa-thin\": \"thin\",\n    \"fad\": \"duotone\",\n    \"fa-duotone\": \"duotone\",\n    \"fab\": \"brands\",\n    \"fa-brands\": \"brands\",\n    \"fak\": \"kit\",\n    \"fa-kit\": \"kit\"\n}), _defineProperty(_familyProxy, FAMILY_SHARP, {\n    \"fa\": \"solid\",\n    \"fass\": \"solid\",\n    \"fa-solid\": \"solid\",\n    \"fasr\": \"regular\",\n    \"fa-regular\": \"regular\",\n    \"fasl\": \"light\",\n    \"fa-light\": \"light\"\n}), _familyProxy));\nvar STYLE_TO_PREFIX = familyProxy((_familyProxy2 = {}, _defineProperty(_familyProxy2, FAMILY_CLASSIC, {\n    \"solid\": \"fas\",\n    \"regular\": \"far\",\n    \"light\": \"fal\",\n    \"thin\": \"fat\",\n    \"duotone\": \"fad\",\n    \"brands\": \"fab\",\n    \"kit\": \"fak\"\n}), _defineProperty(_familyProxy2, FAMILY_SHARP, {\n    \"solid\": \"fass\",\n    \"regular\": \"fasr\",\n    \"light\": \"fasl\"\n}), _familyProxy2));\nvar PREFIX_TO_LONG_STYLE = familyProxy((_familyProxy3 = {}, _defineProperty(_familyProxy3, FAMILY_CLASSIC, {\n    \"fab\": \"fa-brands\",\n    \"fad\": \"fa-duotone\",\n    \"fak\": \"fa-kit\",\n    \"fal\": \"fa-light\",\n    \"far\": \"fa-regular\",\n    \"fas\": \"fa-solid\",\n    \"fat\": \"fa-thin\"\n}), _defineProperty(_familyProxy3, FAMILY_SHARP, {\n    \"fass\": \"fa-solid\",\n    \"fasr\": \"fa-regular\",\n    \"fasl\": \"fa-light\"\n}), _familyProxy3));\nvar LONG_STYLE_TO_PREFIX = familyProxy((_familyProxy4 = {}, _defineProperty(_familyProxy4, FAMILY_CLASSIC, {\n    \"fa-brands\": \"fab\",\n    \"fa-duotone\": \"fad\",\n    \"fa-kit\": \"fak\",\n    \"fa-light\": \"fal\",\n    \"fa-regular\": \"far\",\n    \"fa-solid\": \"fas\",\n    \"fa-thin\": \"fat\"\n}), _defineProperty(_familyProxy4, FAMILY_SHARP, {\n    \"fa-solid\": \"fass\",\n    \"fa-regular\": \"fasr\",\n    \"fa-light\": \"fasl\"\n}), _familyProxy4));\nvar ICON_SELECTION_SYNTAX_PATTERN = /fa(s|r|l|t|d|b|k|ss|sr|sl)?[\\-\\ ]/; // eslint-disable-line no-useless-escape\nvar LAYERS_TEXT_CLASSNAME = \"fa-layers-text\";\nvar FONT_FAMILY_PATTERN = /Font ?Awesome ?([56 ]*)(Solid|Regular|Light|Thin|Duotone|Brands|Free|Pro|Sharp|Kit)?.*/i;\nvar FONT_WEIGHT_TO_PREFIX = familyProxy((_familyProxy5 = {}, _defineProperty(_familyProxy5, FAMILY_CLASSIC, {\n    \"900\": \"fas\",\n    \"400\": \"far\",\n    \"normal\": \"far\",\n    \"300\": \"fal\",\n    \"100\": \"fat\"\n}), _defineProperty(_familyProxy5, FAMILY_SHARP, {\n    \"900\": \"fass\",\n    \"400\": \"fasr\",\n    \"300\": \"fasl\"\n}), _familyProxy5));\nvar oneToTen = [\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10\n];\nvar oneToTwenty = oneToTen.concat([\n    11,\n    12,\n    13,\n    14,\n    15,\n    16,\n    17,\n    18,\n    19,\n    20\n]);\nvar ATTRIBUTES_WATCHED_FOR_MUTATION = [\n    \"class\",\n    \"data-prefix\",\n    \"data-icon\",\n    \"data-fa-transform\",\n    \"data-fa-mask\"\n];\nvar DUOTONE_CLASSES = {\n    GROUP: \"duotone-group\",\n    SWAP_OPACITY: \"swap-opacity\",\n    PRIMARY: \"primary\",\n    SECONDARY: \"secondary\"\n};\nvar prefixes = new Set();\nObject.keys(STYLE_TO_PREFIX[FAMILY_CLASSIC]).map(prefixes.add.bind(prefixes));\nObject.keys(STYLE_TO_PREFIX[FAMILY_SHARP]).map(prefixes.add.bind(prefixes));\nvar RESERVED_CLASSES = [].concat(FAMILIES, _toConsumableArray(prefixes), [\n    \"2xs\",\n    \"xs\",\n    \"sm\",\n    \"lg\",\n    \"xl\",\n    \"2xl\",\n    \"beat\",\n    \"border\",\n    \"fade\",\n    \"beat-fade\",\n    \"bounce\",\n    \"flip-both\",\n    \"flip-horizontal\",\n    \"flip-vertical\",\n    \"flip\",\n    \"fw\",\n    \"inverse\",\n    \"layers-counter\",\n    \"layers-text\",\n    \"layers\",\n    \"li\",\n    \"pull-left\",\n    \"pull-right\",\n    \"pulse\",\n    \"rotate-180\",\n    \"rotate-270\",\n    \"rotate-90\",\n    \"rotate-by\",\n    \"shake\",\n    \"spin-pulse\",\n    \"spin-reverse\",\n    \"spin\",\n    \"stack-1x\",\n    \"stack-2x\",\n    \"stack\",\n    \"ul\",\n    DUOTONE_CLASSES.GROUP,\n    DUOTONE_CLASSES.SWAP_OPACITY,\n    DUOTONE_CLASSES.PRIMARY,\n    DUOTONE_CLASSES.SECONDARY\n]).concat(oneToTen.map(function(n) {\n    return \"\".concat(n, \"x\");\n})).concat(oneToTwenty.map(function(n) {\n    return \"w-\".concat(n);\n}));\nvar initial = WINDOW.FontAwesomeConfig || {};\nfunction getAttrConfig(attr) {\n    var element = DOCUMENT.querySelector(\"script[\" + attr + \"]\");\n    if (element) {\n        return element.getAttribute(attr);\n    }\n}\nfunction coerce(val) {\n    // Getting an empty string will occur if the attribute is set on the HTML tag but without a value\n    // We'll assume that this is an indication that it should be toggled to true\n    if (val === \"\") return true;\n    if (val === \"false\") return false;\n    if (val === \"true\") return true;\n    return val;\n}\nif (DOCUMENT && typeof DOCUMENT.querySelector === \"function\") {\n    var attrs = [\n        [\n            \"data-family-prefix\",\n            \"familyPrefix\"\n        ],\n        [\n            \"data-css-prefix\",\n            \"cssPrefix\"\n        ],\n        [\n            \"data-family-default\",\n            \"familyDefault\"\n        ],\n        [\n            \"data-style-default\",\n            \"styleDefault\"\n        ],\n        [\n            \"data-replacement-class\",\n            \"replacementClass\"\n        ],\n        [\n            \"data-auto-replace-svg\",\n            \"autoReplaceSvg\"\n        ],\n        [\n            \"data-auto-add-css\",\n            \"autoAddCss\"\n        ],\n        [\n            \"data-auto-a11y\",\n            \"autoA11y\"\n        ],\n        [\n            \"data-search-pseudo-elements\",\n            \"searchPseudoElements\"\n        ],\n        [\n            \"data-observe-mutations\",\n            \"observeMutations\"\n        ],\n        [\n            \"data-mutate-approach\",\n            \"mutateApproach\"\n        ],\n        [\n            \"data-keep-original-source\",\n            \"keepOriginalSource\"\n        ],\n        [\n            \"data-measure-performance\",\n            \"measurePerformance\"\n        ],\n        [\n            \"data-show-missing-icons\",\n            \"showMissingIcons\"\n        ]\n    ];\n    attrs.forEach(function(_ref) {\n        var _ref2 = _slicedToArray(_ref, 2), attr = _ref2[0], key = _ref2[1];\n        var val = coerce(getAttrConfig(attr));\n        if (val !== undefined && val !== null) {\n            initial[key] = val;\n        }\n    });\n}\nvar _default = {\n    styleDefault: \"solid\",\n    familyDefault: \"classic\",\n    cssPrefix: DEFAULT_CSS_PREFIX,\n    replacementClass: DEFAULT_REPLACEMENT_CLASS,\n    autoReplaceSvg: true,\n    autoAddCss: true,\n    autoA11y: true,\n    searchPseudoElements: false,\n    observeMutations: true,\n    mutateApproach: \"async\",\n    keepOriginalSource: true,\n    measurePerformance: false,\n    showMissingIcons: true\n}; // familyPrefix is deprecated but we must still support it if present\nif (initial.familyPrefix) {\n    initial.cssPrefix = initial.familyPrefix;\n}\nvar _config = _objectSpread2(_objectSpread2({}, _default), initial);\nif (!_config.autoReplaceSvg) _config.observeMutations = false;\nvar config = {};\nObject.keys(_default).forEach(function(key) {\n    Object.defineProperty(config, key, {\n        enumerable: true,\n        set: function set(val) {\n            _config[key] = val;\n            _onChangeCb.forEach(function(cb) {\n                return cb(config);\n            });\n        },\n        get: function get() {\n            return _config[key];\n        }\n    });\n}); // familyPrefix is deprecated as of 6.2.0 and should be removed in 7.0.0\nObject.defineProperty(config, \"familyPrefix\", {\n    enumerable: true,\n    set: function set(val) {\n        _config.cssPrefix = val;\n        _onChangeCb.forEach(function(cb) {\n            return cb(config);\n        });\n    },\n    get: function get() {\n        return _config.cssPrefix;\n    }\n});\nWINDOW.FontAwesomeConfig = config;\nvar _onChangeCb = [];\nfunction onChange(cb) {\n    _onChangeCb.push(cb);\n    return function() {\n        _onChangeCb.splice(_onChangeCb.indexOf(cb), 1);\n    };\n}\nvar d = UNITS_IN_GRID;\nvar meaninglessTransform = {\n    size: 16,\n    x: 0,\n    y: 0,\n    rotate: 0,\n    flipX: false,\n    flipY: false\n};\nfunction insertCss(css) {\n    if (!css || !IS_DOM) {\n        return;\n    }\n    var style = DOCUMENT.createElement(\"style\");\n    style.setAttribute(\"type\", \"text/css\");\n    style.innerHTML = css;\n    var headChildren = DOCUMENT.head.childNodes;\n    var beforeChild = null;\n    for(var i = headChildren.length - 1; i > -1; i--){\n        var child = headChildren[i];\n        var tagName = (child.tagName || \"\").toUpperCase();\n        if ([\n            \"STYLE\",\n            \"LINK\"\n        ].indexOf(tagName) > -1) {\n            beforeChild = child;\n        }\n    }\n    DOCUMENT.head.insertBefore(style, beforeChild);\n    return css;\n}\nvar idPool = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nfunction nextUniqueId() {\n    var size = 12;\n    var id = \"\";\n    while(size-- > 0){\n        id += idPool[Math.random() * 62 | 0];\n    }\n    return id;\n}\nfunction toArray(obj) {\n    var array = [];\n    for(var i = (obj || []).length >>> 0; i--;){\n        array[i] = obj[i];\n    }\n    return array;\n}\nfunction classArray(node) {\n    if (node.classList) {\n        return toArray(node.classList);\n    } else {\n        return (node.getAttribute(\"class\") || \"\").split(\" \").filter(function(i) {\n            return i;\n        });\n    }\n}\nfunction htmlEscape(str) {\n    return \"\".concat(str).replace(/&/g, \"&amp;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#39;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n}\nfunction joinAttributes(attributes) {\n    return Object.keys(attributes || {}).reduce(function(acc, attributeName) {\n        return acc + \"\".concat(attributeName, '=\"').concat(htmlEscape(attributes[attributeName]), '\" ');\n    }, \"\").trim();\n}\nfunction joinStyles(styles) {\n    return Object.keys(styles || {}).reduce(function(acc, styleName) {\n        return acc + \"\".concat(styleName, \": \").concat(styles[styleName].trim(), \";\");\n    }, \"\");\n}\nfunction transformIsMeaningful(transform) {\n    return transform.size !== meaninglessTransform.size || transform.x !== meaninglessTransform.x || transform.y !== meaninglessTransform.y || transform.rotate !== meaninglessTransform.rotate || transform.flipX || transform.flipY;\n}\nfunction transformForSvg(_ref) {\n    var transform = _ref.transform, containerWidth = _ref.containerWidth, iconWidth = _ref.iconWidth;\n    var outer = {\n        transform: \"translate(\".concat(containerWidth / 2, \" 256)\")\n    };\n    var innerTranslate = \"translate(\".concat(transform.x * 32, \", \").concat(transform.y * 32, \") \");\n    var innerScale = \"scale(\".concat(transform.size / 16 * (transform.flipX ? -1 : 1), \", \").concat(transform.size / 16 * (transform.flipY ? -1 : 1), \") \");\n    var innerRotate = \"rotate(\".concat(transform.rotate, \" 0 0)\");\n    var inner = {\n        transform: \"\".concat(innerTranslate, \" \").concat(innerScale, \" \").concat(innerRotate)\n    };\n    var path = {\n        transform: \"translate(\".concat(iconWidth / 2 * -1, \" -256)\")\n    };\n    return {\n        outer: outer,\n        inner: inner,\n        path: path\n    };\n}\nfunction transformForCss(_ref2) {\n    var transform = _ref2.transform, _ref2$width = _ref2.width, width = _ref2$width === void 0 ? UNITS_IN_GRID : _ref2$width, _ref2$height = _ref2.height, height = _ref2$height === void 0 ? UNITS_IN_GRID : _ref2$height, _ref2$startCentered = _ref2.startCentered, startCentered = _ref2$startCentered === void 0 ? false : _ref2$startCentered;\n    var val = \"\";\n    if (startCentered && IS_IE) {\n        val += \"translate(\".concat(transform.x / d - width / 2, \"em, \").concat(transform.y / d - height / 2, \"em) \");\n    } else if (startCentered) {\n        val += \"translate(calc(-50% + \".concat(transform.x / d, \"em), calc(-50% + \").concat(transform.y / d, \"em)) \");\n    } else {\n        val += \"translate(\".concat(transform.x / d, \"em, \").concat(transform.y / d, \"em) \");\n    }\n    val += \"scale(\".concat(transform.size / d * (transform.flipX ? -1 : 1), \", \").concat(transform.size / d * (transform.flipY ? -1 : 1), \") \");\n    val += \"rotate(\".concat(transform.rotate, \"deg) \");\n    return val;\n}\nvar baseStyles = ':root, :host {\\n  --fa-font-solid: normal 900 1em/1 \"Font Awesome 6 Solid\";\\n  --fa-font-regular: normal 400 1em/1 \"Font Awesome 6 Regular\";\\n  --fa-font-light: normal 300 1em/1 \"Font Awesome 6 Light\";\\n  --fa-font-thin: normal 100 1em/1 \"Font Awesome 6 Thin\";\\n  --fa-font-duotone: normal 900 1em/1 \"Font Awesome 6 Duotone\";\\n  --fa-font-sharp-solid: normal 900 1em/1 \"Font Awesome 6 Sharp\";\\n  --fa-font-sharp-regular: normal 400 1em/1 \"Font Awesome 6 Sharp\";\\n  --fa-font-sharp-light: normal 300 1em/1 \"Font Awesome 6 Sharp\";\\n  --fa-font-brands: normal 400 1em/1 \"Font Awesome 6 Brands\";\\n}\\n\\nsvg:not(:root).svg-inline--fa, svg:not(:host).svg-inline--fa {\\n  overflow: visible;\\n  box-sizing: content-box;\\n}\\n\\n.svg-inline--fa {\\n  display: var(--fa-display, inline-block);\\n  height: 1em;\\n  overflow: visible;\\n  vertical-align: -0.125em;\\n}\\n.svg-inline--fa.fa-2xs {\\n  vertical-align: 0.1em;\\n}\\n.svg-inline--fa.fa-xs {\\n  vertical-align: 0em;\\n}\\n.svg-inline--fa.fa-sm {\\n  vertical-align: -0.0714285705em;\\n}\\n.svg-inline--fa.fa-lg {\\n  vertical-align: -0.2em;\\n}\\n.svg-inline--fa.fa-xl {\\n  vertical-align: -0.25em;\\n}\\n.svg-inline--fa.fa-2xl {\\n  vertical-align: -0.3125em;\\n}\\n.svg-inline--fa.fa-pull-left {\\n  margin-right: var(--fa-pull-margin, 0.3em);\\n  width: auto;\\n}\\n.svg-inline--fa.fa-pull-right {\\n  margin-left: var(--fa-pull-margin, 0.3em);\\n  width: auto;\\n}\\n.svg-inline--fa.fa-li {\\n  width: var(--fa-li-width, 2em);\\n  top: 0.25em;\\n}\\n.svg-inline--fa.fa-fw {\\n  width: var(--fa-fw-width, 1.25em);\\n}\\n\\n.fa-layers svg.svg-inline--fa {\\n  bottom: 0;\\n  left: 0;\\n  margin: auto;\\n  position: absolute;\\n  right: 0;\\n  top: 0;\\n}\\n\\n.fa-layers-counter, .fa-layers-text {\\n  display: inline-block;\\n  position: absolute;\\n  text-align: center;\\n}\\n\\n.fa-layers {\\n  display: inline-block;\\n  height: 1em;\\n  position: relative;\\n  text-align: center;\\n  vertical-align: -0.125em;\\n  width: 1em;\\n}\\n.fa-layers svg.svg-inline--fa {\\n  -webkit-transform-origin: center center;\\n          transform-origin: center center;\\n}\\n\\n.fa-layers-text {\\n  left: 50%;\\n  top: 50%;\\n  -webkit-transform: translate(-50%, -50%);\\n          transform: translate(-50%, -50%);\\n  -webkit-transform-origin: center center;\\n          transform-origin: center center;\\n}\\n\\n.fa-layers-counter {\\n  background-color: var(--fa-counter-background-color, #ff253a);\\n  border-radius: var(--fa-counter-border-radius, 1em);\\n  box-sizing: border-box;\\n  color: var(--fa-inverse, #fff);\\n  line-height: var(--fa-counter-line-height, 1);\\n  max-width: var(--fa-counter-max-width, 5em);\\n  min-width: var(--fa-counter-min-width, 1.5em);\\n  overflow: hidden;\\n  padding: var(--fa-counter-padding, 0.25em 0.5em);\\n  right: var(--fa-right, 0);\\n  text-overflow: ellipsis;\\n  top: var(--fa-top, 0);\\n  -webkit-transform: scale(var(--fa-counter-scale, 0.25));\\n          transform: scale(var(--fa-counter-scale, 0.25));\\n  -webkit-transform-origin: top right;\\n          transform-origin: top right;\\n}\\n\\n.fa-layers-bottom-right {\\n  bottom: var(--fa-bottom, 0);\\n  right: var(--fa-right, 0);\\n  top: auto;\\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\\n          transform: scale(var(--fa-layers-scale, 0.25));\\n  -webkit-transform-origin: bottom right;\\n          transform-origin: bottom right;\\n}\\n\\n.fa-layers-bottom-left {\\n  bottom: var(--fa-bottom, 0);\\n  left: var(--fa-left, 0);\\n  right: auto;\\n  top: auto;\\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\\n          transform: scale(var(--fa-layers-scale, 0.25));\\n  -webkit-transform-origin: bottom left;\\n          transform-origin: bottom left;\\n}\\n\\n.fa-layers-top-right {\\n  top: var(--fa-top, 0);\\n  right: var(--fa-right, 0);\\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\\n          transform: scale(var(--fa-layers-scale, 0.25));\\n  -webkit-transform-origin: top right;\\n          transform-origin: top right;\\n}\\n\\n.fa-layers-top-left {\\n  left: var(--fa-left, 0);\\n  right: auto;\\n  top: var(--fa-top, 0);\\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\\n          transform: scale(var(--fa-layers-scale, 0.25));\\n  -webkit-transform-origin: top left;\\n          transform-origin: top left;\\n}\\n\\n.fa-1x {\\n  font-size: 1em;\\n}\\n\\n.fa-2x {\\n  font-size: 2em;\\n}\\n\\n.fa-3x {\\n  font-size: 3em;\\n}\\n\\n.fa-4x {\\n  font-size: 4em;\\n}\\n\\n.fa-5x {\\n  font-size: 5em;\\n}\\n\\n.fa-6x {\\n  font-size: 6em;\\n}\\n\\n.fa-7x {\\n  font-size: 7em;\\n}\\n\\n.fa-8x {\\n  font-size: 8em;\\n}\\n\\n.fa-9x {\\n  font-size: 9em;\\n}\\n\\n.fa-10x {\\n  font-size: 10em;\\n}\\n\\n.fa-2xs {\\n  font-size: 0.625em;\\n  line-height: 0.1em;\\n  vertical-align: 0.225em;\\n}\\n\\n.fa-xs {\\n  font-size: 0.75em;\\n  line-height: 0.0833333337em;\\n  vertical-align: 0.125em;\\n}\\n\\n.fa-sm {\\n  font-size: 0.875em;\\n  line-height: 0.0714285718em;\\n  vertical-align: 0.0535714295em;\\n}\\n\\n.fa-lg {\\n  font-size: 1.25em;\\n  line-height: 0.05em;\\n  vertical-align: -0.075em;\\n}\\n\\n.fa-xl {\\n  font-size: 1.5em;\\n  line-height: 0.0416666682em;\\n  vertical-align: -0.125em;\\n}\\n\\n.fa-2xl {\\n  font-size: 2em;\\n  line-height: 0.03125em;\\n  vertical-align: -0.1875em;\\n}\\n\\n.fa-fw {\\n  text-align: center;\\n  width: 1.25em;\\n}\\n\\n.fa-ul {\\n  list-style-type: none;\\n  margin-left: var(--fa-li-margin, 2.5em);\\n  padding-left: 0;\\n}\\n.fa-ul > li {\\n  position: relative;\\n}\\n\\n.fa-li {\\n  left: calc(var(--fa-li-width, 2em) * -1);\\n  position: absolute;\\n  text-align: center;\\n  width: var(--fa-li-width, 2em);\\n  line-height: inherit;\\n}\\n\\n.fa-border {\\n  border-color: var(--fa-border-color, #eee);\\n  border-radius: var(--fa-border-radius, 0.1em);\\n  border-style: var(--fa-border-style, solid);\\n  border-width: var(--fa-border-width, 0.08em);\\n  padding: var(--fa-border-padding, 0.2em 0.25em 0.15em);\\n}\\n\\n.fa-pull-left {\\n  float: left;\\n  margin-right: var(--fa-pull-margin, 0.3em);\\n}\\n\\n.fa-pull-right {\\n  float: right;\\n  margin-left: var(--fa-pull-margin, 0.3em);\\n}\\n\\n.fa-beat {\\n  -webkit-animation-name: fa-beat;\\n          animation-name: fa-beat;\\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\\n          animation-delay: var(--fa-animation-delay, 0s);\\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\\n          animation-direction: var(--fa-animation-direction, normal);\\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\\n          animation-duration: var(--fa-animation-duration, 1s);\\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n  -webkit-animation-timing-function: var(--fa-animation-timing, ease-in-out);\\n          animation-timing-function: var(--fa-animation-timing, ease-in-out);\\n}\\n\\n.fa-bounce {\\n  -webkit-animation-name: fa-bounce;\\n          animation-name: fa-bounce;\\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\\n          animation-delay: var(--fa-animation-delay, 0s);\\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\\n          animation-direction: var(--fa-animation-direction, normal);\\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\\n          animation-duration: var(--fa-animation-duration, 1s);\\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.28, 0.84, 0.42, 1));\\n          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.28, 0.84, 0.42, 1));\\n}\\n\\n.fa-fade {\\n  -webkit-animation-name: fa-fade;\\n          animation-name: fa-fade;\\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\\n          animation-delay: var(--fa-animation-delay, 0s);\\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\\n          animation-direction: var(--fa-animation-direction, normal);\\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\\n          animation-duration: var(--fa-animation-duration, 1s);\\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\\n          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\\n}\\n\\n.fa-beat-fade {\\n  -webkit-animation-name: fa-beat-fade;\\n          animation-name: fa-beat-fade;\\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\\n          animation-delay: var(--fa-animation-delay, 0s);\\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\\n          animation-direction: var(--fa-animation-direction, normal);\\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\\n          animation-duration: var(--fa-animation-duration, 1s);\\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\\n          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\\n}\\n\\n.fa-flip {\\n  -webkit-animation-name: fa-flip;\\n          animation-name: fa-flip;\\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\\n          animation-delay: var(--fa-animation-delay, 0s);\\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\\n          animation-direction: var(--fa-animation-direction, normal);\\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\\n          animation-duration: var(--fa-animation-duration, 1s);\\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n  -webkit-animation-timing-function: var(--fa-animation-timing, ease-in-out);\\n          animation-timing-function: var(--fa-animation-timing, ease-in-out);\\n}\\n\\n.fa-shake {\\n  -webkit-animation-name: fa-shake;\\n          animation-name: fa-shake;\\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\\n          animation-delay: var(--fa-animation-delay, 0s);\\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\\n          animation-direction: var(--fa-animation-direction, normal);\\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\\n          animation-duration: var(--fa-animation-duration, 1s);\\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n  -webkit-animation-timing-function: var(--fa-animation-timing, linear);\\n          animation-timing-function: var(--fa-animation-timing, linear);\\n}\\n\\n.fa-spin {\\n  -webkit-animation-name: fa-spin;\\n          animation-name: fa-spin;\\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\\n          animation-delay: var(--fa-animation-delay, 0s);\\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\\n          animation-direction: var(--fa-animation-direction, normal);\\n  -webkit-animation-duration: var(--fa-animation-duration, 2s);\\n          animation-duration: var(--fa-animation-duration, 2s);\\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n  -webkit-animation-timing-function: var(--fa-animation-timing, linear);\\n          animation-timing-function: var(--fa-animation-timing, linear);\\n}\\n\\n.fa-spin-reverse {\\n  --fa-animation-direction: reverse;\\n}\\n\\n.fa-pulse,\\n.fa-spin-pulse {\\n  -webkit-animation-name: fa-spin;\\n          animation-name: fa-spin;\\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\\n          animation-direction: var(--fa-animation-direction, normal);\\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\\n          animation-duration: var(--fa-animation-duration, 1s);\\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n  -webkit-animation-timing-function: var(--fa-animation-timing, steps(8));\\n          animation-timing-function: var(--fa-animation-timing, steps(8));\\n}\\n\\n@media (prefers-reduced-motion: reduce) {\\n  .fa-beat,\\n.fa-bounce,\\n.fa-fade,\\n.fa-beat-fade,\\n.fa-flip,\\n.fa-pulse,\\n.fa-shake,\\n.fa-spin,\\n.fa-spin-pulse {\\n    -webkit-animation-delay: -1ms;\\n            animation-delay: -1ms;\\n    -webkit-animation-duration: 1ms;\\n            animation-duration: 1ms;\\n    -webkit-animation-iteration-count: 1;\\n            animation-iteration-count: 1;\\n    -webkit-transition-delay: 0s;\\n            transition-delay: 0s;\\n    -webkit-transition-duration: 0s;\\n            transition-duration: 0s;\\n  }\\n}\\n@-webkit-keyframes fa-beat {\\n  0%, 90% {\\n    -webkit-transform: scale(1);\\n            transform: scale(1);\\n  }\\n  45% {\\n    -webkit-transform: scale(var(--fa-beat-scale, 1.25));\\n            transform: scale(var(--fa-beat-scale, 1.25));\\n  }\\n}\\n@keyframes fa-beat {\\n  0%, 90% {\\n    -webkit-transform: scale(1);\\n            transform: scale(1);\\n  }\\n  45% {\\n    -webkit-transform: scale(var(--fa-beat-scale, 1.25));\\n            transform: scale(var(--fa-beat-scale, 1.25));\\n  }\\n}\\n@-webkit-keyframes fa-bounce {\\n  0% {\\n    -webkit-transform: scale(1, 1) translateY(0);\\n            transform: scale(1, 1) translateY(0);\\n  }\\n  10% {\\n    -webkit-transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\\n            transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\\n  }\\n  30% {\\n    -webkit-transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\\n            transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\\n  }\\n  50% {\\n    -webkit-transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\\n            transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\\n  }\\n  57% {\\n    -webkit-transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\\n            transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\\n  }\\n  64% {\\n    -webkit-transform: scale(1, 1) translateY(0);\\n            transform: scale(1, 1) translateY(0);\\n  }\\n  100% {\\n    -webkit-transform: scale(1, 1) translateY(0);\\n            transform: scale(1, 1) translateY(0);\\n  }\\n}\\n@keyframes fa-bounce {\\n  0% {\\n    -webkit-transform: scale(1, 1) translateY(0);\\n            transform: scale(1, 1) translateY(0);\\n  }\\n  10% {\\n    -webkit-transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\\n            transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\\n  }\\n  30% {\\n    -webkit-transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\\n            transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\\n  }\\n  50% {\\n    -webkit-transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\\n            transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\\n  }\\n  57% {\\n    -webkit-transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\\n            transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\\n  }\\n  64% {\\n    -webkit-transform: scale(1, 1) translateY(0);\\n            transform: scale(1, 1) translateY(0);\\n  }\\n  100% {\\n    -webkit-transform: scale(1, 1) translateY(0);\\n            transform: scale(1, 1) translateY(0);\\n  }\\n}\\n@-webkit-keyframes fa-fade {\\n  50% {\\n    opacity: var(--fa-fade-opacity, 0.4);\\n  }\\n}\\n@keyframes fa-fade {\\n  50% {\\n    opacity: var(--fa-fade-opacity, 0.4);\\n  }\\n}\\n@-webkit-keyframes fa-beat-fade {\\n  0%, 100% {\\n    opacity: var(--fa-beat-fade-opacity, 0.4);\\n    -webkit-transform: scale(1);\\n            transform: scale(1);\\n  }\\n  50% {\\n    opacity: 1;\\n    -webkit-transform: scale(var(--fa-beat-fade-scale, 1.125));\\n            transform: scale(var(--fa-beat-fade-scale, 1.125));\\n  }\\n}\\n@keyframes fa-beat-fade {\\n  0%, 100% {\\n    opacity: var(--fa-beat-fade-opacity, 0.4);\\n    -webkit-transform: scale(1);\\n            transform: scale(1);\\n  }\\n  50% {\\n    opacity: 1;\\n    -webkit-transform: scale(var(--fa-beat-fade-scale, 1.125));\\n            transform: scale(var(--fa-beat-fade-scale, 1.125));\\n  }\\n}\\n@-webkit-keyframes fa-flip {\\n  50% {\\n    -webkit-transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\\n            transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\\n  }\\n}\\n@keyframes fa-flip {\\n  50% {\\n    -webkit-transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\\n            transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\\n  }\\n}\\n@-webkit-keyframes fa-shake {\\n  0% {\\n    -webkit-transform: rotate(-15deg);\\n            transform: rotate(-15deg);\\n  }\\n  4% {\\n    -webkit-transform: rotate(15deg);\\n            transform: rotate(15deg);\\n  }\\n  8%, 24% {\\n    -webkit-transform: rotate(-18deg);\\n            transform: rotate(-18deg);\\n  }\\n  12%, 28% {\\n    -webkit-transform: rotate(18deg);\\n            transform: rotate(18deg);\\n  }\\n  16% {\\n    -webkit-transform: rotate(-22deg);\\n            transform: rotate(-22deg);\\n  }\\n  20% {\\n    -webkit-transform: rotate(22deg);\\n            transform: rotate(22deg);\\n  }\\n  32% {\\n    -webkit-transform: rotate(-12deg);\\n            transform: rotate(-12deg);\\n  }\\n  36% {\\n    -webkit-transform: rotate(12deg);\\n            transform: rotate(12deg);\\n  }\\n  40%, 100% {\\n    -webkit-transform: rotate(0deg);\\n            transform: rotate(0deg);\\n  }\\n}\\n@keyframes fa-shake {\\n  0% {\\n    -webkit-transform: rotate(-15deg);\\n            transform: rotate(-15deg);\\n  }\\n  4% {\\n    -webkit-transform: rotate(15deg);\\n            transform: rotate(15deg);\\n  }\\n  8%, 24% {\\n    -webkit-transform: rotate(-18deg);\\n            transform: rotate(-18deg);\\n  }\\n  12%, 28% {\\n    -webkit-transform: rotate(18deg);\\n            transform: rotate(18deg);\\n  }\\n  16% {\\n    -webkit-transform: rotate(-22deg);\\n            transform: rotate(-22deg);\\n  }\\n  20% {\\n    -webkit-transform: rotate(22deg);\\n            transform: rotate(22deg);\\n  }\\n  32% {\\n    -webkit-transform: rotate(-12deg);\\n            transform: rotate(-12deg);\\n  }\\n  36% {\\n    -webkit-transform: rotate(12deg);\\n            transform: rotate(12deg);\\n  }\\n  40%, 100% {\\n    -webkit-transform: rotate(0deg);\\n            transform: rotate(0deg);\\n  }\\n}\\n@-webkit-keyframes fa-spin {\\n  0% {\\n    -webkit-transform: rotate(0deg);\\n            transform: rotate(0deg);\\n  }\\n  100% {\\n    -webkit-transform: rotate(360deg);\\n            transform: rotate(360deg);\\n  }\\n}\\n@keyframes fa-spin {\\n  0% {\\n    -webkit-transform: rotate(0deg);\\n            transform: rotate(0deg);\\n  }\\n  100% {\\n    -webkit-transform: rotate(360deg);\\n            transform: rotate(360deg);\\n  }\\n}\\n.fa-rotate-90 {\\n  -webkit-transform: rotate(90deg);\\n          transform: rotate(90deg);\\n}\\n\\n.fa-rotate-180 {\\n  -webkit-transform: rotate(180deg);\\n          transform: rotate(180deg);\\n}\\n\\n.fa-rotate-270 {\\n  -webkit-transform: rotate(270deg);\\n          transform: rotate(270deg);\\n}\\n\\n.fa-flip-horizontal {\\n  -webkit-transform: scale(-1, 1);\\n          transform: scale(-1, 1);\\n}\\n\\n.fa-flip-vertical {\\n  -webkit-transform: scale(1, -1);\\n          transform: scale(1, -1);\\n}\\n\\n.fa-flip-both,\\n.fa-flip-horizontal.fa-flip-vertical {\\n  -webkit-transform: scale(-1, -1);\\n          transform: scale(-1, -1);\\n}\\n\\n.fa-rotate-by {\\n  -webkit-transform: rotate(var(--fa-rotate-angle, none));\\n          transform: rotate(var(--fa-rotate-angle, none));\\n}\\n\\n.fa-stack {\\n  display: inline-block;\\n  vertical-align: middle;\\n  height: 2em;\\n  position: relative;\\n  width: 2.5em;\\n}\\n\\n.fa-stack-1x,\\n.fa-stack-2x {\\n  bottom: 0;\\n  left: 0;\\n  margin: auto;\\n  position: absolute;\\n  right: 0;\\n  top: 0;\\n  z-index: var(--fa-stack-z-index, auto);\\n}\\n\\n.svg-inline--fa.fa-stack-1x {\\n  height: 1em;\\n  width: 1.25em;\\n}\\n.svg-inline--fa.fa-stack-2x {\\n  height: 2em;\\n  width: 2.5em;\\n}\\n\\n.fa-inverse {\\n  color: var(--fa-inverse, #fff);\\n}\\n\\n.sr-only,\\n.fa-sr-only {\\n  position: absolute;\\n  width: 1px;\\n  height: 1px;\\n  padding: 0;\\n  margin: -1px;\\n  overflow: hidden;\\n  clip: rect(0, 0, 0, 0);\\n  white-space: nowrap;\\n  border-width: 0;\\n}\\n\\n.sr-only-focusable:not(:focus),\\n.fa-sr-only-focusable:not(:focus) {\\n  position: absolute;\\n  width: 1px;\\n  height: 1px;\\n  padding: 0;\\n  margin: -1px;\\n  overflow: hidden;\\n  clip: rect(0, 0, 0, 0);\\n  white-space: nowrap;\\n  border-width: 0;\\n}\\n\\n.svg-inline--fa .fa-primary {\\n  fill: var(--fa-primary-color, currentColor);\\n  opacity: var(--fa-primary-opacity, 1);\\n}\\n\\n.svg-inline--fa .fa-secondary {\\n  fill: var(--fa-secondary-color, currentColor);\\n  opacity: var(--fa-secondary-opacity, 0.4);\\n}\\n\\n.svg-inline--fa.fa-swap-opacity .fa-primary {\\n  opacity: var(--fa-secondary-opacity, 0.4);\\n}\\n\\n.svg-inline--fa.fa-swap-opacity .fa-secondary {\\n  opacity: var(--fa-primary-opacity, 1);\\n}\\n\\n.svg-inline--fa mask .fa-primary,\\n.svg-inline--fa mask .fa-secondary {\\n  fill: black;\\n}\\n\\n.fad.fa-inverse,\\n.fa-duotone.fa-inverse {\\n  color: var(--fa-inverse, #fff);\\n}';\nfunction css() {\n    var dcp = DEFAULT_CSS_PREFIX;\n    var drc = DEFAULT_REPLACEMENT_CLASS;\n    var fp = config.cssPrefix;\n    var rc = config.replacementClass;\n    var s = baseStyles;\n    if (fp !== dcp || rc !== drc) {\n        var dPatt = new RegExp(\"\\\\.\".concat(dcp, \"\\\\-\"), \"g\");\n        var customPropPatt = new RegExp(\"\\\\--\".concat(dcp, \"\\\\-\"), \"g\");\n        var rPatt = new RegExp(\"\\\\.\".concat(drc), \"g\");\n        s = s.replace(dPatt, \".\".concat(fp, \"-\")).replace(customPropPatt, \"--\".concat(fp, \"-\")).replace(rPatt, \".\".concat(rc));\n    }\n    return s;\n}\nvar _cssInserted = false;\nfunction ensureCss() {\n    if (config.autoAddCss && !_cssInserted) {\n        insertCss(css());\n        _cssInserted = true;\n    }\n}\nvar InjectCSS = {\n    mixout: function mixout() {\n        return {\n            dom: {\n                css: css,\n                insertCss: ensureCss\n            }\n        };\n    },\n    hooks: function hooks() {\n        return {\n            beforeDOMElementCreation: function beforeDOMElementCreation() {\n                ensureCss();\n            },\n            beforeI2svg: function beforeI2svg() {\n                ensureCss();\n            }\n        };\n    }\n};\nvar w = WINDOW || {};\nif (!w[NAMESPACE_IDENTIFIER]) w[NAMESPACE_IDENTIFIER] = {};\nif (!w[NAMESPACE_IDENTIFIER].styles) w[NAMESPACE_IDENTIFIER].styles = {};\nif (!w[NAMESPACE_IDENTIFIER].hooks) w[NAMESPACE_IDENTIFIER].hooks = {};\nif (!w[NAMESPACE_IDENTIFIER].shims) w[NAMESPACE_IDENTIFIER].shims = [];\nvar namespace = w[NAMESPACE_IDENTIFIER];\nvar functions = [];\nvar listener = function listener() {\n    DOCUMENT.removeEventListener(\"DOMContentLoaded\", listener);\n    loaded = 1;\n    functions.map(function(fn) {\n        return fn();\n    });\n};\nvar loaded = false;\nif (IS_DOM) {\n    loaded = (DOCUMENT.documentElement.doScroll ? /^loaded|^c/ : /^loaded|^i|^c/).test(DOCUMENT.readyState);\n    if (!loaded) DOCUMENT.addEventListener(\"DOMContentLoaded\", listener);\n}\nfunction domready(fn) {\n    if (!IS_DOM) return;\n    loaded ? setTimeout(fn, 0) : functions.push(fn);\n}\nfunction toHtml(abstractNodes) {\n    var tag = abstractNodes.tag, _abstractNodes$attrib = abstractNodes.attributes, attributes = _abstractNodes$attrib === void 0 ? {} : _abstractNodes$attrib, _abstractNodes$childr = abstractNodes.children, children = _abstractNodes$childr === void 0 ? [] : _abstractNodes$childr;\n    if (typeof abstractNodes === \"string\") {\n        return htmlEscape(abstractNodes);\n    } else {\n        return \"<\".concat(tag, \" \").concat(joinAttributes(attributes), \">\").concat(children.map(toHtml).join(\"\"), \"</\").concat(tag, \">\");\n    }\n}\nfunction iconFromMapping(mapping, prefix, iconName) {\n    if (mapping && mapping[prefix] && mapping[prefix][iconName]) {\n        return {\n            prefix: prefix,\n            iconName: iconName,\n            icon: mapping[prefix][iconName]\n        };\n    }\n}\n/**\n * Internal helper to bind a function known to have 4 arguments\n * to a given context.\n */ var bindInternal4 = function bindInternal4(func, thisContext) {\n    return function(a, b, c, d) {\n        return func.call(thisContext, a, b, c, d);\n    };\n};\n/**\n * # Reduce\n *\n * A fast object `.reduce()` implementation.\n *\n * @param  {Object}   subject      The object to reduce over.\n * @param  {Function} fn           The reducer function.\n * @param  {mixed}    initialValue The initial value for the reducer, defaults to subject[0].\n * @param  {Object}   thisContext  The context for the reducer.\n * @return {mixed}                 The final result.\n */ var reduce = function fastReduceObject(subject, fn, initialValue, thisContext) {\n    var keys = Object.keys(subject), length = keys.length, iterator = thisContext !== undefined ? bindInternal4(fn, thisContext) : fn, i, key, result;\n    if (initialValue === undefined) {\n        i = 1;\n        result = subject[keys[0]];\n    } else {\n        i = 0;\n        result = initialValue;\n    }\n    for(; i < length; i++){\n        key = keys[i];\n        result = iterator(result, subject[key], key, subject);\n    }\n    return result;\n};\n/**\n * ucs2decode() and codePointAt() are both works of Mathias Bynens and licensed under MIT\n *\n * Copyright Mathias Bynens <https://mathiasbynens.be/>\n\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */ function ucs2decode(string) {\n    var output = [];\n    var counter = 0;\n    var length = string.length;\n    while(counter < length){\n        var value = string.charCodeAt(counter++);\n        if (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n            var extra = string.charCodeAt(counter++);\n            if ((extra & 0xFC00) == 0xDC00) {\n                // eslint-disable-line eqeqeq\n                output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n            } else {\n                output.push(value);\n                counter--;\n            }\n        } else {\n            output.push(value);\n        }\n    }\n    return output;\n}\nfunction toHex(unicode) {\n    var decoded = ucs2decode(unicode);\n    return decoded.length === 1 ? decoded[0].toString(16) : null;\n}\nfunction codePointAt(string, index) {\n    var size = string.length;\n    var first = string.charCodeAt(index);\n    var second;\n    if (first >= 0xD800 && first <= 0xDBFF && size > index + 1) {\n        second = string.charCodeAt(index + 1);\n        if (second >= 0xDC00 && second <= 0xDFFF) {\n            return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        }\n    }\n    return first;\n}\nfunction normalizeIcons(icons) {\n    return Object.keys(icons).reduce(function(acc, iconName) {\n        var icon = icons[iconName];\n        var expanded = !!icon.icon;\n        if (expanded) {\n            acc[icon.iconName] = icon.icon;\n        } else {\n            acc[iconName] = icon;\n        }\n        return acc;\n    }, {});\n}\nfunction defineIcons(prefix, icons) {\n    var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var _params$skipHooks = params.skipHooks, skipHooks = _params$skipHooks === void 0 ? false : _params$skipHooks;\n    var normalized = normalizeIcons(icons);\n    if (typeof namespace.hooks.addPack === \"function\" && !skipHooks) {\n        namespace.hooks.addPack(prefix, normalizeIcons(icons));\n    } else {\n        namespace.styles[prefix] = _objectSpread2(_objectSpread2({}, namespace.styles[prefix] || {}), normalized);\n    }\n    /**\n   * Font Awesome 4 used the prefix of `fa` for all icons. With the introduction\n   * of new styles we needed to differentiate between them. Prefix `fa` is now an alias\n   * for `fas` so we'll ease the upgrade process for our users by automatically defining\n   * this as well.\n   */ if (prefix === \"fas\") {\n        defineIcons(\"fa\", icons);\n    }\n}\nvar duotonePathRe = [\n    /*#__PURE__*/ _wrapRegExp(/path d=\"((?:(?!\")[\\s\\S])+)\".*path d=\"((?:(?!\")[\\s\\S])+)\"/, {\n        d1: 1,\n        d2: 2\n    }),\n    /*#__PURE__*/ _wrapRegExp(/path class=\"((?:(?!\")[\\s\\S])+)\".*d=\"((?:(?!\")[\\s\\S])+)\".*path class=\"((?:(?!\")[\\s\\S])+)\".*d=\"((?:(?!\")[\\s\\S])+)\"/, {\n        cls1: 1,\n        d1: 2,\n        cls2: 3,\n        d2: 4\n    }),\n    /*#__PURE__*/ _wrapRegExp(/path class=\"((?:(?!\")[\\s\\S])+)\".*d=\"((?:(?!\")[\\s\\S])+)\"/, {\n        cls1: 1,\n        d1: 2\n    })\n];\nvar _LONG_STYLE, _PREFIXES, _PREFIXES_FOR_FAMILY;\nvar styles = namespace.styles, shims = namespace.shims;\nvar LONG_STYLE = (_LONG_STYLE = {}, _defineProperty(_LONG_STYLE, FAMILY_CLASSIC, Object.values(PREFIX_TO_LONG_STYLE[FAMILY_CLASSIC])), _defineProperty(_LONG_STYLE, FAMILY_SHARP, Object.values(PREFIX_TO_LONG_STYLE[FAMILY_SHARP])), _LONG_STYLE);\nvar _defaultUsablePrefix = null;\nvar _byUnicode = {};\nvar _byLigature = {};\nvar _byOldName = {};\nvar _byOldUnicode = {};\nvar _byAlias = {};\nvar PREFIXES = (_PREFIXES = {}, _defineProperty(_PREFIXES, FAMILY_CLASSIC, Object.keys(PREFIX_TO_STYLE[FAMILY_CLASSIC])), _defineProperty(_PREFIXES, FAMILY_SHARP, Object.keys(PREFIX_TO_STYLE[FAMILY_SHARP])), _PREFIXES);\nfunction isReserved(name) {\n    return ~RESERVED_CLASSES.indexOf(name);\n}\nfunction getIconName(cssPrefix, cls) {\n    var parts = cls.split(\"-\");\n    var prefix = parts[0];\n    var iconName = parts.slice(1).join(\"-\");\n    if (prefix === cssPrefix && iconName !== \"\" && !isReserved(iconName)) {\n        return iconName;\n    } else {\n        return null;\n    }\n}\nvar build = function build() {\n    var lookup = function lookup(reducer) {\n        return reduce(styles, function(o, style, prefix) {\n            o[prefix] = reduce(style, reducer, {});\n            return o;\n        }, {});\n    };\n    _byUnicode = lookup(function(acc, icon, iconName) {\n        if (icon[3]) {\n            acc[icon[3]] = iconName;\n        }\n        if (icon[2]) {\n            var aliases = icon[2].filter(function(a) {\n                return typeof a === \"number\";\n            });\n            aliases.forEach(function(alias) {\n                acc[alias.toString(16)] = iconName;\n            });\n        }\n        return acc;\n    });\n    _byLigature = lookup(function(acc, icon, iconName) {\n        acc[iconName] = iconName;\n        if (icon[2]) {\n            var aliases = icon[2].filter(function(a) {\n                return typeof a === \"string\";\n            });\n            aliases.forEach(function(alias) {\n                acc[alias] = iconName;\n            });\n        }\n        return acc;\n    });\n    _byAlias = lookup(function(acc, icon, iconName) {\n        var aliases = icon[2];\n        acc[iconName] = iconName;\n        aliases.forEach(function(alias) {\n            acc[alias] = iconName;\n        });\n        return acc;\n    }); // If we have a Kit, we can't determine if regular is available since we\n    // could be auto-fetching it. We'll have to assume that it is available.\n    var hasRegular = \"far\" in styles || config.autoFetchSvg;\n    var shimLookups = reduce(shims, function(acc, shim) {\n        var maybeNameMaybeUnicode = shim[0];\n        var prefix = shim[1];\n        var iconName = shim[2];\n        if (prefix === \"far\" && !hasRegular) {\n            prefix = \"fas\";\n        }\n        if (typeof maybeNameMaybeUnicode === \"string\") {\n            acc.names[maybeNameMaybeUnicode] = {\n                prefix: prefix,\n                iconName: iconName\n            };\n        }\n        if (typeof maybeNameMaybeUnicode === \"number\") {\n            acc.unicodes[maybeNameMaybeUnicode.toString(16)] = {\n                prefix: prefix,\n                iconName: iconName\n            };\n        }\n        return acc;\n    }, {\n        names: {},\n        unicodes: {}\n    });\n    _byOldName = shimLookups.names;\n    _byOldUnicode = shimLookups.unicodes;\n    _defaultUsablePrefix = getCanonicalPrefix(config.styleDefault, {\n        family: config.familyDefault\n    });\n};\nonChange(function(c) {\n    _defaultUsablePrefix = getCanonicalPrefix(c.styleDefault, {\n        family: config.familyDefault\n    });\n});\nbuild();\nfunction byUnicode(prefix, unicode) {\n    return (_byUnicode[prefix] || {})[unicode];\n}\nfunction byLigature(prefix, ligature) {\n    return (_byLigature[prefix] || {})[ligature];\n}\nfunction byAlias(prefix, alias) {\n    return (_byAlias[prefix] || {})[alias];\n}\nfunction byOldName(name) {\n    return _byOldName[name] || {\n        prefix: null,\n        iconName: null\n    };\n}\nfunction byOldUnicode(unicode) {\n    var oldUnicode = _byOldUnicode[unicode];\n    var newUnicode = byUnicode(\"fas\", unicode);\n    return oldUnicode || (newUnicode ? {\n        prefix: \"fas\",\n        iconName: newUnicode\n    } : null) || {\n        prefix: null,\n        iconName: null\n    };\n}\nfunction getDefaultUsablePrefix() {\n    return _defaultUsablePrefix;\n}\nvar emptyCanonicalIcon = function emptyCanonicalIcon() {\n    return {\n        prefix: null,\n        iconName: null,\n        rest: []\n    };\n};\nfunction getCanonicalPrefix(styleOrPrefix) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _params$family = params.family, family = _params$family === void 0 ? FAMILY_CLASSIC : _params$family;\n    var style = PREFIX_TO_STYLE[family][styleOrPrefix];\n    var prefix = STYLE_TO_PREFIX[family][styleOrPrefix] || STYLE_TO_PREFIX[family][style];\n    var defined = styleOrPrefix in namespace.styles ? styleOrPrefix : null;\n    return prefix || defined || null;\n}\nvar PREFIXES_FOR_FAMILY = (_PREFIXES_FOR_FAMILY = {}, _defineProperty(_PREFIXES_FOR_FAMILY, FAMILY_CLASSIC, Object.keys(PREFIX_TO_LONG_STYLE[FAMILY_CLASSIC])), _defineProperty(_PREFIXES_FOR_FAMILY, FAMILY_SHARP, Object.keys(PREFIX_TO_LONG_STYLE[FAMILY_SHARP])), _PREFIXES_FOR_FAMILY);\nfunction getCanonicalIcon(values) {\n    var _famProps;\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _params$skipLookups = params.skipLookups, skipLookups = _params$skipLookups === void 0 ? false : _params$skipLookups;\n    var famProps = (_famProps = {}, _defineProperty(_famProps, FAMILY_CLASSIC, \"\".concat(config.cssPrefix, \"-\").concat(FAMILY_CLASSIC)), _defineProperty(_famProps, FAMILY_SHARP, \"\".concat(config.cssPrefix, \"-\").concat(FAMILY_SHARP)), _famProps);\n    var givenPrefix = null;\n    var family = FAMILY_CLASSIC;\n    if (values.includes(famProps[FAMILY_CLASSIC]) || values.some(function(v) {\n        return PREFIXES_FOR_FAMILY[FAMILY_CLASSIC].includes(v);\n    })) {\n        family = FAMILY_CLASSIC;\n    }\n    if (values.includes(famProps[FAMILY_SHARP]) || values.some(function(v) {\n        return PREFIXES_FOR_FAMILY[FAMILY_SHARP].includes(v);\n    })) {\n        family = FAMILY_SHARP;\n    }\n    var canonical = values.reduce(function(acc, cls) {\n        var iconName = getIconName(config.cssPrefix, cls);\n        if (styles[cls]) {\n            cls = LONG_STYLE[family].includes(cls) ? LONG_STYLE_TO_PREFIX[family][cls] : cls;\n            givenPrefix = cls;\n            acc.prefix = cls;\n        } else if (PREFIXES[family].indexOf(cls) > -1) {\n            givenPrefix = cls;\n            acc.prefix = getCanonicalPrefix(cls, {\n                family: family\n            });\n        } else if (iconName) {\n            acc.iconName = iconName;\n        } else if (cls !== config.replacementClass && cls !== famProps[FAMILY_CLASSIC] && cls !== famProps[FAMILY_SHARP]) {\n            acc.rest.push(cls);\n        }\n        if (!skipLookups && acc.prefix && acc.iconName) {\n            var shim = givenPrefix === \"fa\" ? byOldName(acc.iconName) : {};\n            var aliasIconName = byAlias(acc.prefix, acc.iconName);\n            if (shim.prefix) {\n                givenPrefix = null;\n            }\n            acc.iconName = shim.iconName || aliasIconName || acc.iconName;\n            acc.prefix = shim.prefix || acc.prefix;\n            if (acc.prefix === \"far\" && !styles[\"far\"] && styles[\"fas\"] && !config.autoFetchSvg) {\n                // Allow a fallback from the regular style to solid if regular is not available\n                // but only if we aren't auto-fetching SVGs\n                acc.prefix = \"fas\";\n            }\n        }\n        return acc;\n    }, emptyCanonicalIcon());\n    if (values.includes(\"fa-brands\") || values.includes(\"fab\")) {\n        canonical.prefix = \"fab\";\n    }\n    if (values.includes(\"fa-duotone\") || values.includes(\"fad\")) {\n        canonical.prefix = \"fad\";\n    }\n    if (!canonical.prefix && family === FAMILY_SHARP && (styles[\"fass\"] || config.autoFetchSvg)) {\n        canonical.prefix = \"fass\";\n        canonical.iconName = byAlias(canonical.prefix, canonical.iconName) || canonical.iconName;\n    }\n    if (canonical.prefix === \"fa\" || givenPrefix === \"fa\") {\n        // The fa prefix is not canonical. So if it has made it through until this point\n        // we will shift it to the correct prefix.\n        canonical.prefix = getDefaultUsablePrefix() || \"fas\";\n    }\n    return canonical;\n}\nvar Library = /*#__PURE__*/ function() {\n    function Library() {\n        _classCallCheck(this, Library);\n        this.definitions = {};\n    }\n    _createClass(Library, [\n        {\n            key: \"add\",\n            value: function add() {\n                var _this = this;\n                for(var _len = arguments.length, definitions = new Array(_len), _key = 0; _key < _len; _key++){\n                    definitions[_key] = arguments[_key];\n                }\n                var additions = definitions.reduce(this._pullDefinitions, {});\n                Object.keys(additions).forEach(function(key) {\n                    _this.definitions[key] = _objectSpread2(_objectSpread2({}, _this.definitions[key] || {}), additions[key]);\n                    defineIcons(key, additions[key]); // TODO can we stop doing this? We can't get the icons by 'fa-solid' any longer so this probably needs to change\n                    var longPrefix = PREFIX_TO_LONG_STYLE[FAMILY_CLASSIC][key];\n                    if (longPrefix) defineIcons(longPrefix, additions[key]);\n                    build();\n                });\n            }\n        },\n        {\n            key: \"reset\",\n            value: function reset() {\n                this.definitions = {};\n            }\n        },\n        {\n            key: \"_pullDefinitions\",\n            value: function _pullDefinitions(additions, definition) {\n                var normalized = definition.prefix && definition.iconName && definition.icon ? {\n                    0: definition\n                } : definition;\n                Object.keys(normalized).map(function(key) {\n                    var _normalized$key = normalized[key], prefix = _normalized$key.prefix, iconName = _normalized$key.iconName, icon = _normalized$key.icon;\n                    var aliases = icon[2];\n                    if (!additions[prefix]) additions[prefix] = {};\n                    if (aliases.length > 0) {\n                        aliases.forEach(function(alias) {\n                            if (typeof alias === \"string\") {\n                                additions[prefix][alias] = icon;\n                            }\n                        });\n                    }\n                    additions[prefix][iconName] = icon;\n                });\n                return additions;\n            }\n        }\n    ]);\n    return Library;\n}();\nvar _plugins = [];\nvar _hooks = {};\nvar providers = {};\nvar defaultProviderKeys = Object.keys(providers);\nfunction registerPlugins(nextPlugins, _ref) {\n    var obj = _ref.mixoutsTo;\n    _plugins = nextPlugins;\n    _hooks = {};\n    Object.keys(providers).forEach(function(k) {\n        if (defaultProviderKeys.indexOf(k) === -1) {\n            delete providers[k];\n        }\n    });\n    _plugins.forEach(function(plugin) {\n        var mixout = plugin.mixout ? plugin.mixout() : {};\n        Object.keys(mixout).forEach(function(tk) {\n            if (typeof mixout[tk] === \"function\") {\n                obj[tk] = mixout[tk];\n            }\n            if (_typeof(mixout[tk]) === \"object\") {\n                Object.keys(mixout[tk]).forEach(function(sk) {\n                    if (!obj[tk]) {\n                        obj[tk] = {};\n                    }\n                    obj[tk][sk] = mixout[tk][sk];\n                });\n            }\n        });\n        if (plugin.hooks) {\n            var hooks = plugin.hooks();\n            Object.keys(hooks).forEach(function(hook) {\n                if (!_hooks[hook]) {\n                    _hooks[hook] = [];\n                }\n                _hooks[hook].push(hooks[hook]);\n            });\n        }\n        if (plugin.provides) {\n            plugin.provides(providers);\n        }\n    });\n    return obj;\n}\nfunction chainHooks(hook, accumulator) {\n    for(var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){\n        args[_key - 2] = arguments[_key];\n    }\n    var hookFns = _hooks[hook] || [];\n    hookFns.forEach(function(hookFn) {\n        accumulator = hookFn.apply(null, [\n            accumulator\n        ].concat(args)); // eslint-disable-line no-useless-call\n    });\n    return accumulator;\n}\nfunction callHooks(hook) {\n    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n        args[_key2 - 1] = arguments[_key2];\n    }\n    var hookFns = _hooks[hook] || [];\n    hookFns.forEach(function(hookFn) {\n        hookFn.apply(null, args);\n    });\n    return undefined;\n}\nfunction callProvided() {\n    var hook = arguments[0];\n    var args = Array.prototype.slice.call(arguments, 1);\n    return providers[hook] ? providers[hook].apply(null, args) : undefined;\n}\nfunction findIconDefinition(iconLookup) {\n    if (iconLookup.prefix === \"fa\") {\n        iconLookup.prefix = \"fas\";\n    }\n    var iconName = iconLookup.iconName;\n    var prefix = iconLookup.prefix || getDefaultUsablePrefix();\n    if (!iconName) return;\n    iconName = byAlias(prefix, iconName) || iconName;\n    return iconFromMapping(library.definitions, prefix, iconName) || iconFromMapping(namespace.styles, prefix, iconName);\n}\nvar library = new Library();\nvar noAuto = function noAuto() {\n    config.autoReplaceSvg = false;\n    config.observeMutations = false;\n    callHooks(\"noAuto\");\n};\nvar dom = {\n    i2svg: function i2svg() {\n        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        if (IS_DOM) {\n            callHooks(\"beforeI2svg\", params);\n            callProvided(\"pseudoElements2svg\", params);\n            return callProvided(\"i2svg\", params);\n        } else {\n            return Promise.reject(\"Operation requires a DOM of some kind.\");\n        }\n    },\n    watch: function watch() {\n        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var autoReplaceSvgRoot = params.autoReplaceSvgRoot;\n        if (config.autoReplaceSvg === false) {\n            config.autoReplaceSvg = true;\n        }\n        config.observeMutations = true;\n        domready(function() {\n            autoReplace({\n                autoReplaceSvgRoot: autoReplaceSvgRoot\n            });\n            callHooks(\"watch\", params);\n        });\n    }\n};\nvar parse = {\n    icon: function icon(_icon) {\n        if (_icon === null) {\n            return null;\n        }\n        if (_typeof(_icon) === \"object\" && _icon.prefix && _icon.iconName) {\n            return {\n                prefix: _icon.prefix,\n                iconName: byAlias(_icon.prefix, _icon.iconName) || _icon.iconName\n            };\n        }\n        if (Array.isArray(_icon) && _icon.length === 2) {\n            var iconName = _icon[1].indexOf(\"fa-\") === 0 ? _icon[1].slice(3) : _icon[1];\n            var prefix = getCanonicalPrefix(_icon[0]);\n            return {\n                prefix: prefix,\n                iconName: byAlias(prefix, iconName) || iconName\n            };\n        }\n        if (typeof _icon === \"string\" && (_icon.indexOf(\"\".concat(config.cssPrefix, \"-\")) > -1 || _icon.match(ICON_SELECTION_SYNTAX_PATTERN))) {\n            var canonicalIcon = getCanonicalIcon(_icon.split(\" \"), {\n                skipLookups: true\n            });\n            return {\n                prefix: canonicalIcon.prefix || getDefaultUsablePrefix(),\n                iconName: byAlias(canonicalIcon.prefix, canonicalIcon.iconName) || canonicalIcon.iconName\n            };\n        }\n        if (typeof _icon === \"string\") {\n            var _prefix = getDefaultUsablePrefix();\n            return {\n                prefix: _prefix,\n                iconName: byAlias(_prefix, _icon) || _icon\n            };\n        }\n    }\n};\nvar api = {\n    noAuto: noAuto,\n    config: config,\n    dom: dom,\n    parse: parse,\n    library: library,\n    findIconDefinition: findIconDefinition,\n    toHtml: toHtml\n};\nvar autoReplace = function autoReplace() {\n    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _params$autoReplaceSv = params.autoReplaceSvgRoot, autoReplaceSvgRoot = _params$autoReplaceSv === void 0 ? DOCUMENT : _params$autoReplaceSv;\n    if ((Object.keys(namespace.styles).length > 0 || config.autoFetchSvg) && IS_DOM && config.autoReplaceSvg) api.dom.i2svg({\n        node: autoReplaceSvgRoot\n    });\n};\nfunction domVariants(val, abstractCreator) {\n    Object.defineProperty(val, \"abstract\", {\n        get: abstractCreator\n    });\n    Object.defineProperty(val, \"html\", {\n        get: function get() {\n            return val.abstract.map(function(a) {\n                return toHtml(a);\n            });\n        }\n    });\n    Object.defineProperty(val, \"node\", {\n        get: function get() {\n            if (!IS_DOM) return;\n            var container = DOCUMENT.createElement(\"div\");\n            container.innerHTML = val.html;\n            return container.children;\n        }\n    });\n    return val;\n}\nfunction asIcon(_ref) {\n    var children = _ref.children, main = _ref.main, mask = _ref.mask, attributes = _ref.attributes, styles = _ref.styles, transform = _ref.transform;\n    if (transformIsMeaningful(transform) && main.found && !mask.found) {\n        var width = main.width, height = main.height;\n        var offset = {\n            x: width / height / 2,\n            y: 0.5\n        };\n        attributes[\"style\"] = joinStyles(_objectSpread2(_objectSpread2({}, styles), {}, {\n            \"transform-origin\": \"\".concat(offset.x + transform.x / 16, \"em \").concat(offset.y + transform.y / 16, \"em\")\n        }));\n    }\n    return [\n        {\n            tag: \"svg\",\n            attributes: attributes,\n            children: children\n        }\n    ];\n}\nfunction asSymbol(_ref) {\n    var prefix = _ref.prefix, iconName = _ref.iconName, children = _ref.children, attributes = _ref.attributes, symbol = _ref.symbol;\n    var id = symbol === true ? \"\".concat(prefix, \"-\").concat(config.cssPrefix, \"-\").concat(iconName) : symbol;\n    return [\n        {\n            tag: \"svg\",\n            attributes: {\n                style: \"display: none;\"\n            },\n            children: [\n                {\n                    tag: \"symbol\",\n                    attributes: _objectSpread2(_objectSpread2({}, attributes), {}, {\n                        id: id\n                    }),\n                    children: children\n                }\n            ]\n        }\n    ];\n}\nfunction makeInlineSvgAbstract(params) {\n    var _params$icons = params.icons, main = _params$icons.main, mask = _params$icons.mask, prefix = params.prefix, iconName = params.iconName, transform = params.transform, symbol = params.symbol, title = params.title, maskId = params.maskId, titleId = params.titleId, extra = params.extra, _params$watchable = params.watchable, watchable = _params$watchable === void 0 ? false : _params$watchable;\n    var _ref = mask.found ? mask : main, width = _ref.width, height = _ref.height;\n    var isUploadedIcon = prefix === \"fak\";\n    var attrClass = [\n        config.replacementClass,\n        iconName ? \"\".concat(config.cssPrefix, \"-\").concat(iconName) : \"\"\n    ].filter(function(c) {\n        return extra.classes.indexOf(c) === -1;\n    }).filter(function(c) {\n        return c !== \"\" || !!c;\n    }).concat(extra.classes).join(\" \");\n    var content = {\n        children: [],\n        attributes: _objectSpread2(_objectSpread2({}, extra.attributes), {}, {\n            \"data-prefix\": prefix,\n            \"data-icon\": iconName,\n            \"class\": attrClass,\n            \"role\": extra.attributes.role || \"img\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\",\n            \"viewBox\": \"0 0 \".concat(width, \" \").concat(height)\n        })\n    };\n    var uploadedIconWidthStyle = isUploadedIcon && !~extra.classes.indexOf(\"fa-fw\") ? {\n        width: \"\".concat(width / height * 16 * 0.0625, \"em\")\n    } : {};\n    if (watchable) {\n        content.attributes[DATA_FA_I2SVG] = \"\";\n    }\n    if (title) {\n        content.children.push({\n            tag: \"title\",\n            attributes: {\n                id: content.attributes[\"aria-labelledby\"] || \"title-\".concat(titleId || nextUniqueId())\n            },\n            children: [\n                title\n            ]\n        });\n        delete content.attributes.title;\n    }\n    var args = _objectSpread2(_objectSpread2({}, content), {}, {\n        prefix: prefix,\n        iconName: iconName,\n        main: main,\n        mask: mask,\n        maskId: maskId,\n        transform: transform,\n        symbol: symbol,\n        styles: _objectSpread2(_objectSpread2({}, uploadedIconWidthStyle), extra.styles)\n    });\n    var _ref2 = mask.found && main.found ? callProvided(\"generateAbstractMask\", args) || {\n        children: [],\n        attributes: {}\n    } : callProvided(\"generateAbstractIcon\", args) || {\n        children: [],\n        attributes: {}\n    }, children = _ref2.children, attributes = _ref2.attributes;\n    args.children = children;\n    args.attributes = attributes;\n    if (symbol) {\n        return asSymbol(args);\n    } else {\n        return asIcon(args);\n    }\n}\nfunction makeLayersTextAbstract(params) {\n    var content = params.content, width = params.width, height = params.height, transform = params.transform, title = params.title, extra = params.extra, _params$watchable2 = params.watchable, watchable = _params$watchable2 === void 0 ? false : _params$watchable2;\n    var attributes = _objectSpread2(_objectSpread2(_objectSpread2({}, extra.attributes), title ? {\n        \"title\": title\n    } : {}), {}, {\n        \"class\": extra.classes.join(\" \")\n    });\n    if (watchable) {\n        attributes[DATA_FA_I2SVG] = \"\";\n    }\n    var styles = _objectSpread2({}, extra.styles);\n    if (transformIsMeaningful(transform)) {\n        styles[\"transform\"] = transformForCss({\n            transform: transform,\n            startCentered: true,\n            width: width,\n            height: height\n        });\n        styles[\"-webkit-transform\"] = styles[\"transform\"];\n    }\n    var styleString = joinStyles(styles);\n    if (styleString.length > 0) {\n        attributes[\"style\"] = styleString;\n    }\n    var val = [];\n    val.push({\n        tag: \"span\",\n        attributes: attributes,\n        children: [\n            content\n        ]\n    });\n    if (title) {\n        val.push({\n            tag: \"span\",\n            attributes: {\n                class: \"sr-only\"\n            },\n            children: [\n                title\n            ]\n        });\n    }\n    return val;\n}\nfunction makeLayersCounterAbstract(params) {\n    var content = params.content, title = params.title, extra = params.extra;\n    var attributes = _objectSpread2(_objectSpread2(_objectSpread2({}, extra.attributes), title ? {\n        \"title\": title\n    } : {}), {}, {\n        \"class\": extra.classes.join(\" \")\n    });\n    var styleString = joinStyles(extra.styles);\n    if (styleString.length > 0) {\n        attributes[\"style\"] = styleString;\n    }\n    var val = [];\n    val.push({\n        tag: \"span\",\n        attributes: attributes,\n        children: [\n            content\n        ]\n    });\n    if (title) {\n        val.push({\n            tag: \"span\",\n            attributes: {\n                class: \"sr-only\"\n            },\n            children: [\n                title\n            ]\n        });\n    }\n    return val;\n}\nvar styles$1 = namespace.styles;\nfunction asFoundIcon(icon) {\n    var width = icon[0];\n    var height = icon[1];\n    var _icon$slice = icon.slice(4), _icon$slice2 = _slicedToArray(_icon$slice, 1), vectorData = _icon$slice2[0];\n    var element = null;\n    if (Array.isArray(vectorData)) {\n        element = {\n            tag: \"g\",\n            attributes: {\n                class: \"\".concat(config.cssPrefix, \"-\").concat(DUOTONE_CLASSES.GROUP)\n            },\n            children: [\n                {\n                    tag: \"path\",\n                    attributes: {\n                        class: \"\".concat(config.cssPrefix, \"-\").concat(DUOTONE_CLASSES.SECONDARY),\n                        fill: \"currentColor\",\n                        d: vectorData[0]\n                    }\n                },\n                {\n                    tag: \"path\",\n                    attributes: {\n                        class: \"\".concat(config.cssPrefix, \"-\").concat(DUOTONE_CLASSES.PRIMARY),\n                        fill: \"currentColor\",\n                        d: vectorData[1]\n                    }\n                }\n            ]\n        };\n    } else {\n        element = {\n            tag: \"path\",\n            attributes: {\n                fill: \"currentColor\",\n                d: vectorData\n            }\n        };\n    }\n    return {\n        found: true,\n        width: width,\n        height: height,\n        icon: element\n    };\n}\nvar missingIconResolutionMixin = {\n    found: false,\n    width: 512,\n    height: 512\n};\nfunction maybeNotifyMissing(iconName, prefix) {\n    if (!PRODUCTION && !config.showMissingIcons && iconName) {\n        console.error('Icon with name \"'.concat(iconName, '\" and prefix \"').concat(prefix, '\" is missing.'));\n    }\n}\nfunction findIcon(iconName, prefix) {\n    var givenPrefix = prefix;\n    if (prefix === \"fa\" && config.styleDefault !== null) {\n        prefix = getDefaultUsablePrefix();\n    }\n    return new Promise(function(resolve, reject) {\n        var val = {\n            found: false,\n            width: 512,\n            height: 512,\n            icon: callProvided(\"missingIconAbstract\") || {}\n        };\n        if (givenPrefix === \"fa\") {\n            var shim = byOldName(iconName) || {};\n            iconName = shim.iconName || iconName;\n            prefix = shim.prefix || prefix;\n        }\n        if (iconName && prefix && styles$1[prefix] && styles$1[prefix][iconName]) {\n            var icon = styles$1[prefix][iconName];\n            return resolve(asFoundIcon(icon));\n        }\n        maybeNotifyMissing(iconName, prefix);\n        resolve(_objectSpread2(_objectSpread2({}, missingIconResolutionMixin), {}, {\n            icon: config.showMissingIcons && iconName ? callProvided(\"missingIconAbstract\") || {} : {}\n        }));\n    });\n}\nvar noop$1 = function noop() {};\nvar p = config.measurePerformance && PERFORMANCE && PERFORMANCE.mark && PERFORMANCE.measure ? PERFORMANCE : {\n    mark: noop$1,\n    measure: noop$1\n};\nvar preamble = 'FA \"6.4.2\"';\nvar begin = function begin(name) {\n    p.mark(\"\".concat(preamble, \" \").concat(name, \" begins\"));\n    return function() {\n        return end(name);\n    };\n};\nvar end = function end(name) {\n    p.mark(\"\".concat(preamble, \" \").concat(name, \" ends\"));\n    p.measure(\"\".concat(preamble, \" \").concat(name), \"\".concat(preamble, \" \").concat(name, \" begins\"), \"\".concat(preamble, \" \").concat(name, \" ends\"));\n};\nvar perf = {\n    begin: begin,\n    end: end\n};\nvar noop$2 = function noop() {};\nfunction isWatched(node) {\n    var i2svg = node.getAttribute ? node.getAttribute(DATA_FA_I2SVG) : null;\n    return typeof i2svg === \"string\";\n}\nfunction hasPrefixAndIcon(node) {\n    var prefix = node.getAttribute ? node.getAttribute(DATA_PREFIX) : null;\n    var icon = node.getAttribute ? node.getAttribute(DATA_ICON) : null;\n    return prefix && icon;\n}\nfunction hasBeenReplaced(node) {\n    return node && node.classList && node.classList.contains && node.classList.contains(config.replacementClass);\n}\nfunction getMutator() {\n    if (config.autoReplaceSvg === true) {\n        return mutators.replace;\n    }\n    var mutator = mutators[config.autoReplaceSvg];\n    return mutator || mutators.replace;\n}\nfunction createElementNS(tag) {\n    return DOCUMENT.createElementNS(\"http://www.w3.org/2000/svg\", tag);\n}\nfunction createElement(tag) {\n    return DOCUMENT.createElement(tag);\n}\nfunction convertSVG(abstractObj) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _params$ceFn = params.ceFn, ceFn = _params$ceFn === void 0 ? abstractObj.tag === \"svg\" ? createElementNS : createElement : _params$ceFn;\n    if (typeof abstractObj === \"string\") {\n        return DOCUMENT.createTextNode(abstractObj);\n    }\n    var tag = ceFn(abstractObj.tag);\n    Object.keys(abstractObj.attributes || []).forEach(function(key) {\n        tag.setAttribute(key, abstractObj.attributes[key]);\n    });\n    var children = abstractObj.children || [];\n    children.forEach(function(child) {\n        tag.appendChild(convertSVG(child, {\n            ceFn: ceFn\n        }));\n    });\n    return tag;\n}\nfunction nodeAsComment(node) {\n    var comment = \" \".concat(node.outerHTML, \" \");\n    /* BEGIN.ATTRIBUTION */ comment = \"\".concat(comment, \"Font Awesome fontawesome.com \");\n    /* END.ATTRIBUTION */ return comment;\n}\nvar mutators = {\n    replace: function replace(mutation) {\n        var node = mutation[0];\n        if (node.parentNode) {\n            mutation[1].forEach(function(_abstract) {\n                node.parentNode.insertBefore(convertSVG(_abstract), node);\n            });\n            if (node.getAttribute(DATA_FA_I2SVG) === null && config.keepOriginalSource) {\n                var comment = DOCUMENT.createComment(nodeAsComment(node));\n                node.parentNode.replaceChild(comment, node);\n            } else {\n                node.remove();\n            }\n        }\n    },\n    nest: function nest(mutation) {\n        var node = mutation[0];\n        var _abstract2 = mutation[1]; // If we already have a replaced node we do not want to continue nesting within it.\n        // Short-circuit to the standard replacement\n        if (~classArray(node).indexOf(config.replacementClass)) {\n            return mutators.replace(mutation);\n        }\n        var forSvg = new RegExp(\"\".concat(config.cssPrefix, \"-.*\"));\n        delete _abstract2[0].attributes.id;\n        if (_abstract2[0].attributes.class) {\n            var splitClasses = _abstract2[0].attributes.class.split(\" \").reduce(function(acc, cls) {\n                if (cls === config.replacementClass || cls.match(forSvg)) {\n                    acc.toSvg.push(cls);\n                } else {\n                    acc.toNode.push(cls);\n                }\n                return acc;\n            }, {\n                toNode: [],\n                toSvg: []\n            });\n            _abstract2[0].attributes.class = splitClasses.toSvg.join(\" \");\n            if (splitClasses.toNode.length === 0) {\n                node.removeAttribute(\"class\");\n            } else {\n                node.setAttribute(\"class\", splitClasses.toNode.join(\" \"));\n            }\n        }\n        var newInnerHTML = _abstract2.map(function(a) {\n            return toHtml(a);\n        }).join(\"\\n\");\n        node.setAttribute(DATA_FA_I2SVG, \"\");\n        node.innerHTML = newInnerHTML;\n    }\n};\nfunction performOperationSync(op) {\n    op();\n}\nfunction perform(mutations, callback) {\n    var callbackFunction = typeof callback === \"function\" ? callback : noop$2;\n    if (mutations.length === 0) {\n        callbackFunction();\n    } else {\n        var frame = performOperationSync;\n        if (config.mutateApproach === MUTATION_APPROACH_ASYNC) {\n            frame = WINDOW.requestAnimationFrame || performOperationSync;\n        }\n        frame(function() {\n            var mutator = getMutator();\n            var mark = perf.begin(\"mutate\");\n            mutations.map(mutator);\n            mark();\n            callbackFunction();\n        });\n    }\n}\nvar disabled = false;\nfunction disableObservation() {\n    disabled = true;\n}\nfunction enableObservation() {\n    disabled = false;\n}\nvar mo = null;\nfunction observe(options) {\n    if (!MUTATION_OBSERVER) {\n        return;\n    }\n    if (!config.observeMutations) {\n        return;\n    }\n    var _options$treeCallback = options.treeCallback, treeCallback = _options$treeCallback === void 0 ? noop$2 : _options$treeCallback, _options$nodeCallback = options.nodeCallback, nodeCallback = _options$nodeCallback === void 0 ? noop$2 : _options$nodeCallback, _options$pseudoElemen = options.pseudoElementsCallback, pseudoElementsCallback = _options$pseudoElemen === void 0 ? noop$2 : _options$pseudoElemen, _options$observeMutat = options.observeMutationsRoot, observeMutationsRoot = _options$observeMutat === void 0 ? DOCUMENT : _options$observeMutat;\n    mo = new MUTATION_OBSERVER(function(objects) {\n        if (disabled) return;\n        var defaultPrefix = getDefaultUsablePrefix();\n        toArray(objects).forEach(function(mutationRecord) {\n            if (mutationRecord.type === \"childList\" && mutationRecord.addedNodes.length > 0 && !isWatched(mutationRecord.addedNodes[0])) {\n                if (config.searchPseudoElements) {\n                    pseudoElementsCallback(mutationRecord.target);\n                }\n                treeCallback(mutationRecord.target);\n            }\n            if (mutationRecord.type === \"attributes\" && mutationRecord.target.parentNode && config.searchPseudoElements) {\n                pseudoElementsCallback(mutationRecord.target.parentNode);\n            }\n            if (mutationRecord.type === \"attributes\" && isWatched(mutationRecord.target) && ~ATTRIBUTES_WATCHED_FOR_MUTATION.indexOf(mutationRecord.attributeName)) {\n                if (mutationRecord.attributeName === \"class\" && hasPrefixAndIcon(mutationRecord.target)) {\n                    var _getCanonicalIcon = getCanonicalIcon(classArray(mutationRecord.target)), prefix = _getCanonicalIcon.prefix, iconName = _getCanonicalIcon.iconName;\n                    mutationRecord.target.setAttribute(DATA_PREFIX, prefix || defaultPrefix);\n                    if (iconName) mutationRecord.target.setAttribute(DATA_ICON, iconName);\n                } else if (hasBeenReplaced(mutationRecord.target)) {\n                    nodeCallback(mutationRecord.target);\n                }\n            }\n        });\n    });\n    if (!IS_DOM) return;\n    mo.observe(observeMutationsRoot, {\n        childList: true,\n        attributes: true,\n        characterData: true,\n        subtree: true\n    });\n}\nfunction disconnect() {\n    if (!mo) return;\n    mo.disconnect();\n}\nfunction styleParser(node) {\n    var style = node.getAttribute(\"style\");\n    var val = [];\n    if (style) {\n        val = style.split(\";\").reduce(function(acc, style) {\n            var styles = style.split(\":\");\n            var prop = styles[0];\n            var value = styles.slice(1);\n            if (prop && value.length > 0) {\n                acc[prop] = value.join(\":\").trim();\n            }\n            return acc;\n        }, {});\n    }\n    return val;\n}\nfunction classParser(node) {\n    var existingPrefix = node.getAttribute(\"data-prefix\");\n    var existingIconName = node.getAttribute(\"data-icon\");\n    var innerText = node.innerText !== undefined ? node.innerText.trim() : \"\";\n    var val = getCanonicalIcon(classArray(node));\n    if (!val.prefix) {\n        val.prefix = getDefaultUsablePrefix();\n    }\n    if (existingPrefix && existingIconName) {\n        val.prefix = existingPrefix;\n        val.iconName = existingIconName;\n    }\n    if (val.iconName && val.prefix) {\n        return val;\n    }\n    if (val.prefix && innerText.length > 0) {\n        val.iconName = byLigature(val.prefix, node.innerText) || byUnicode(val.prefix, toHex(node.innerText));\n    }\n    if (!val.iconName && config.autoFetchSvg && node.firstChild && node.firstChild.nodeType === Node.TEXT_NODE) {\n        val.iconName = node.firstChild.data;\n    }\n    return val;\n}\nfunction attributesParser(node) {\n    var extraAttributes = toArray(node.attributes).reduce(function(acc, attr) {\n        if (acc.name !== \"class\" && acc.name !== \"style\") {\n            acc[attr.name] = attr.value;\n        }\n        return acc;\n    }, {});\n    var title = node.getAttribute(\"title\");\n    var titleId = node.getAttribute(\"data-fa-title-id\");\n    if (config.autoA11y) {\n        if (title) {\n            extraAttributes[\"aria-labelledby\"] = \"\".concat(config.replacementClass, \"-title-\").concat(titleId || nextUniqueId());\n        } else {\n            extraAttributes[\"aria-hidden\"] = \"true\";\n            extraAttributes[\"focusable\"] = \"false\";\n        }\n    }\n    return extraAttributes;\n}\nfunction blankMeta() {\n    return {\n        iconName: null,\n        title: null,\n        titleId: null,\n        prefix: null,\n        transform: meaninglessTransform,\n        symbol: false,\n        mask: {\n            iconName: null,\n            prefix: null,\n            rest: []\n        },\n        maskId: null,\n        extra: {\n            classes: [],\n            styles: {},\n            attributes: {}\n        }\n    };\n}\nfunction parseMeta(node) {\n    var parser = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        styleParser: true\n    };\n    var _classParser = classParser(node), iconName = _classParser.iconName, prefix = _classParser.prefix, extraClasses = _classParser.rest;\n    var extraAttributes = attributesParser(node);\n    var pluginMeta = chainHooks(\"parseNodeAttributes\", {}, node);\n    var extraStyles = parser.styleParser ? styleParser(node) : [];\n    return _objectSpread2({\n        iconName: iconName,\n        title: node.getAttribute(\"title\"),\n        titleId: node.getAttribute(\"data-fa-title-id\"),\n        prefix: prefix,\n        transform: meaninglessTransform,\n        mask: {\n            iconName: null,\n            prefix: null,\n            rest: []\n        },\n        maskId: null,\n        symbol: false,\n        extra: {\n            classes: extraClasses,\n            styles: extraStyles,\n            attributes: extraAttributes\n        }\n    }, pluginMeta);\n}\nvar styles$2 = namespace.styles;\nfunction generateMutation(node) {\n    var nodeMeta = config.autoReplaceSvg === \"nest\" ? parseMeta(node, {\n        styleParser: false\n    }) : parseMeta(node);\n    if (~nodeMeta.extra.classes.indexOf(LAYERS_TEXT_CLASSNAME)) {\n        return callProvided(\"generateLayersText\", node, nodeMeta);\n    } else {\n        return callProvided(\"generateSvgReplacementMutation\", node, nodeMeta);\n    }\n}\nvar knownPrefixes = new Set();\nFAMILIES.map(function(family) {\n    knownPrefixes.add(\"fa-\".concat(family));\n});\nObject.keys(PREFIX_TO_STYLE[FAMILY_CLASSIC]).map(knownPrefixes.add.bind(knownPrefixes));\nObject.keys(PREFIX_TO_STYLE[FAMILY_SHARP]).map(knownPrefixes.add.bind(knownPrefixes));\nknownPrefixes = _toConsumableArray(knownPrefixes);\nfunction onTree(root) {\n    var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    if (!IS_DOM) return Promise.resolve();\n    var htmlClassList = DOCUMENT.documentElement.classList;\n    var hclAdd = function hclAdd(suffix) {\n        return htmlClassList.add(\"\".concat(HTML_CLASS_I2SVG_BASE_CLASS, \"-\").concat(suffix));\n    };\n    var hclRemove = function hclRemove(suffix) {\n        return htmlClassList.remove(\"\".concat(HTML_CLASS_I2SVG_BASE_CLASS, \"-\").concat(suffix));\n    };\n    var prefixes = config.autoFetchSvg ? knownPrefixes : FAMILIES.map(function(f) {\n        return \"fa-\".concat(f);\n    }).concat(Object.keys(styles$2));\n    if (!prefixes.includes(\"fa\")) {\n        prefixes.push(\"fa\");\n    }\n    var prefixesDomQuery = [\n        \".\".concat(LAYERS_TEXT_CLASSNAME, \":not([\").concat(DATA_FA_I2SVG, \"])\")\n    ].concat(prefixes.map(function(p) {\n        return \".\".concat(p, \":not([\").concat(DATA_FA_I2SVG, \"])\");\n    })).join(\", \");\n    if (prefixesDomQuery.length === 0) {\n        return Promise.resolve();\n    }\n    var candidates = [];\n    try {\n        candidates = toArray(root.querySelectorAll(prefixesDomQuery));\n    } catch (e) {}\n    if (candidates.length > 0) {\n        hclAdd(\"pending\");\n        hclRemove(\"complete\");\n    } else {\n        return Promise.resolve();\n    }\n    var mark = perf.begin(\"onTree\");\n    var mutations = candidates.reduce(function(acc, node) {\n        try {\n            var mutation = generateMutation(node);\n            if (mutation) {\n                acc.push(mutation);\n            }\n        } catch (e) {\n            if (!PRODUCTION) {\n                if (e.name === \"MissingIcon\") {\n                    console.error(e);\n                }\n            }\n        }\n        return acc;\n    }, []);\n    return new Promise(function(resolve, reject) {\n        Promise.all(mutations).then(function(resolvedMutations) {\n            perform(resolvedMutations, function() {\n                hclAdd(\"active\");\n                hclAdd(\"complete\");\n                hclRemove(\"pending\");\n                if (typeof callback === \"function\") callback();\n                mark();\n                resolve();\n            });\n        }).catch(function(e) {\n            mark();\n            reject(e);\n        });\n    });\n}\nfunction onNode(node) {\n    var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    generateMutation(node).then(function(mutation) {\n        if (mutation) {\n            perform([\n                mutation\n            ], callback);\n        }\n    });\n}\nfunction resolveIcons(next) {\n    return function(maybeIconDefinition) {\n        var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var iconDefinition = (maybeIconDefinition || {}).icon ? maybeIconDefinition : findIconDefinition(maybeIconDefinition || {});\n        var mask = params.mask;\n        if (mask) {\n            mask = (mask || {}).icon ? mask : findIconDefinition(mask || {});\n        }\n        return next(iconDefinition, _objectSpread2(_objectSpread2({}, params), {}, {\n            mask: mask\n        }));\n    };\n}\nvar render = function render(iconDefinition) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _params$transform = params.transform, transform = _params$transform === void 0 ? meaninglessTransform : _params$transform, _params$symbol = params.symbol, symbol = _params$symbol === void 0 ? false : _params$symbol, _params$mask = params.mask, mask = _params$mask === void 0 ? null : _params$mask, _params$maskId = params.maskId, maskId = _params$maskId === void 0 ? null : _params$maskId, _params$title = params.title, title = _params$title === void 0 ? null : _params$title, _params$titleId = params.titleId, titleId = _params$titleId === void 0 ? null : _params$titleId, _params$classes = params.classes, classes = _params$classes === void 0 ? [] : _params$classes, _params$attributes = params.attributes, attributes = _params$attributes === void 0 ? {} : _params$attributes, _params$styles = params.styles, styles = _params$styles === void 0 ? {} : _params$styles;\n    if (!iconDefinition) return;\n    var prefix = iconDefinition.prefix, iconName = iconDefinition.iconName, icon = iconDefinition.icon;\n    return domVariants(_objectSpread2({\n        type: \"icon\"\n    }, iconDefinition), function() {\n        callHooks(\"beforeDOMElementCreation\", {\n            iconDefinition: iconDefinition,\n            params: params\n        });\n        if (config.autoA11y) {\n            if (title) {\n                attributes[\"aria-labelledby\"] = \"\".concat(config.replacementClass, \"-title-\").concat(titleId || nextUniqueId());\n            } else {\n                attributes[\"aria-hidden\"] = \"true\";\n                attributes[\"focusable\"] = \"false\";\n            }\n        }\n        return makeInlineSvgAbstract({\n            icons: {\n                main: asFoundIcon(icon),\n                mask: mask ? asFoundIcon(mask.icon) : {\n                    found: false,\n                    width: null,\n                    height: null,\n                    icon: {}\n                }\n            },\n            prefix: prefix,\n            iconName: iconName,\n            transform: _objectSpread2(_objectSpread2({}, meaninglessTransform), transform),\n            symbol: symbol,\n            title: title,\n            maskId: maskId,\n            titleId: titleId,\n            extra: {\n                attributes: attributes,\n                styles: styles,\n                classes: classes\n            }\n        });\n    });\n};\nvar ReplaceElements = {\n    mixout: function mixout() {\n        return {\n            icon: resolveIcons(render)\n        };\n    },\n    hooks: function hooks() {\n        return {\n            mutationObserverCallbacks: function mutationObserverCallbacks(accumulator) {\n                accumulator.treeCallback = onTree;\n                accumulator.nodeCallback = onNode;\n                return accumulator;\n            }\n        };\n    },\n    provides: function provides(providers$$1) {\n        providers$$1.i2svg = function(params) {\n            var _params$node = params.node, node = _params$node === void 0 ? DOCUMENT : _params$node, _params$callback = params.callback, callback = _params$callback === void 0 ? function() {} : _params$callback;\n            return onTree(node, callback);\n        };\n        providers$$1.generateSvgReplacementMutation = function(node, nodeMeta) {\n            var iconName = nodeMeta.iconName, title = nodeMeta.title, titleId = nodeMeta.titleId, prefix = nodeMeta.prefix, transform = nodeMeta.transform, symbol = nodeMeta.symbol, mask = nodeMeta.mask, maskId = nodeMeta.maskId, extra = nodeMeta.extra;\n            return new Promise(function(resolve, reject) {\n                Promise.all([\n                    findIcon(iconName, prefix),\n                    mask.iconName ? findIcon(mask.iconName, mask.prefix) : Promise.resolve({\n                        found: false,\n                        width: 512,\n                        height: 512,\n                        icon: {}\n                    })\n                ]).then(function(_ref) {\n                    var _ref2 = _slicedToArray(_ref, 2), main = _ref2[0], mask = _ref2[1];\n                    resolve([\n                        node,\n                        makeInlineSvgAbstract({\n                            icons: {\n                                main: main,\n                                mask: mask\n                            },\n                            prefix: prefix,\n                            iconName: iconName,\n                            transform: transform,\n                            symbol: symbol,\n                            maskId: maskId,\n                            title: title,\n                            titleId: titleId,\n                            extra: extra,\n                            watchable: true\n                        })\n                    ]);\n                }).catch(reject);\n            });\n        };\n        providers$$1.generateAbstractIcon = function(_ref3) {\n            var children = _ref3.children, attributes = _ref3.attributes, main = _ref3.main, transform = _ref3.transform, styles = _ref3.styles;\n            var styleString = joinStyles(styles);\n            if (styleString.length > 0) {\n                attributes[\"style\"] = styleString;\n            }\n            var nextChild;\n            if (transformIsMeaningful(transform)) {\n                nextChild = callProvided(\"generateAbstractTransformGrouping\", {\n                    main: main,\n                    transform: transform,\n                    containerWidth: main.width,\n                    iconWidth: main.width\n                });\n            }\n            children.push(nextChild || main.icon);\n            return {\n                children: children,\n                attributes: attributes\n            };\n        };\n    }\n};\nvar Layers = {\n    mixout: function mixout() {\n        return {\n            layer: function layer(assembler) {\n                var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                var _params$classes = params.classes, classes = _params$classes === void 0 ? [] : _params$classes;\n                return domVariants({\n                    type: \"layer\"\n                }, function() {\n                    callHooks(\"beforeDOMElementCreation\", {\n                        assembler: assembler,\n                        params: params\n                    });\n                    var children = [];\n                    assembler(function(args) {\n                        Array.isArray(args) ? args.map(function(a) {\n                            children = children.concat(a.abstract);\n                        }) : children = children.concat(args.abstract);\n                    });\n                    return [\n                        {\n                            tag: \"span\",\n                            attributes: {\n                                class: [\n                                    \"\".concat(config.cssPrefix, \"-layers\")\n                                ].concat(_toConsumableArray(classes)).join(\" \")\n                            },\n                            children: children\n                        }\n                    ];\n                });\n            }\n        };\n    }\n};\nvar LayersCounter = {\n    mixout: function mixout() {\n        return {\n            counter: function counter(content) {\n                var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                var _params$title = params.title, title = _params$title === void 0 ? null : _params$title, _params$classes = params.classes, classes = _params$classes === void 0 ? [] : _params$classes, _params$attributes = params.attributes, attributes = _params$attributes === void 0 ? {} : _params$attributes, _params$styles = params.styles, styles = _params$styles === void 0 ? {} : _params$styles;\n                return domVariants({\n                    type: \"counter\",\n                    content: content\n                }, function() {\n                    callHooks(\"beforeDOMElementCreation\", {\n                        content: content,\n                        params: params\n                    });\n                    return makeLayersCounterAbstract({\n                        content: content.toString(),\n                        title: title,\n                        extra: {\n                            attributes: attributes,\n                            styles: styles,\n                            classes: [\n                                \"\".concat(config.cssPrefix, \"-layers-counter\")\n                            ].concat(_toConsumableArray(classes))\n                        }\n                    });\n                });\n            }\n        };\n    }\n};\nvar LayersText = {\n    mixout: function mixout() {\n        return {\n            text: function text(content) {\n                var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                var _params$transform = params.transform, transform = _params$transform === void 0 ? meaninglessTransform : _params$transform, _params$title = params.title, title = _params$title === void 0 ? null : _params$title, _params$classes = params.classes, classes = _params$classes === void 0 ? [] : _params$classes, _params$attributes = params.attributes, attributes = _params$attributes === void 0 ? {} : _params$attributes, _params$styles = params.styles, styles = _params$styles === void 0 ? {} : _params$styles;\n                return domVariants({\n                    type: \"text\",\n                    content: content\n                }, function() {\n                    callHooks(\"beforeDOMElementCreation\", {\n                        content: content,\n                        params: params\n                    });\n                    return makeLayersTextAbstract({\n                        content: content,\n                        transform: _objectSpread2(_objectSpread2({}, meaninglessTransform), transform),\n                        title: title,\n                        extra: {\n                            attributes: attributes,\n                            styles: styles,\n                            classes: [\n                                \"\".concat(config.cssPrefix, \"-layers-text\")\n                            ].concat(_toConsumableArray(classes))\n                        }\n                    });\n                });\n            }\n        };\n    },\n    provides: function provides(providers$$1) {\n        providers$$1.generateLayersText = function(node, nodeMeta) {\n            var title = nodeMeta.title, transform = nodeMeta.transform, extra = nodeMeta.extra;\n            var width = null;\n            var height = null;\n            if (IS_IE) {\n                var computedFontSize = parseInt(getComputedStyle(node).fontSize, 10);\n                var boundingClientRect = node.getBoundingClientRect();\n                width = boundingClientRect.width / computedFontSize;\n                height = boundingClientRect.height / computedFontSize;\n            }\n            if (config.autoA11y && !title) {\n                extra.attributes[\"aria-hidden\"] = \"true\";\n            }\n            return Promise.resolve([\n                node,\n                makeLayersTextAbstract({\n                    content: node.innerHTML,\n                    width: width,\n                    height: height,\n                    transform: transform,\n                    title: title,\n                    extra: extra,\n                    watchable: true\n                })\n            ]);\n        };\n    }\n};\nvar CLEAN_CONTENT_PATTERN = new RegExp('\"', \"ug\");\nvar SECONDARY_UNICODE_RANGE = [\n    1105920,\n    1112319\n];\nfunction hexValueFromContent(content) {\n    var cleaned = content.replace(CLEAN_CONTENT_PATTERN, \"\");\n    var codePoint = codePointAt(cleaned, 0);\n    var isPrependTen = codePoint >= SECONDARY_UNICODE_RANGE[0] && codePoint <= SECONDARY_UNICODE_RANGE[1];\n    var isDoubled = cleaned.length === 2 ? cleaned[0] === cleaned[1] : false;\n    return {\n        value: isDoubled ? toHex(cleaned[0]) : toHex(cleaned),\n        isSecondary: isPrependTen || isDoubled\n    };\n}\nfunction replaceForPosition(node, position) {\n    var pendingAttribute = \"\".concat(DATA_FA_PSEUDO_ELEMENT_PENDING).concat(position.replace(\":\", \"-\"));\n    return new Promise(function(resolve, reject) {\n        if (node.getAttribute(pendingAttribute) !== null) {\n            // This node is already being processed\n            return resolve();\n        }\n        var children = toArray(node.children);\n        var alreadyProcessedPseudoElement = children.filter(function(c) {\n            return c.getAttribute(DATA_FA_PSEUDO_ELEMENT) === position;\n        })[0];\n        var styles = WINDOW.getComputedStyle(node, position);\n        var fontFamily = styles.getPropertyValue(\"font-family\").match(FONT_FAMILY_PATTERN);\n        var fontWeight = styles.getPropertyValue(\"font-weight\");\n        var content = styles.getPropertyValue(\"content\");\n        if (alreadyProcessedPseudoElement && !fontFamily) {\n            // If we've already processed it but the current computed style does not result in a font-family,\n            // that probably means that a class name that was previously present to make the icon has been\n            // removed. So we now should delete the icon.\n            node.removeChild(alreadyProcessedPseudoElement);\n            return resolve();\n        } else if (fontFamily && content !== \"none\" && content !== \"\") {\n            var _content = styles.getPropertyValue(\"content\");\n            var family = ~[\n                \"Sharp\"\n            ].indexOf(fontFamily[2]) ? FAMILY_SHARP : FAMILY_CLASSIC;\n            var prefix = ~[\n                \"Solid\",\n                \"Regular\",\n                \"Light\",\n                \"Thin\",\n                \"Duotone\",\n                \"Brands\",\n                \"Kit\"\n            ].indexOf(fontFamily[2]) ? STYLE_TO_PREFIX[family][fontFamily[2].toLowerCase()] : FONT_WEIGHT_TO_PREFIX[family][fontWeight];\n            var _hexValueFromContent = hexValueFromContent(_content), hexValue = _hexValueFromContent.value, isSecondary = _hexValueFromContent.isSecondary;\n            var isV4 = fontFamily[0].startsWith(\"FontAwesome\");\n            var iconName = byUnicode(prefix, hexValue);\n            var iconIdentifier = iconName;\n            if (isV4) {\n                var iconName4 = byOldUnicode(hexValue);\n                if (iconName4.iconName && iconName4.prefix) {\n                    iconName = iconName4.iconName;\n                    prefix = iconName4.prefix;\n                }\n            } // Only convert the pseudo element in this ::before/::after position into an icon if we haven't\n            // already done so with the same prefix and iconName\n            if (iconName && !isSecondary && (!alreadyProcessedPseudoElement || alreadyProcessedPseudoElement.getAttribute(DATA_PREFIX) !== prefix || alreadyProcessedPseudoElement.getAttribute(DATA_ICON) !== iconIdentifier)) {\n                node.setAttribute(pendingAttribute, iconIdentifier);\n                if (alreadyProcessedPseudoElement) {\n                    // Delete the old one, since we're replacing it with a new one\n                    node.removeChild(alreadyProcessedPseudoElement);\n                }\n                var meta = blankMeta();\n                var extra = meta.extra;\n                extra.attributes[DATA_FA_PSEUDO_ELEMENT] = position;\n                findIcon(iconName, prefix).then(function(main) {\n                    var _abstract = makeInlineSvgAbstract(_objectSpread2(_objectSpread2({}, meta), {}, {\n                        icons: {\n                            main: main,\n                            mask: emptyCanonicalIcon()\n                        },\n                        prefix: prefix,\n                        iconName: iconIdentifier,\n                        extra: extra,\n                        watchable: true\n                    }));\n                    var element = DOCUMENT.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n                    if (position === \"::before\") {\n                        node.insertBefore(element, node.firstChild);\n                    } else {\n                        node.appendChild(element);\n                    }\n                    element.outerHTML = _abstract.map(function(a) {\n                        return toHtml(a);\n                    }).join(\"\\n\");\n                    node.removeAttribute(pendingAttribute);\n                    resolve();\n                }).catch(reject);\n            } else {\n                resolve();\n            }\n        } else {\n            resolve();\n        }\n    });\n}\nfunction replace(node) {\n    return Promise.all([\n        replaceForPosition(node, \"::before\"),\n        replaceForPosition(node, \"::after\")\n    ]);\n}\nfunction processable(node) {\n    return node.parentNode !== document.head && !~TAGNAMES_TO_SKIP_FOR_PSEUDOELEMENTS.indexOf(node.tagName.toUpperCase()) && !node.getAttribute(DATA_FA_PSEUDO_ELEMENT) && (!node.parentNode || node.parentNode.tagName !== \"svg\");\n}\nfunction searchPseudoElements(root) {\n    if (!IS_DOM) return;\n    return new Promise(function(resolve, reject) {\n        var operations = toArray(root.querySelectorAll(\"*\")).filter(processable).map(replace);\n        var end = perf.begin(\"searchPseudoElements\");\n        disableObservation();\n        Promise.all(operations).then(function() {\n            end();\n            enableObservation();\n            resolve();\n        }).catch(function() {\n            end();\n            enableObservation();\n            reject();\n        });\n    });\n}\nvar PseudoElements = {\n    hooks: function hooks() {\n        return {\n            mutationObserverCallbacks: function mutationObserverCallbacks(accumulator) {\n                accumulator.pseudoElementsCallback = searchPseudoElements;\n                return accumulator;\n            }\n        };\n    },\n    provides: function provides(providers$$1) {\n        providers$$1.pseudoElements2svg = function(params) {\n            var _params$node = params.node, node = _params$node === void 0 ? DOCUMENT : _params$node;\n            if (config.searchPseudoElements) {\n                searchPseudoElements(node);\n            }\n        };\n    }\n};\nvar _unwatched = false;\nvar MutationObserver$1 = {\n    mixout: function mixout() {\n        return {\n            dom: {\n                unwatch: function unwatch() {\n                    disableObservation();\n                    _unwatched = true;\n                }\n            }\n        };\n    },\n    hooks: function hooks() {\n        return {\n            bootstrap: function bootstrap() {\n                observe(chainHooks(\"mutationObserverCallbacks\", {}));\n            },\n            noAuto: function noAuto() {\n                disconnect();\n            },\n            watch: function watch(params) {\n                var observeMutationsRoot = params.observeMutationsRoot;\n                if (_unwatched) {\n                    enableObservation();\n                } else {\n                    observe(chainHooks(\"mutationObserverCallbacks\", {\n                        observeMutationsRoot: observeMutationsRoot\n                    }));\n                }\n            }\n        };\n    }\n};\nvar parseTransformString = function parseTransformString(transformString) {\n    var transform = {\n        size: 16,\n        x: 0,\n        y: 0,\n        flipX: false,\n        flipY: false,\n        rotate: 0\n    };\n    return transformString.toLowerCase().split(\" \").reduce(function(acc, n) {\n        var parts = n.toLowerCase().split(\"-\");\n        var first = parts[0];\n        var rest = parts.slice(1).join(\"-\");\n        if (first && rest === \"h\") {\n            acc.flipX = true;\n            return acc;\n        }\n        if (first && rest === \"v\") {\n            acc.flipY = true;\n            return acc;\n        }\n        rest = parseFloat(rest);\n        if (isNaN(rest)) {\n            return acc;\n        }\n        switch(first){\n            case \"grow\":\n                acc.size = acc.size + rest;\n                break;\n            case \"shrink\":\n                acc.size = acc.size - rest;\n                break;\n            case \"left\":\n                acc.x = acc.x - rest;\n                break;\n            case \"right\":\n                acc.x = acc.x + rest;\n                break;\n            case \"up\":\n                acc.y = acc.y - rest;\n                break;\n            case \"down\":\n                acc.y = acc.y + rest;\n                break;\n            case \"rotate\":\n                acc.rotate = acc.rotate + rest;\n                break;\n        }\n        return acc;\n    }, transform);\n};\nvar PowerTransforms = {\n    mixout: function mixout() {\n        return {\n            parse: {\n                transform: function transform(transformString) {\n                    return parseTransformString(transformString);\n                }\n            }\n        };\n    },\n    hooks: function hooks() {\n        return {\n            parseNodeAttributes: function parseNodeAttributes(accumulator, node) {\n                var transformString = node.getAttribute(\"data-fa-transform\");\n                if (transformString) {\n                    accumulator.transform = parseTransformString(transformString);\n                }\n                return accumulator;\n            }\n        };\n    },\n    provides: function provides(providers) {\n        providers.generateAbstractTransformGrouping = function(_ref) {\n            var main = _ref.main, transform = _ref.transform, containerWidth = _ref.containerWidth, iconWidth = _ref.iconWidth;\n            var outer = {\n                transform: \"translate(\".concat(containerWidth / 2, \" 256)\")\n            };\n            var innerTranslate = \"translate(\".concat(transform.x * 32, \", \").concat(transform.y * 32, \") \");\n            var innerScale = \"scale(\".concat(transform.size / 16 * (transform.flipX ? -1 : 1), \", \").concat(transform.size / 16 * (transform.flipY ? -1 : 1), \") \");\n            var innerRotate = \"rotate(\".concat(transform.rotate, \" 0 0)\");\n            var inner = {\n                transform: \"\".concat(innerTranslate, \" \").concat(innerScale, \" \").concat(innerRotate)\n            };\n            var path = {\n                transform: \"translate(\".concat(iconWidth / 2 * -1, \" -256)\")\n            };\n            var operations = {\n                outer: outer,\n                inner: inner,\n                path: path\n            };\n            return {\n                tag: \"g\",\n                attributes: _objectSpread2({}, operations.outer),\n                children: [\n                    {\n                        tag: \"g\",\n                        attributes: _objectSpread2({}, operations.inner),\n                        children: [\n                            {\n                                tag: main.icon.tag,\n                                children: main.icon.children,\n                                attributes: _objectSpread2(_objectSpread2({}, main.icon.attributes), operations.path)\n                            }\n                        ]\n                    }\n                ]\n            };\n        };\n    }\n};\nvar ALL_SPACE = {\n    x: 0,\n    y: 0,\n    width: \"100%\",\n    height: \"100%\"\n};\nfunction fillBlack(_abstract) {\n    var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (_abstract.attributes && (_abstract.attributes.fill || force)) {\n        _abstract.attributes.fill = \"black\";\n    }\n    return _abstract;\n}\nfunction deGroup(_abstract2) {\n    if (_abstract2.tag === \"g\") {\n        return _abstract2.children;\n    } else {\n        return [\n            _abstract2\n        ];\n    }\n}\nvar Masks = {\n    hooks: function hooks() {\n        return {\n            parseNodeAttributes: function parseNodeAttributes(accumulator, node) {\n                var maskData = node.getAttribute(\"data-fa-mask\");\n                var mask = !maskData ? emptyCanonicalIcon() : getCanonicalIcon(maskData.split(\" \").map(function(i) {\n                    return i.trim();\n                }));\n                if (!mask.prefix) {\n                    mask.prefix = getDefaultUsablePrefix();\n                }\n                accumulator.mask = mask;\n                accumulator.maskId = node.getAttribute(\"data-fa-mask-id\");\n                return accumulator;\n            }\n        };\n    },\n    provides: function provides(providers) {\n        providers.generateAbstractMask = function(_ref) {\n            var children = _ref.children, attributes = _ref.attributes, main = _ref.main, mask = _ref.mask, explicitMaskId = _ref.maskId, transform = _ref.transform;\n            var mainWidth = main.width, mainPath = main.icon;\n            var maskWidth = mask.width, maskPath = mask.icon;\n            var trans = transformForSvg({\n                transform: transform,\n                containerWidth: maskWidth,\n                iconWidth: mainWidth\n            });\n            var maskRect = {\n                tag: \"rect\",\n                attributes: _objectSpread2(_objectSpread2({}, ALL_SPACE), {}, {\n                    fill: \"white\"\n                })\n            };\n            var maskInnerGroupChildrenMixin = mainPath.children ? {\n                children: mainPath.children.map(fillBlack)\n            } : {};\n            var maskInnerGroup = {\n                tag: \"g\",\n                attributes: _objectSpread2({}, trans.inner),\n                children: [\n                    fillBlack(_objectSpread2({\n                        tag: mainPath.tag,\n                        attributes: _objectSpread2(_objectSpread2({}, mainPath.attributes), trans.path)\n                    }, maskInnerGroupChildrenMixin))\n                ]\n            };\n            var maskOuterGroup = {\n                tag: \"g\",\n                attributes: _objectSpread2({}, trans.outer),\n                children: [\n                    maskInnerGroup\n                ]\n            };\n            var maskId = \"mask-\".concat(explicitMaskId || nextUniqueId());\n            var clipId = \"clip-\".concat(explicitMaskId || nextUniqueId());\n            var maskTag = {\n                tag: \"mask\",\n                attributes: _objectSpread2(_objectSpread2({}, ALL_SPACE), {}, {\n                    id: maskId,\n                    maskUnits: \"userSpaceOnUse\",\n                    maskContentUnits: \"userSpaceOnUse\"\n                }),\n                children: [\n                    maskRect,\n                    maskOuterGroup\n                ]\n            };\n            var defs = {\n                tag: \"defs\",\n                children: [\n                    {\n                        tag: \"clipPath\",\n                        attributes: {\n                            id: clipId\n                        },\n                        children: deGroup(maskPath)\n                    },\n                    maskTag\n                ]\n            };\n            children.push(defs, {\n                tag: \"rect\",\n                attributes: _objectSpread2({\n                    fill: \"currentColor\",\n                    \"clip-path\": \"url(#\".concat(clipId, \")\"),\n                    mask: \"url(#\".concat(maskId, \")\")\n                }, ALL_SPACE)\n            });\n            return {\n                children: children,\n                attributes: attributes\n            };\n        };\n    }\n};\nvar MissingIconIndicator = {\n    provides: function provides(providers) {\n        var reduceMotion = false;\n        if (WINDOW.matchMedia) {\n            reduceMotion = WINDOW.matchMedia(\"(prefers-reduced-motion: reduce)\").matches;\n        }\n        providers.missingIconAbstract = function() {\n            var gChildren = [];\n            var FILL = {\n                fill: \"currentColor\"\n            };\n            var ANIMATION_BASE = {\n                attributeType: \"XML\",\n                repeatCount: \"indefinite\",\n                dur: \"2s\"\n            }; // Ring\n            gChildren.push({\n                tag: \"path\",\n                attributes: _objectSpread2(_objectSpread2({}, FILL), {}, {\n                    d: \"M156.5,447.7l-12.6,29.5c-18.7-9.5-35.9-21.2-51.5-34.9l22.7-22.7C127.6,430.5,141.5,440,156.5,447.7z M40.6,272H8.5 c1.4,21.2,5.4,41.7,11.7,61.1L50,321.2C45.1,305.5,41.8,289,40.6,272z M40.6,240c1.4-18.8,5.2-37,11.1-54.1l-29.5-12.6 C14.7,194.3,10,216.7,8.5,240H40.6z M64.3,156.5c7.8-14.9,17.2-28.8,28.1-41.5L69.7,92.3c-13.7,15.6-25.5,32.8-34.9,51.5 L64.3,156.5z M397,419.6c-13.9,12-29.4,22.3-46.1,30.4l11.9,29.8c20.7-9.9,39.8-22.6,56.9-37.6L397,419.6z M115,92.4 c13.9-12,29.4-22.3,46.1-30.4l-11.9-29.8c-20.7,9.9-39.8,22.6-56.8,37.6L115,92.4z M447.7,355.5c-7.8,14.9-17.2,28.8-28.1,41.5 l22.7,22.7c13.7-15.6,25.5-32.9,34.9-51.5L447.7,355.5z M471.4,272c-1.4,18.8-5.2,37-11.1,54.1l29.5,12.6 c7.5-21.1,12.2-43.5,13.6-66.8H471.4z M321.2,462c-15.7,5-32.2,8.2-49.2,9.4v32.1c21.2-1.4,41.7-5.4,61.1-11.7L321.2,462z M240,471.4c-18.8-1.4-37-5.2-54.1-11.1l-12.6,29.5c21.1,7.5,43.5,12.2,66.8,13.6V471.4z M462,190.8c5,15.7,8.2,32.2,9.4,49.2h32.1 c-1.4-21.2-5.4-41.7-11.7-61.1L462,190.8z M92.4,397c-12-13.9-22.3-29.4-30.4-46.1l-29.8,11.9c9.9,20.7,22.6,39.8,37.6,56.9 L92.4,397z M272,40.6c18.8,1.4,36.9,5.2,54.1,11.1l12.6-29.5C317.7,14.7,295.3,10,272,8.5V40.6z M190.8,50 c15.7-5,32.2-8.2,49.2-9.4V8.5c-21.2,1.4-41.7,5.4-61.1,11.7L190.8,50z M442.3,92.3L419.6,115c12,13.9,22.3,29.4,30.5,46.1 l29.8-11.9C470,128.5,457.3,109.4,442.3,92.3z M397,92.4l22.7-22.7c-15.6-13.7-32.8-25.5-51.5-34.9l-12.6,29.5 C370.4,72.1,384.4,81.5,397,92.4z\"\n                })\n            });\n            var OPACITY_ANIMATE = _objectSpread2(_objectSpread2({}, ANIMATION_BASE), {}, {\n                attributeName: \"opacity\"\n            });\n            var dot = {\n                tag: \"circle\",\n                attributes: _objectSpread2(_objectSpread2({}, FILL), {}, {\n                    cx: \"256\",\n                    cy: \"364\",\n                    r: \"28\"\n                }),\n                children: []\n            };\n            if (!reduceMotion) {\n                dot.children.push({\n                    tag: \"animate\",\n                    attributes: _objectSpread2(_objectSpread2({}, ANIMATION_BASE), {}, {\n                        attributeName: \"r\",\n                        values: \"28;14;28;28;14;28;\"\n                    })\n                }, {\n                    tag: \"animate\",\n                    attributes: _objectSpread2(_objectSpread2({}, OPACITY_ANIMATE), {}, {\n                        values: \"1;0;1;1;0;1;\"\n                    })\n                });\n            }\n            gChildren.push(dot);\n            gChildren.push({\n                tag: \"path\",\n                attributes: _objectSpread2(_objectSpread2({}, FILL), {}, {\n                    opacity: \"1\",\n                    d: \"M263.7,312h-16c-6.6,0-12-5.4-12-12c0-71,77.4-63.9,77.4-107.8c0-20-17.8-40.2-57.4-40.2c-29.1,0-44.3,9.6-59.2,28.7 c-3.9,5-11.1,6-16.2,2.4l-13.1-9.2c-5.6-3.9-6.9-11.8-2.6-17.2c21.2-27.2,46.4-44.7,91.2-44.7c52.3,0,97.4,29.8,97.4,80.2 c0,67.6-77.4,63.5-77.4,107.8C275.7,306.6,270.3,312,263.7,312z\"\n                }),\n                children: reduceMotion ? [] : [\n                    {\n                        tag: \"animate\",\n                        attributes: _objectSpread2(_objectSpread2({}, OPACITY_ANIMATE), {}, {\n                            values: \"1;0;0;0;0;1;\"\n                        })\n                    }\n                ]\n            });\n            if (!reduceMotion) {\n                // Exclamation\n                gChildren.push({\n                    tag: \"path\",\n                    attributes: _objectSpread2(_objectSpread2({}, FILL), {}, {\n                        opacity: \"0\",\n                        d: \"M232.5,134.5l7,168c0.3,6.4,5.6,11.5,12,11.5h9c6.4,0,11.7-5.1,12-11.5l7-168c0.3-6.8-5.2-12.5-12-12.5h-23 C237.7,122,232.2,127.7,232.5,134.5z\"\n                    }),\n                    children: [\n                        {\n                            tag: \"animate\",\n                            attributes: _objectSpread2(_objectSpread2({}, OPACITY_ANIMATE), {}, {\n                                values: \"0;0;1;1;0;0;\"\n                            })\n                        }\n                    ]\n                });\n            }\n            return {\n                tag: \"g\",\n                attributes: {\n                    \"class\": \"missing\"\n                },\n                children: gChildren\n            };\n        };\n    }\n};\nvar SvgSymbols = {\n    hooks: function hooks() {\n        return {\n            parseNodeAttributes: function parseNodeAttributes(accumulator, node) {\n                var symbolData = node.getAttribute(\"data-fa-symbol\");\n                var symbol = symbolData === null ? false : symbolData === \"\" ? true : symbolData;\n                accumulator[\"symbol\"] = symbol;\n                return accumulator;\n            }\n        };\n    }\n};\nvar plugins = [\n    InjectCSS,\n    ReplaceElements,\n    Layers,\n    LayersCounter,\n    LayersText,\n    PseudoElements,\n    MutationObserver$1,\n    PowerTransforms,\n    Masks,\n    MissingIconIndicator,\n    SvgSymbols\n];\nregisterPlugins(plugins, {\n    mixoutsTo: api\n});\nvar noAuto$1 = api.noAuto;\nvar config$1 = api.config;\nvar library$1 = api.library;\nvar dom$1 = api.dom;\nvar parse$1 = api.parse;\nvar findIconDefinition$1 = api.findIconDefinition;\nvar toHtml$1 = api.toHtml;\nvar icon = api.icon;\nvar layer = api.layer;\nvar text = api.text;\nvar counter = api.counter;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL0Bmb3J0YXdlc29tZS9mb250YXdlc29tZS1zdmctY29yZS9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsU0FBU0EsUUFBUUMsTUFBTSxFQUFFQyxjQUFjO0lBQ3JDLElBQUlDLE9BQU9DLE9BQU9ELElBQUksQ0FBQ0Y7SUFFdkIsSUFBSUcsT0FBT0MscUJBQXFCLEVBQUU7UUFDaEMsSUFBSUMsVUFBVUYsT0FBT0MscUJBQXFCLENBQUNKO1FBQzNDQyxrQkFBbUJJLENBQUFBLFVBQVVBLFFBQVFDLE1BQU0sQ0FBQyxTQUFVQyxHQUFHO1lBQ3ZELE9BQU9KLE9BQU9LLHdCQUF3QixDQUFDUixRQUFRTyxLQUFLRSxVQUFVO1FBQ2hFLEVBQUMsR0FBSVAsS0FBS1EsSUFBSSxDQUFDQyxLQUFLLENBQUNULE1BQU1HO0lBQzdCO0lBRUEsT0FBT0g7QUFDVDtBQUVBLFNBQVNVLGVBQWVDLE1BQU07SUFDNUIsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlDLFVBQVVDLE1BQU0sRUFBRUYsSUFBSztRQUN6QyxJQUFJRyxTQUFTLFFBQVFGLFNBQVMsQ0FBQ0QsRUFBRSxHQUFHQyxTQUFTLENBQUNELEVBQUUsR0FBRyxDQUFDO1FBQ3BEQSxJQUFJLElBQUlmLFFBQVFJLE9BQU9jLFNBQVMsQ0FBQyxHQUFHQyxPQUFPLENBQUMsU0FBVUMsR0FBRztZQUN2REMsZ0JBQWdCUCxRQUFRTSxLQUFLRixNQUFNLENBQUNFLElBQUk7UUFDMUMsS0FBS2hCLE9BQU9rQix5QkFBeUIsR0FBR2xCLE9BQU9tQixnQkFBZ0IsQ0FBQ1QsUUFBUVYsT0FBT2tCLHlCQUF5QixDQUFDSixXQUFXbEIsUUFBUUksT0FBT2MsU0FBU0MsT0FBTyxDQUFDLFNBQVVDLEdBQUc7WUFDL0poQixPQUFPb0IsY0FBYyxDQUFDVixRQUFRTSxLQUFLaEIsT0FBT0ssd0JBQXdCLENBQUNTLFFBQVFFO1FBQzdFO0lBQ0Y7SUFFQSxPQUFPTjtBQUNUO0FBRUEsU0FBU1csUUFBUUMsR0FBRztJQUNsQjtJQUVBLE9BQU9ELFVBQVUsY0FBYyxPQUFPRSxVQUFVLFlBQVksT0FBT0EsT0FBT0MsUUFBUSxHQUFHLFNBQVVGLEdBQUc7UUFDaEcsT0FBTyxPQUFPQTtJQUNoQixJQUFJLFNBQVVBLEdBQUc7UUFDZixPQUFPQSxPQUFPLGNBQWMsT0FBT0MsVUFBVUQsSUFBSUcsV0FBVyxLQUFLRixVQUFVRCxRQUFRQyxPQUFPRyxTQUFTLEdBQUcsV0FBVyxPQUFPSjtJQUMxSCxHQUFHRCxRQUFRQztBQUNiO0FBRUEsU0FBU0s7SUFDUEEsY0FBYyxTQUFVQyxFQUFFLEVBQUVDLE1BQU07UUFDaEMsT0FBTyxJQUFJQyxZQUFZRixJQUFJLEtBQUssR0FBR0M7SUFDckM7SUFFQSxJQUFJRSxTQUFTQyxPQUFPTixTQUFTLEVBQ3pCTyxVQUFVLElBQUlDO0lBRWxCLFNBQVNKLFlBQVlGLEVBQUUsRUFBRU8sS0FBSyxFQUFFTixNQUFNO1FBQ3BDLElBQUlPLFFBQVEsSUFBSUosT0FBT0osSUFBSU87UUFFM0IsT0FBT0YsUUFBUUksR0FBRyxDQUFDRCxPQUFPUCxVQUFVSSxRQUFRSyxHQUFHLENBQUNWLE1BQU1XLGdCQUFnQkgsT0FBT04sWUFBWUosU0FBUztJQUNwRztJQUVBLFNBQVNjLFlBQVlDLE1BQU0sRUFBRWIsRUFBRTtRQUM3QixJQUFJYyxJQUFJVCxRQUFRSyxHQUFHLENBQUNWO1FBRXBCLE9BQU81QixPQUFPRCxJQUFJLENBQUMyQyxHQUFHQyxNQUFNLENBQUMsU0FBVWQsTUFBTSxFQUFFZSxJQUFJO1lBQ2pELE9BQU9mLE1BQU0sQ0FBQ2UsS0FBSyxHQUFHSCxNQUFNLENBQUNDLENBQUMsQ0FBQ0UsS0FBSyxDQUFDLEVBQUVmO1FBQ3pDLEdBQUc3QixPQUFPNkMsTUFBTSxDQUFDO0lBQ25CO0lBRUEsT0FBT0MsVUFBVWhCLGFBQWFFLFNBQVNGLFlBQVlKLFNBQVMsQ0FBQ3FCLElBQUksR0FBRyxTQUFVQyxHQUFHO1FBQy9FLElBQUlQLFNBQVNWLE9BQU9nQixJQUFJLENBQUNFLElBQUksQ0FBQyxJQUFJLEVBQUVEO1FBRXBDLE9BQU9QLFVBQVdBLENBQUFBLE9BQU9aLE1BQU0sR0FBR1csWUFBWUMsUUFBUSxJQUFJLElBQUlBO0lBQ2hFLEdBQUdYLFlBQVlKLFNBQVMsQ0FBQ0gsT0FBTzJCLE9BQU8sQ0FBQyxHQUFHLFNBQVVGLEdBQUcsRUFBRUcsWUFBWTtRQUNwRSxJQUFJLFlBQVksT0FBT0EsY0FBYztZQUNuQyxJQUFJdEIsU0FBU0ksUUFBUUssR0FBRyxDQUFDLElBQUk7WUFFN0IsT0FBT1AsTUFBTSxDQUFDUixPQUFPMkIsT0FBTyxDQUFDLENBQUNELElBQUksQ0FBQyxJQUFJLEVBQUVELEtBQUtHLGFBQWFELE9BQU8sQ0FBQyxnQkFBZ0IsU0FBVUUsQ0FBQyxFQUFFUixJQUFJO2dCQUNsRyxPQUFPLE1BQU1mLE1BQU0sQ0FBQ2UsS0FBSztZQUMzQjtRQUNGO1FBRUEsSUFBSSxjQUFjLE9BQU9PLGNBQWM7WUFDckMsSUFBSWYsUUFBUSxJQUFJO1lBRWhCLE9BQU9MLE1BQU0sQ0FBQ1IsT0FBTzJCLE9BQU8sQ0FBQyxDQUFDRCxJQUFJLENBQUMsSUFBSSxFQUFFRCxLQUFLO2dCQUM1QyxJQUFJSyxPQUFPekM7Z0JBQ1gsT0FBTyxZQUFZLE9BQU95QyxJQUFJLENBQUNBLEtBQUt4QyxNQUFNLEdBQUcsRUFBRSxJQUFJLENBQUN3QyxPQUFPLEVBQUUsQ0FBQ0MsS0FBSyxDQUFDTCxJQUFJLENBQUNJLEtBQUksRUFBRzlDLElBQUksQ0FBQ2lDLFlBQVlhLE1BQU1qQixTQUFTZSxhQUFhM0MsS0FBSyxDQUFDLElBQUksRUFBRTZDO1lBQzNJO1FBQ0Y7UUFFQSxPQUFPdEIsTUFBTSxDQUFDUixPQUFPMkIsT0FBTyxDQUFDLENBQUNELElBQUksQ0FBQyxJQUFJLEVBQUVELEtBQUtHO0lBQ2hELEdBQUd4QixZQUFZbkIsS0FBSyxDQUFDLElBQUksRUFBRUk7QUFDN0I7QUFFQSxTQUFTMkMsZ0JBQWdCQyxRQUFRLEVBQUVDLFdBQVc7SUFDNUMsSUFBSSxDQUFFRCxDQUFBQSxvQkFBb0JDLFdBQVUsR0FBSTtRQUN0QyxNQUFNLElBQUlDLFVBQVU7SUFDdEI7QUFDRjtBQUVBLFNBQVNDLGtCQUFrQmpELE1BQU0sRUFBRWtELEtBQUs7SUFDdEMsSUFBSyxJQUFJakQsSUFBSSxHQUFHQSxJQUFJaUQsTUFBTS9DLE1BQU0sRUFBRUYsSUFBSztRQUNyQyxJQUFJa0QsYUFBYUQsS0FBSyxDQUFDakQsRUFBRTtRQUN6QmtELFdBQVd2RCxVQUFVLEdBQUd1RCxXQUFXdkQsVUFBVSxJQUFJO1FBQ2pEdUQsV0FBV0MsWUFBWSxHQUFHO1FBQzFCLElBQUksV0FBV0QsWUFBWUEsV0FBV0UsUUFBUSxHQUFHO1FBQ2pEL0QsT0FBT29CLGNBQWMsQ0FBQ1YsUUFBUW1ELFdBQVc3QyxHQUFHLEVBQUU2QztJQUNoRDtBQUNGO0FBRUEsU0FBU0csYUFBYVAsV0FBVyxFQUFFUSxVQUFVLEVBQUVDLFdBQVc7SUFDeEQsSUFBSUQsWUFBWU4sa0JBQWtCRixZQUFZL0IsU0FBUyxFQUFFdUM7SUFDekQsSUFBSUMsYUFBYVAsa0JBQWtCRixhQUFhUztJQUNoRGxFLE9BQU9vQixjQUFjLENBQUNxQyxhQUFhLGFBQWE7UUFDOUNNLFVBQVU7SUFDWjtJQUNBLE9BQU9OO0FBQ1Q7QUFFQSxTQUFTeEMsZ0JBQWdCSyxHQUFHLEVBQUVOLEdBQUcsRUFBRW1ELEtBQUs7SUFDdEMsSUFBSW5ELE9BQU9NLEtBQUs7UUFDZHRCLE9BQU9vQixjQUFjLENBQUNFLEtBQUtOLEtBQUs7WUFDOUJtRCxPQUFPQTtZQUNQN0QsWUFBWTtZQUNad0QsY0FBYztZQUNkQyxVQUFVO1FBQ1o7SUFDRixPQUFPO1FBQ0x6QyxHQUFHLENBQUNOLElBQUksR0FBR21EO0lBQ2I7SUFFQSxPQUFPN0M7QUFDVDtBQUVBLFNBQVN3QixVQUFVc0IsUUFBUSxFQUFFQyxVQUFVO0lBQ3JDLElBQUksT0FBT0EsZUFBZSxjQUFjQSxlQUFlLE1BQU07UUFDM0QsTUFBTSxJQUFJWCxVQUFVO0lBQ3RCO0lBRUFVLFNBQVMxQyxTQUFTLEdBQUcxQixPQUFPNkMsTUFBTSxDQUFDd0IsY0FBY0EsV0FBVzNDLFNBQVMsRUFBRTtRQUNyRUQsYUFBYTtZQUNYMEMsT0FBT0M7WUFDUEwsVUFBVTtZQUNWRCxjQUFjO1FBQ2hCO0lBQ0Y7SUFDQTlELE9BQU9vQixjQUFjLENBQUNnRCxVQUFVLGFBQWE7UUFDM0NMLFVBQVU7SUFDWjtJQUNBLElBQUlNLFlBQVk5QixnQkFBZ0I2QixVQUFVQztBQUM1QztBQUVBLFNBQVM5QixnQkFBZ0IrQixDQUFDLEVBQUVDLENBQUM7SUFDM0JoQyxrQkFBa0J2QyxPQUFPd0UsY0FBYyxJQUFJLFNBQVNqQyxnQkFBZ0IrQixDQUFDLEVBQUVDLENBQUM7UUFDdEVELEVBQUVHLFNBQVMsR0FBR0Y7UUFDZCxPQUFPRDtJQUNUO0lBRUEsT0FBTy9CLGdCQUFnQitCLEdBQUdDO0FBQzVCO0FBRUEsU0FBU0csZUFBZUMsR0FBRyxFQUFFaEUsQ0FBQztJQUM1QixPQUFPaUUsZ0JBQWdCRCxRQUFRRSxzQkFBc0JGLEtBQUtoRSxNQUFNbUUsNEJBQTRCSCxLQUFLaEUsTUFBTW9FO0FBQ3pHO0FBRUEsU0FBU0MsbUJBQW1CTCxHQUFHO0lBQzdCLE9BQU9NLG1CQUFtQk4sUUFBUU8saUJBQWlCUCxRQUFRRyw0QkFBNEJILFFBQVFRO0FBQ2pHO0FBRUEsU0FBU0YsbUJBQW1CTixHQUFHO0lBQzdCLElBQUlTLE1BQU1DLE9BQU8sQ0FBQ1YsTUFBTSxPQUFPVyxrQkFBa0JYO0FBQ25EO0FBRUEsU0FBU0MsZ0JBQWdCRCxHQUFHO0lBQzFCLElBQUlTLE1BQU1DLE9BQU8sQ0FBQ1YsTUFBTSxPQUFPQTtBQUNqQztBQUVBLFNBQVNPLGlCQUFpQkssSUFBSTtJQUM1QixJQUFJLE9BQU9oRSxXQUFXLGVBQWVnRSxJQUFJLENBQUNoRSxPQUFPQyxRQUFRLENBQUMsSUFBSSxRQUFRK0QsSUFBSSxDQUFDLGFBQWEsSUFBSSxNQUFNLE9BQU9ILE1BQU1JLElBQUksQ0FBQ0Q7QUFDdEg7QUFFQSxTQUFTVixzQkFBc0JGLEdBQUcsRUFBRWhFLENBQUM7SUFDbkMsSUFBSThFLEtBQUtkLE9BQU8sT0FBTyxPQUFPLE9BQU9wRCxXQUFXLGVBQWVvRCxHQUFHLENBQUNwRCxPQUFPQyxRQUFRLENBQUMsSUFBSW1ELEdBQUcsQ0FBQyxhQUFhO0lBRXhHLElBQUljLE1BQU0sTUFBTTtJQUNoQixJQUFJQyxPQUFPLEVBQUU7SUFDYixJQUFJQyxLQUFLO0lBQ1QsSUFBSUMsS0FBSztJQUVULElBQUlDLElBQUlDO0lBRVIsSUFBSTtRQUNGLElBQUtMLEtBQUtBLEdBQUd4QyxJQUFJLENBQUMwQixNQUFNLENBQUVnQixDQUFBQSxLQUFLLENBQUNFLEtBQUtKLEdBQUdNLElBQUksRUFBQyxFQUFHQyxJQUFJLEdBQUdMLEtBQUssS0FBTTtZQUNoRUQsS0FBS25GLElBQUksQ0FBQ3NGLEdBQUcxQixLQUFLO1lBRWxCLElBQUl4RCxLQUFLK0UsS0FBSzdFLE1BQU0sS0FBS0YsR0FBRztRQUM5QjtJQUNGLEVBQUUsT0FBT3NGLEtBQUs7UUFDWkwsS0FBSztRQUNMRSxLQUFLRztJQUNQLFNBQVU7UUFDUixJQUFJO1lBQ0YsSUFBSSxDQUFDTixNQUFNRixFQUFFLENBQUMsU0FBUyxJQUFJLE1BQU1BLEVBQUUsQ0FBQyxTQUFTO1FBQy9DLFNBQVU7WUFDUixJQUFJRyxJQUFJLE1BQU1FO1FBQ2hCO0lBQ0Y7SUFFQSxPQUFPSjtBQUNUO0FBRUEsU0FBU1osNEJBQTRCUixDQUFDLEVBQUU0QixNQUFNO0lBQzVDLElBQUksQ0FBQzVCLEdBQUc7SUFDUixJQUFJLE9BQU9BLE1BQU0sVUFBVSxPQUFPZ0Isa0JBQWtCaEIsR0FBRzRCO0lBQ3ZELElBQUlDLElBQUluRyxPQUFPMEIsU0FBUyxDQUFDMEUsUUFBUSxDQUFDbkQsSUFBSSxDQUFDcUIsR0FBR2hCLEtBQUssQ0FBQyxHQUFHLENBQUM7SUFDcEQsSUFBSTZDLE1BQU0sWUFBWTdCLEVBQUU3QyxXQUFXLEVBQUUwRSxJQUFJN0IsRUFBRTdDLFdBQVcsQ0FBQ21CLElBQUk7SUFDM0QsSUFBSXVELE1BQU0sU0FBU0EsTUFBTSxPQUFPLE9BQU9mLE1BQU1JLElBQUksQ0FBQ2xCO0lBQ2xELElBQUk2QixNQUFNLGVBQWUsMkNBQTJDRSxJQUFJLENBQUNGLElBQUksT0FBT2Isa0JBQWtCaEIsR0FBRzRCO0FBQzNHO0FBRUEsU0FBU1osa0JBQWtCWCxHQUFHLEVBQUUyQixHQUFHO0lBQ2pDLElBQUlBLE9BQU8sUUFBUUEsTUFBTTNCLElBQUk5RCxNQUFNLEVBQUV5RixNQUFNM0IsSUFBSTlELE1BQU07SUFFckQsSUFBSyxJQUFJRixJQUFJLEdBQUc0RixPQUFPLElBQUluQixNQUFNa0IsTUFBTTNGLElBQUkyRixLQUFLM0YsSUFBSzRGLElBQUksQ0FBQzVGLEVBQUUsR0FBR2dFLEdBQUcsQ0FBQ2hFLEVBQUU7SUFFckUsT0FBTzRGO0FBQ1Q7QUFFQSxTQUFTcEI7SUFDUCxNQUFNLElBQUl6QixVQUFVO0FBQ3RCO0FBRUEsU0FBU3FCO0lBQ1AsTUFBTSxJQUFJckIsVUFBVTtBQUN0QjtBQUVBLElBQUk4QyxPQUFPLFNBQVNBLFFBQVE7QUFFNUIsSUFBSUMsVUFBVSxDQUFDO0FBQ2YsSUFBSUMsWUFBWSxDQUFDO0FBQ2pCLElBQUlDLHFCQUFxQjtBQUN6QixJQUFJQyxlQUFlO0lBQ2pCQyxNQUFNTDtJQUNOTSxTQUFTTjtBQUNYO0FBRUEsSUFBSTtJQUNGLElBQUksS0FBa0IsRUFBYUMsRUFBaUJNO0lBQ3BELElBQUksT0FBT0MsYUFBYSxhQUFhTixZQUFZTTtJQUNqRCxJQUFJLE9BQU9DLHFCQUFxQixhQUFhTixxQkFBcUJNO0lBQ2xFLElBQUksT0FBT0MsZ0JBQWdCLGFBQWFOLGVBQWVNO0FBQ3pELEVBQUUsT0FBT0MsR0FBRyxDQUFDO0FBRWIsSUFBSUMsT0FBT1gsUUFBUVksU0FBUyxJQUFJLENBQUMsR0FDN0JDLGlCQUFpQkYsS0FBS0csU0FBUyxFQUMvQkEsWUFBWUQsbUJBQW1CLEtBQUssSUFBSSxLQUFLQTtBQUNqRCxJQUFJRSxTQUFTZjtBQUNiLElBQUlnQixXQUFXZjtBQUNmLElBQUlnQixvQkFBb0JmO0FBQ3hCLElBQUlnQixjQUFjZjtBQUNsQixJQUFJZ0IsYUFBYSxDQUFDLENBQUNKLE9BQU9SLFFBQVE7QUFDbEMsSUFBSWEsU0FBUyxDQUFDLENBQUNKLFNBQVNLLGVBQWUsSUFBSSxDQUFDLENBQUNMLFNBQVNNLElBQUksSUFBSSxPQUFPTixTQUFTTyxnQkFBZ0IsS0FBSyxjQUFjLE9BQU9QLFNBQVNRLGFBQWEsS0FBSztBQUNuSixJQUFJQyxRQUFRLENBQUNYLFVBQVVZLE9BQU8sQ0FBQyxXQUFXLENBQUNaLFVBQVVZLE9BQU8sQ0FBQztBQUU3RCxJQUFJQyxjQUFjQyxlQUFlQyxlQUFlQyxlQUFlQztBQUUvRCxJQUFJQyx1QkFBdUI7QUFDM0IsSUFBSUMsZ0JBQWdCO0FBQ3BCLElBQUlDLHFCQUFxQjtBQUN6QixJQUFJQyw0QkFBNEI7QUFDaEMsSUFBSUMsZ0JBQWdCO0FBQ3BCLElBQUlDLHlCQUF5QjtBQUM3QixJQUFJQyxpQ0FBaUM7QUFDckMsSUFBSUMsY0FBYztBQUNsQixJQUFJQyxZQUFZO0FBQ2hCLElBQUlDLDhCQUE4QjtBQUNsQyxJQUFJQywwQkFBMEI7QUFDOUIsSUFBSUMsc0NBQXNDO0lBQUM7SUFBUTtJQUFRO0lBQVM7Q0FBUztBQUM3RSxJQUFJQyxhQUFhO0lBQ2YsSUFBSTtRQUNGLE9BQU9DLGtCQUF5QjtJQUNsQyxFQUFFLE9BQU9uQyxHQUFHO1FBQ1YsT0FBTztJQUNUO0FBQ0Y7QUFDQSxJQUFJb0MsaUJBQWlCO0FBQ3JCLElBQUlDLGVBQWU7QUFDbkIsSUFBSUMsV0FBVztJQUFDRjtJQUFnQkM7Q0FBYTtBQUU3QyxTQUFTRSxZQUFZcEksR0FBRztJQUN0Qiw0REFBNEQ7SUFDNUQsT0FBTyxJQUFJcUksTUFBTXJJLEtBQUs7UUFDcEJnQixLQUFLLFNBQVNBLElBQUk1QixNQUFNLEVBQUVrSixJQUFJO1lBQzVCLE9BQU9BLFFBQVFsSixTQUFTQSxNQUFNLENBQUNrSixLQUFLLEdBQUdsSixNQUFNLENBQUM2SSxlQUFlO1FBQy9EO0lBQ0Y7QUFDRjtBQUNBLElBQUlNLGtCQUFrQkgsWUFBYXRCLENBQUFBLGVBQWUsQ0FBQyxHQUFHbkgsZ0JBQWdCbUgsY0FBY21CLGdCQUFnQjtJQUNsRyxNQUFNO0lBQ04sT0FBTztJQUNQLFlBQVk7SUFDWixPQUFPO0lBQ1AsY0FBYztJQUNkLE9BQU87SUFDUCxZQUFZO0lBQ1osT0FBTztJQUNQLFdBQVc7SUFDWCxPQUFPO0lBQ1AsY0FBYztJQUNkLE9BQU87SUFDUCxhQUFhO0lBQ2IsT0FBTztJQUNQLFVBQVU7QUFDWixJQUFJdEksZ0JBQWdCbUgsY0FBY29CLGNBQWM7SUFDOUMsTUFBTTtJQUNOLFFBQVE7SUFDUixZQUFZO0lBQ1osUUFBUTtJQUNSLGNBQWM7SUFDZCxRQUFRO0lBQ1IsWUFBWTtBQUNkLElBQUlwQixZQUFXO0FBQ2YsSUFBSTBCLGtCQUFrQkosWUFBYXJCLENBQUFBLGdCQUFnQixDQUFDLEdBQUdwSCxnQkFBZ0JvSCxlQUFla0IsZ0JBQWdCO0lBQ3BHLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFFBQVE7SUFDUixXQUFXO0lBQ1gsVUFBVTtJQUNWLE9BQU87QUFDVCxJQUFJdEksZ0JBQWdCb0gsZUFBZW1CLGNBQWM7SUFDL0MsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0FBQ1gsSUFBSW5CLGFBQVk7QUFDaEIsSUFBSTBCLHVCQUF1QkwsWUFBYXBCLENBQUFBLGdCQUFnQixDQUFDLEdBQUdySCxnQkFBZ0JxSCxlQUFlaUIsZ0JBQWdCO0lBQ3pHLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87QUFDVCxJQUFJdEksZ0JBQWdCcUgsZUFBZWtCLGNBQWM7SUFDL0MsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0FBQ1YsSUFBSWxCLGFBQVk7QUFDaEIsSUFBSTBCLHVCQUF1Qk4sWUFBYW5CLENBQUFBLGdCQUFnQixDQUFDLEdBQUd0SCxnQkFBZ0JzSCxlQUFlZ0IsZ0JBQWdCO0lBQ3pHLGFBQWE7SUFDYixjQUFjO0lBQ2QsVUFBVTtJQUNWLFlBQVk7SUFDWixjQUFjO0lBQ2QsWUFBWTtJQUNaLFdBQVc7QUFDYixJQUFJdEksZ0JBQWdCc0gsZUFBZWlCLGNBQWM7SUFDL0MsWUFBWTtJQUNaLGNBQWM7SUFDZCxZQUFZO0FBQ2QsSUFBSWpCLGFBQVk7QUFDaEIsSUFBSTBCLGdDQUFnQyxxQ0FBcUMsd0NBQXdDO0FBRWpILElBQUlDLHdCQUF3QjtBQUM1QixJQUFJQyxzQkFBc0I7QUFDMUIsSUFBSUMsd0JBQXdCVixZQUFhbEIsQ0FBQUEsZ0JBQWdCLENBQUMsR0FBR3ZILGdCQUFnQnVILGVBQWVlLGdCQUFnQjtJQUMxRyxPQUFPO0lBQ1AsT0FBTztJQUNQLFVBQVU7SUFDVixPQUFPO0lBQ1AsT0FBTztBQUNULElBQUl0SSxnQkFBZ0J1SCxlQUFlZ0IsY0FBYztJQUMvQyxPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87QUFDVCxJQUFJaEIsYUFBWTtBQUNoQixJQUFJNkIsV0FBVztJQUFDO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0NBQUc7QUFDOUMsSUFBSUMsY0FBY0QsU0FBU0UsTUFBTSxDQUFDO0lBQUM7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7Q0FBRztBQUMxRSxJQUFJQyxrQ0FBa0M7SUFBQztJQUFTO0lBQWU7SUFBYTtJQUFxQjtDQUFlO0FBQ2hILElBQUlDLGtCQUFrQjtJQUNwQkMsT0FBTztJQUNQQyxjQUFjO0lBQ2RDLFNBQVM7SUFDVEMsV0FBVztBQUNiO0FBQ0EsSUFBSUMsV0FBVyxJQUFJQztBQUNuQi9LLE9BQU9ELElBQUksQ0FBQytKLGVBQWUsQ0FBQ1AsZUFBZSxFQUFFeUIsR0FBRyxDQUFDRixTQUFTRyxHQUFHLENBQUNDLElBQUksQ0FBQ0o7QUFDbkU5SyxPQUFPRCxJQUFJLENBQUMrSixlQUFlLENBQUNOLGFBQWEsRUFBRXdCLEdBQUcsQ0FBQ0YsU0FBU0csR0FBRyxDQUFDQyxJQUFJLENBQUNKO0FBQ2pFLElBQUlLLG1CQUFtQixFQUFFLENBQUNaLE1BQU0sQ0FBQ2QsVUFBVXpFLG1CQUFtQjhGLFdBQVc7SUFBQztJQUFPO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTztJQUFRO0lBQVU7SUFBUTtJQUFhO0lBQVU7SUFBYTtJQUFtQjtJQUFpQjtJQUFRO0lBQU07SUFBVztJQUFrQjtJQUFlO0lBQVU7SUFBTTtJQUFhO0lBQWM7SUFBUztJQUFjO0lBQWM7SUFBYTtJQUFhO0lBQVM7SUFBYztJQUFnQjtJQUFRO0lBQVk7SUFBWTtJQUFTO0lBQU1MLGdCQUFnQkMsS0FBSztJQUFFRCxnQkFBZ0JFLFlBQVk7SUFBRUYsZ0JBQWdCRyxPQUFPO0lBQUVILGdCQUFnQkksU0FBUztDQUFDLEVBQUVOLE1BQU0sQ0FBQ0YsU0FBU1csR0FBRyxDQUFDLFNBQVU3RSxDQUFDO0lBQ25sQixPQUFPLEdBQUdvRSxNQUFNLENBQUNwRSxHQUFHO0FBQ3RCLElBQUlvRSxNQUFNLENBQUNELFlBQVlVLEdBQUcsQ0FBQyxTQUFVN0UsQ0FBQztJQUNwQyxPQUFPLEtBQUtvRSxNQUFNLENBQUNwRTtBQUNyQjtBQUVBLElBQUlpRixVQUFVNUQsT0FBTzZELGlCQUFpQixJQUFJLENBQUM7QUFFM0MsU0FBU0MsY0FBY0MsSUFBSTtJQUN6QixJQUFJQyxVQUFVL0QsU0FBU2dFLGFBQWEsQ0FBQyxZQUFZRixPQUFPO0lBRXhELElBQUlDLFNBQVM7UUFDWCxPQUFPQSxRQUFRRSxZQUFZLENBQUNIO0lBQzlCO0FBQ0Y7QUFFQSxTQUFTSSxPQUFPQyxHQUFHO0lBQ2pCLGlHQUFpRztJQUNqRyw0RUFBNEU7SUFDNUUsSUFBSUEsUUFBUSxJQUFJLE9BQU87SUFDdkIsSUFBSUEsUUFBUSxTQUFTLE9BQU87SUFDNUIsSUFBSUEsUUFBUSxRQUFRLE9BQU87SUFDM0IsT0FBT0E7QUFDVDtBQUVBLElBQUluRSxZQUFZLE9BQU9BLFNBQVNnRSxhQUFhLEtBQUssWUFBWTtJQUM1RCxJQUFJSSxRQUFRO1FBQUM7WUFBQztZQUFzQjtTQUFlO1FBQUU7WUFBQztZQUFtQjtTQUFZO1FBQUU7WUFBQztZQUF1QjtTQUFnQjtRQUFFO1lBQUM7WUFBc0I7U0FBZTtRQUFFO1lBQUM7WUFBMEI7U0FBbUI7UUFBRTtZQUFDO1lBQXlCO1NBQWlCO1FBQUU7WUFBQztZQUFxQjtTQUFhO1FBQUU7WUFBQztZQUFrQjtTQUFXO1FBQUU7WUFBQztZQUErQjtTQUF1QjtRQUFFO1lBQUM7WUFBMEI7U0FBbUI7UUFBRTtZQUFDO1lBQXdCO1NBQWlCO1FBQUU7WUFBQztZQUE2QjtTQUFxQjtRQUFFO1lBQUM7WUFBNEI7U0FBcUI7UUFBRTtZQUFDO1lBQTJCO1NBQW1CO0tBQUM7SUFDem5CQSxNQUFNOUssT0FBTyxDQUFDLFNBQVVxRyxJQUFJO1FBQzFCLElBQUkwRSxRQUFRcEgsZUFBZTBDLE1BQU0sSUFDN0JtRSxPQUFPTyxLQUFLLENBQUMsRUFBRSxFQUNmOUssTUFBTThLLEtBQUssQ0FBQyxFQUFFO1FBRWxCLElBQUlGLE1BQU1ELE9BQU9MLGNBQWNDO1FBRS9CLElBQUlLLFFBQVFHLGFBQWFILFFBQVEsTUFBTTtZQUNyQ1IsT0FBTyxDQUFDcEssSUFBSSxHQUFHNEs7UUFDakI7SUFDRjtBQUNGO0FBRUEsSUFBSUksV0FBVztJQUNiQyxjQUFjO0lBQ2RDLGVBQWU7SUFDZkMsV0FBV3hEO0lBQ1h5RCxrQkFBa0J4RDtJQUNsQnlELGdCQUFnQjtJQUNoQkMsWUFBWTtJQUNaQyxVQUFVO0lBQ1ZDLHNCQUFzQjtJQUN0QkMsa0JBQWtCO0lBQ2xCQyxnQkFBZ0I7SUFDaEJDLG9CQUFvQjtJQUNwQkMsb0JBQW9CO0lBQ3BCQyxrQkFBa0I7QUFDcEIsR0FBRyxxRUFBcUU7QUFFeEUsSUFBSXpCLFFBQVEwQixZQUFZLEVBQUU7SUFDeEIxQixRQUFRZSxTQUFTLEdBQUdmLFFBQVEwQixZQUFZO0FBQzFDO0FBRUEsSUFBSUMsVUFBVXRNLGVBQWVBLGVBQWUsQ0FBQyxHQUFHdUwsV0FBV1o7QUFFM0QsSUFBSSxDQUFDMkIsUUFBUVYsY0FBYyxFQUFFVSxRQUFRTixnQkFBZ0IsR0FBRztBQUN4RCxJQUFJTyxTQUFTLENBQUM7QUFDZGhOLE9BQU9ELElBQUksQ0FBQ2lNLFVBQVVqTCxPQUFPLENBQUMsU0FBVUMsR0FBRztJQUN6Q2hCLE9BQU9vQixjQUFjLENBQUM0TCxRQUFRaE0sS0FBSztRQUNqQ1YsWUFBWTtRQUNaK0IsS0FBSyxTQUFTQSxJQUFJdUosR0FBRztZQUNuQm1CLE9BQU8sQ0FBQy9MLElBQUksR0FBRzRLO1lBRWZxQixZQUFZbE0sT0FBTyxDQUFDLFNBQVVtTSxFQUFFO2dCQUM5QixPQUFPQSxHQUFHRjtZQUNaO1FBQ0Y7UUFDQTFLLEtBQUssU0FBU0E7WUFDWixPQUFPeUssT0FBTyxDQUFDL0wsSUFBSTtRQUNyQjtJQUNGO0FBQ0YsSUFBSSx3RUFBd0U7QUFFNUVoQixPQUFPb0IsY0FBYyxDQUFDNEwsUUFBUSxnQkFBZ0I7SUFDNUMxTSxZQUFZO0lBQ1orQixLQUFLLFNBQVNBLElBQUl1SixHQUFHO1FBQ25CbUIsUUFBUVosU0FBUyxHQUFHUDtRQUVwQnFCLFlBQVlsTSxPQUFPLENBQUMsU0FBVW1NLEVBQUU7WUFDOUIsT0FBT0EsR0FBR0Y7UUFDWjtJQUNGO0lBQ0ExSyxLQUFLLFNBQVNBO1FBQ1osT0FBT3lLLFFBQVFaLFNBQVM7SUFDMUI7QUFDRjtBQUNBM0UsT0FBTzZELGlCQUFpQixHQUFHMkI7QUFDM0IsSUFBSUMsY0FBYyxFQUFFO0FBQ3BCLFNBQVNFLFNBQVNELEVBQUU7SUFDbEJELFlBQVkxTSxJQUFJLENBQUMyTTtJQUVqQixPQUFPO1FBQ0xELFlBQVlHLE1BQU0sQ0FBQ0gsWUFBWTlFLE9BQU8sQ0FBQytFLEtBQUs7SUFDOUM7QUFDRjtBQUVBLElBQUlHLElBQUkzRTtBQUNSLElBQUk0RSx1QkFBdUI7SUFDekJDLE1BQU07SUFDTkMsR0FBRztJQUNIQyxHQUFHO0lBQ0hDLFFBQVE7SUFDUkMsT0FBTztJQUNQQyxPQUFPO0FBQ1Q7QUFDQSxTQUFTQyxVQUFVQyxHQUFHO0lBQ3BCLElBQUksQ0FBQ0EsT0FBTyxDQUFDakcsUUFBUTtRQUNuQjtJQUNGO0lBRUEsSUFBSWtHLFFBQVF0RyxTQUFTUSxhQUFhLENBQUM7SUFDbkM4RixNQUFNQyxZQUFZLENBQUMsUUFBUTtJQUMzQkQsTUFBTUUsU0FBUyxHQUFHSDtJQUNsQixJQUFJSSxlQUFlekcsU0FBU00sSUFBSSxDQUFDb0csVUFBVTtJQUMzQyxJQUFJQyxjQUFjO0lBRWxCLElBQUssSUFBSXpOLElBQUl1TixhQUFhck4sTUFBTSxHQUFHLEdBQUdGLElBQUksQ0FBQyxHQUFHQSxJQUFLO1FBQ2pELElBQUkwTixRQUFRSCxZQUFZLENBQUN2TixFQUFFO1FBQzNCLElBQUkyTixVQUFVLENBQUNELE1BQU1DLE9BQU8sSUFBSSxFQUFDLEVBQUdDLFdBQVc7UUFFL0MsSUFBSTtZQUFDO1lBQVM7U0FBTyxDQUFDcEcsT0FBTyxDQUFDbUcsV0FBVyxDQUFDLEdBQUc7WUFDM0NGLGNBQWNDO1FBQ2hCO0lBQ0Y7SUFFQTVHLFNBQVNNLElBQUksQ0FBQ3lHLFlBQVksQ0FBQ1QsT0FBT0s7SUFDbEMsT0FBT047QUFDVDtBQUNBLElBQUlXLFNBQVM7QUFDYixTQUFTQztJQUNQLElBQUluQixPQUFPO0lBQ1gsSUFBSW9CLEtBQUs7SUFFVCxNQUFPcEIsU0FBUyxFQUFHO1FBQ2pCb0IsTUFBTUYsTUFBTSxDQUFDRyxLQUFLQyxNQUFNLEtBQUssS0FBSyxFQUFFO0lBQ3RDO0lBRUEsT0FBT0Y7QUFDVDtBQUNBLFNBQVNHLFFBQVF4TixHQUFHO0lBQ2xCLElBQUl5TixRQUFRLEVBQUU7SUFFZCxJQUFLLElBQUlwTyxJQUFJLENBQUNXLE9BQU8sRUFBRSxFQUFFVCxNQUFNLEtBQUssR0FBR0YsS0FBTTtRQUMzQ29PLEtBQUssQ0FBQ3BPLEVBQUUsR0FBR1csR0FBRyxDQUFDWCxFQUFFO0lBQ25CO0lBRUEsT0FBT29PO0FBQ1Q7QUFDQSxTQUFTQyxXQUFXQyxJQUFJO0lBQ3RCLElBQUlBLEtBQUtDLFNBQVMsRUFBRTtRQUNsQixPQUFPSixRQUFRRyxLQUFLQyxTQUFTO0lBQy9CLE9BQU87UUFDTCxPQUFPLENBQUNELEtBQUt2RCxZQUFZLENBQUMsWUFBWSxFQUFDLEVBQUd5RCxLQUFLLENBQUMsS0FBS2hQLE1BQU0sQ0FBQyxTQUFVUSxDQUFDO1lBQ3JFLE9BQU9BO1FBQ1Q7SUFDRjtBQUNGO0FBQ0EsU0FBU3lPLFdBQVdwTSxHQUFHO0lBQ3JCLE9BQU8sR0FBR3VILE1BQU0sQ0FBQ3ZILEtBQUtFLE9BQU8sQ0FBQyxNQUFNLFNBQVNBLE9BQU8sQ0FBQyxNQUFNLFVBQVVBLE9BQU8sQ0FBQyxNQUFNLFNBQVNBLE9BQU8sQ0FBQyxNQUFNLFFBQVFBLE9BQU8sQ0FBQyxNQUFNO0FBQ2xJO0FBQ0EsU0FBU21NLGVBQWVDLFVBQVU7SUFDaEMsT0FBT3RQLE9BQU9ELElBQUksQ0FBQ3VQLGNBQWMsQ0FBQyxHQUFHM00sTUFBTSxDQUFDLFNBQVU0TSxHQUFHLEVBQUVDLGFBQWE7UUFDdEUsT0FBT0QsTUFBTSxHQUFHaEYsTUFBTSxDQUFDaUYsZUFBZSxNQUFPakYsTUFBTSxDQUFDNkUsV0FBV0UsVUFBVSxDQUFDRSxjQUFjLEdBQUc7SUFDN0YsR0FBRyxJQUFJQyxJQUFJO0FBQ2I7QUFDQSxTQUFTQyxXQUFXQyxNQUFNO0lBQ3hCLE9BQU8zUCxPQUFPRCxJQUFJLENBQUM0UCxVQUFVLENBQUMsR0FBR2hOLE1BQU0sQ0FBQyxTQUFVNE0sR0FBRyxFQUFFSyxTQUFTO1FBQzlELE9BQU9MLE1BQU0sR0FBR2hGLE1BQU0sQ0FBQ3FGLFdBQVcsTUFBTXJGLE1BQU0sQ0FBQ29GLE1BQU0sQ0FBQ0MsVUFBVSxDQUFDSCxJQUFJLElBQUk7SUFDM0UsR0FBRztBQUNMO0FBQ0EsU0FBU0ksc0JBQXNCQyxTQUFTO0lBQ3RDLE9BQU9BLFVBQVV2QyxJQUFJLEtBQUtELHFCQUFxQkMsSUFBSSxJQUFJdUMsVUFBVXRDLENBQUMsS0FBS0YscUJBQXFCRSxDQUFDLElBQUlzQyxVQUFVckMsQ0FBQyxLQUFLSCxxQkFBcUJHLENBQUMsSUFBSXFDLFVBQVVwQyxNQUFNLEtBQUtKLHFCQUFxQkksTUFBTSxJQUFJb0MsVUFBVW5DLEtBQUssSUFBSW1DLFVBQVVsQyxLQUFLO0FBQ25PO0FBQ0EsU0FBU21DLGdCQUFnQjNJLElBQUk7SUFDM0IsSUFBSTBJLFlBQVkxSSxLQUFLMEksU0FBUyxFQUMxQkUsaUJBQWlCNUksS0FBSzRJLGNBQWMsRUFDcENDLFlBQVk3SSxLQUFLNkksU0FBUztJQUM5QixJQUFJQyxRQUFRO1FBQ1ZKLFdBQVcsYUFBYXZGLE1BQU0sQ0FBQ3lGLGlCQUFpQixHQUFHO0lBQ3JEO0lBQ0EsSUFBSUcsaUJBQWlCLGFBQWE1RixNQUFNLENBQUN1RixVQUFVdEMsQ0FBQyxHQUFHLElBQUksTUFBTWpELE1BQU0sQ0FBQ3VGLFVBQVVyQyxDQUFDLEdBQUcsSUFBSTtJQUMxRixJQUFJMkMsYUFBYSxTQUFTN0YsTUFBTSxDQUFDdUYsVUFBVXZDLElBQUksR0FBRyxLQUFNdUMsQ0FBQUEsVUFBVW5DLEtBQUssR0FBRyxDQUFDLElBQUksSUFBSSxNQUFNcEQsTUFBTSxDQUFDdUYsVUFBVXZDLElBQUksR0FBRyxLQUFNdUMsQ0FBQUEsVUFBVWxDLEtBQUssR0FBRyxDQUFDLElBQUksSUFBSTtJQUNsSixJQUFJeUMsY0FBYyxVQUFVOUYsTUFBTSxDQUFDdUYsVUFBVXBDLE1BQU0sRUFBRTtJQUNyRCxJQUFJNEMsUUFBUTtRQUNWUixXQUFXLEdBQUd2RixNQUFNLENBQUM0RixnQkFBZ0IsS0FBSzVGLE1BQU0sQ0FBQzZGLFlBQVksS0FBSzdGLE1BQU0sQ0FBQzhGO0lBQzNFO0lBQ0EsSUFBSUUsT0FBTztRQUNUVCxXQUFXLGFBQWF2RixNQUFNLENBQUMwRixZQUFZLElBQUksQ0FBQyxHQUFHO0lBQ3JEO0lBQ0EsT0FBTztRQUNMQyxPQUFPQTtRQUNQSSxPQUFPQTtRQUNQQyxNQUFNQTtJQUNSO0FBQ0Y7QUFDQSxTQUFTQyxnQkFBZ0IxRSxLQUFLO0lBQzVCLElBQUlnRSxZQUFZaEUsTUFBTWdFLFNBQVMsRUFDM0JXLGNBQWMzRSxNQUFNNEUsS0FBSyxFQUN6QkEsUUFBUUQsZ0JBQWdCLEtBQUssSUFBSS9ILGdCQUFnQitILGFBQ2pERSxlQUFlN0UsTUFBTThFLE1BQU0sRUFDM0JBLFNBQVNELGlCQUFpQixLQUFLLElBQUlqSSxnQkFBZ0JpSSxjQUNuREUsc0JBQXNCL0UsTUFBTWdGLGFBQWEsRUFDekNBLGdCQUFnQkQsd0JBQXdCLEtBQUssSUFBSSxRQUFRQTtJQUM3RCxJQUFJakYsTUFBTTtJQUVWLElBQUlrRixpQkFBaUI1SSxPQUFPO1FBQzFCMEQsT0FBTyxhQUFhckIsTUFBTSxDQUFDdUYsVUFBVXRDLENBQUMsR0FBR0gsSUFBSXFELFFBQVEsR0FBRyxRQUFRbkcsTUFBTSxDQUFDdUYsVUFBVXJDLENBQUMsR0FBR0osSUFBSXVELFNBQVMsR0FBRztJQUN2RyxPQUFPLElBQUlFLGVBQWU7UUFDeEJsRixPQUFPLHlCQUF5QnJCLE1BQU0sQ0FBQ3VGLFVBQVV0QyxDQUFDLEdBQUdILEdBQUcscUJBQXFCOUMsTUFBTSxDQUFDdUYsVUFBVXJDLENBQUMsR0FBR0osR0FBRztJQUN2RyxPQUFPO1FBQ0x6QixPQUFPLGFBQWFyQixNQUFNLENBQUN1RixVQUFVdEMsQ0FBQyxHQUFHSCxHQUFHLFFBQVE5QyxNQUFNLENBQUN1RixVQUFVckMsQ0FBQyxHQUFHSixHQUFHO0lBQzlFO0lBRUF6QixPQUFPLFNBQVNyQixNQUFNLENBQUN1RixVQUFVdkMsSUFBSSxHQUFHRixJQUFLeUMsQ0FBQUEsVUFBVW5DLEtBQUssR0FBRyxDQUFDLElBQUksSUFBSSxNQUFNcEQsTUFBTSxDQUFDdUYsVUFBVXZDLElBQUksR0FBR0YsSUFBS3lDLENBQUFBLFVBQVVsQyxLQUFLLEdBQUcsQ0FBQyxJQUFJLElBQUk7SUFDdEloQyxPQUFPLFVBQVVyQixNQUFNLENBQUN1RixVQUFVcEMsTUFBTSxFQUFFO0lBQzFDLE9BQU85QjtBQUNUO0FBRUEsSUFBSW1GLGFBQWE7QUFFakIsU0FBU2pEO0lBQ1AsSUFBSWtELE1BQU1ySTtJQUNWLElBQUlzSSxNQUFNckk7SUFDVixJQUFJc0ksS0FBS2xFLE9BQU9iLFNBQVM7SUFDekIsSUFBSWdGLEtBQUtuRSxPQUFPWixnQkFBZ0I7SUFDaEMsSUFBSWdGLElBQUlMO0lBRVIsSUFBSUcsT0FBT0YsT0FBT0csT0FBT0YsS0FBSztRQUM1QixJQUFJSSxRQUFRLElBQUlyUCxPQUFPLE1BQU11SSxNQUFNLENBQUN5RyxLQUFLLFFBQVE7UUFDakQsSUFBSU0saUJBQWlCLElBQUl0UCxPQUFPLE9BQU91SSxNQUFNLENBQUN5RyxLQUFLLFFBQVE7UUFDM0QsSUFBSU8sUUFBUSxJQUFJdlAsT0FBTyxNQUFNdUksTUFBTSxDQUFDMEcsTUFBTTtRQUMxQ0csSUFBSUEsRUFBRWxPLE9BQU8sQ0FBQ21PLE9BQU8sSUFBSTlHLE1BQU0sQ0FBQzJHLElBQUksTUFBTWhPLE9BQU8sQ0FBQ29PLGdCQUFnQixLQUFLL0csTUFBTSxDQUFDMkcsSUFBSSxNQUFNaE8sT0FBTyxDQUFDcU8sT0FBTyxJQUFJaEgsTUFBTSxDQUFDNEc7SUFDcEg7SUFFQSxPQUFPQztBQUNUO0FBRUEsSUFBSUksZUFBZTtBQUVuQixTQUFTQztJQUNQLElBQUl6RSxPQUFPVixVQUFVLElBQUksQ0FBQ2tGLGNBQWM7UUFDdEMzRCxVQUFVQztRQUNWMEQsZUFBZTtJQUNqQjtBQUNGO0FBRUEsSUFBSUUsWUFBWTtJQUNkQyxRQUFRLFNBQVNBO1FBQ2YsT0FBTztZQUNMQyxLQUFLO2dCQUNIOUQsS0FBS0E7Z0JBQ0xELFdBQVc0RDtZQUNiO1FBQ0Y7SUFDRjtJQUNBSSxPQUFPLFNBQVNBO1FBQ2QsT0FBTztZQUNMQywwQkFBMEIsU0FBU0E7Z0JBQ2pDTDtZQUNGO1lBQ0FNLGFBQWEsU0FBU0E7Z0JBQ3BCTjtZQUNGO1FBQ0Y7SUFDRjtBQUNGO0FBRUEsSUFBSU8sSUFBSXhLLFVBQVUsQ0FBQztBQUNuQixJQUFJLENBQUN3SyxDQUFDLENBQUN2SixxQkFBcUIsRUFBRXVKLENBQUMsQ0FBQ3ZKLHFCQUFxQixHQUFHLENBQUM7QUFDekQsSUFBSSxDQUFDdUosQ0FBQyxDQUFDdkoscUJBQXFCLENBQUNrSCxNQUFNLEVBQUVxQyxDQUFDLENBQUN2SixxQkFBcUIsQ0FBQ2tILE1BQU0sR0FBRyxDQUFDO0FBQ3ZFLElBQUksQ0FBQ3FDLENBQUMsQ0FBQ3ZKLHFCQUFxQixDQUFDb0osS0FBSyxFQUFFRyxDQUFDLENBQUN2SixxQkFBcUIsQ0FBQ29KLEtBQUssR0FBRyxDQUFDO0FBQ3JFLElBQUksQ0FBQ0csQ0FBQyxDQUFDdkoscUJBQXFCLENBQUN3SixLQUFLLEVBQUVELENBQUMsQ0FBQ3ZKLHFCQUFxQixDQUFDd0osS0FBSyxHQUFHLEVBQUU7QUFDdEUsSUFBSUMsWUFBWUYsQ0FBQyxDQUFDdkoscUJBQXFCO0FBRXZDLElBQUkwSixZQUFZLEVBQUU7QUFFbEIsSUFBSUMsV0FBVyxTQUFTQTtJQUN0QjNLLFNBQVM0SyxtQkFBbUIsQ0FBQyxvQkFBb0JEO0lBQ2pERSxTQUFTO0lBQ1RILFVBQVVuSCxHQUFHLENBQUMsU0FBVXVILEVBQUU7UUFDeEIsT0FBT0E7SUFDVDtBQUNGO0FBRUEsSUFBSUQsU0FBUztBQUViLElBQUl6SyxRQUFRO0lBQ1Z5SyxTQUFTLENBQUM3SyxTQUFTSyxlQUFlLENBQUMwSyxRQUFRLEdBQUcsZUFBZSxlQUFjLEVBQUduTSxJQUFJLENBQUNvQixTQUFTZ0wsVUFBVTtJQUN0RyxJQUFJLENBQUNILFFBQVE3SyxTQUFTTyxnQkFBZ0IsQ0FBQyxvQkFBb0JvSztBQUM3RDtBQUVBLFNBQVNNLFNBQVVILEVBQUU7SUFDbkIsSUFBSSxDQUFDMUssUUFBUTtJQUNieUssU0FBU0ssV0FBV0osSUFBSSxLQUFLSixVQUFVNVIsSUFBSSxDQUFDZ1M7QUFDOUM7QUFFQSxTQUFTSyxPQUFPQyxhQUFhO0lBQzNCLElBQUlDLE1BQU1ELGNBQWNDLEdBQUcsRUFDdkJDLHdCQUF3QkYsY0FBY3ZELFVBQVUsRUFDaERBLGFBQWF5RCwwQkFBMEIsS0FBSyxJQUFJLENBQUMsSUFBSUEsdUJBQ3JEQyx3QkFBd0JILGNBQWNJLFFBQVEsRUFDOUNBLFdBQVdELDBCQUEwQixLQUFLLElBQUksRUFBRSxHQUFHQTtJQUV2RCxJQUFJLE9BQU9ILGtCQUFrQixVQUFVO1FBQ3JDLE9BQU96RCxXQUFXeUQ7SUFDcEIsT0FBTztRQUNMLE9BQU8sSUFBSXRJLE1BQU0sQ0FBQ3VJLEtBQUssS0FBS3ZJLE1BQU0sQ0FBQzhFLGVBQWVDLGFBQWEsS0FBSy9FLE1BQU0sQ0FBQzBJLFNBQVNqSSxHQUFHLENBQUM0SCxRQUFRTSxJQUFJLENBQUMsS0FBSyxNQUFNM0ksTUFBTSxDQUFDdUksS0FBSztJQUM5SDtBQUNGO0FBRUEsU0FBU0ssZ0JBQWdCQyxPQUFPLEVBQUVDLE1BQU0sRUFBRUMsUUFBUTtJQUNoRCxJQUFJRixXQUFXQSxPQUFPLENBQUNDLE9BQU8sSUFBSUQsT0FBTyxDQUFDQyxPQUFPLENBQUNDLFNBQVMsRUFBRTtRQUMzRCxPQUFPO1lBQ0xELFFBQVFBO1lBQ1JDLFVBQVVBO1lBQ1ZDLE1BQU1ILE9BQU8sQ0FBQ0MsT0FBTyxDQUFDQyxTQUFTO1FBQ2pDO0lBQ0Y7QUFDRjtBQUVBOzs7Q0FHQyxHQUVELElBQUlFLGdCQUFnQixTQUFTQSxjQUFjQyxJQUFJLEVBQUVDLFdBQVc7SUFDMUQsT0FBTyxTQUFVQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFeEcsQ0FBQztRQUN6QixPQUFPb0csS0FBS3hRLElBQUksQ0FBQ3lRLGFBQWFDLEdBQUdDLEdBQUdDLEdBQUd4RztJQUN6QztBQUNGO0FBRUE7Ozs7Ozs7Ozs7Q0FVQyxHQUdELElBQUkxSyxTQUFTLFNBQVNtUixpQkFBaUJDLE9BQU8sRUFBRXhCLEVBQUUsRUFBRXlCLFlBQVksRUFBRU4sV0FBVztJQUMzRSxJQUFJM1QsT0FBT0MsT0FBT0QsSUFBSSxDQUFDZ1UsVUFDbkJsVCxTQUFTZCxLQUFLYyxNQUFNLEVBQ3BCVyxXQUFXa1MsZ0JBQWdCM0gsWUFBWXlILGNBQWNqQixJQUFJbUIsZUFBZW5CLElBQ3hFNVIsR0FDQUssS0FDQXlCO0lBRUosSUFBSXVSLGlCQUFpQmpJLFdBQVc7UUFDOUJwTCxJQUFJO1FBQ0o4QixTQUFTc1IsT0FBTyxDQUFDaFUsSUFBSSxDQUFDLEVBQUUsQ0FBQztJQUMzQixPQUFPO1FBQ0xZLElBQUk7UUFDSjhCLFNBQVN1UjtJQUNYO0lBRUEsTUFBT3JULElBQUlFLFFBQVFGLElBQUs7UUFDdEJLLE1BQU1qQixJQUFJLENBQUNZLEVBQUU7UUFDYjhCLFNBQVNqQixTQUFTaUIsUUFBUXNSLE9BQU8sQ0FBQy9TLElBQUksRUFBRUEsS0FBSytTO0lBQy9DO0lBRUEsT0FBT3RSO0FBQ1Q7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0F1QkMsR0FDRCxTQUFTd1IsV0FBV0MsTUFBTTtJQUN4QixJQUFJQyxTQUFTLEVBQUU7SUFDZixJQUFJQyxVQUFVO0lBQ2QsSUFBSXZULFNBQVNxVCxPQUFPclQsTUFBTTtJQUUxQixNQUFPdVQsVUFBVXZULE9BQVE7UUFDdkIsSUFBSXNELFFBQVErUCxPQUFPRyxVQUFVLENBQUNEO1FBRTlCLElBQUlqUSxTQUFTLFVBQVVBLFNBQVMsVUFBVWlRLFVBQVV2VCxRQUFRO1lBQzFELElBQUl5VCxRQUFRSixPQUFPRyxVQUFVLENBQUNEO1lBRTlCLElBQUksQ0FBQ0UsUUFBUSxNQUFLLEtBQU0sUUFBUTtnQkFDOUIsNkJBQTZCO2dCQUM3QkgsT0FBTzVULElBQUksQ0FBQyxDQUFDLENBQUM0RCxRQUFRLEtBQUksS0FBTSxFQUFDLElBQU1tUSxDQUFBQSxRQUFRLEtBQUksSUFBSztZQUMxRCxPQUFPO2dCQUNMSCxPQUFPNVQsSUFBSSxDQUFDNEQ7Z0JBQ1ppUTtZQUNGO1FBQ0YsT0FBTztZQUNMRCxPQUFPNVQsSUFBSSxDQUFDNEQ7UUFDZDtJQUNGO0lBRUEsT0FBT2dRO0FBQ1Q7QUFFQSxTQUFTSSxNQUFNQyxPQUFPO0lBQ3BCLElBQUlDLFVBQVVSLFdBQVdPO0lBQ3pCLE9BQU9DLFFBQVE1VCxNQUFNLEtBQUssSUFBSTRULE9BQU8sQ0FBQyxFQUFFLENBQUNyTyxRQUFRLENBQUMsTUFBTTtBQUMxRDtBQUNBLFNBQVNzTyxZQUFZUixNQUFNLEVBQUVTLEtBQUs7SUFDaEMsSUFBSXBILE9BQU8yRyxPQUFPclQsTUFBTTtJQUN4QixJQUFJK1QsUUFBUVYsT0FBT0csVUFBVSxDQUFDTTtJQUM5QixJQUFJRTtJQUVKLElBQUlELFNBQVMsVUFBVUEsU0FBUyxVQUFVckgsT0FBT29ILFFBQVEsR0FBRztRQUMxREUsU0FBU1gsT0FBT0csVUFBVSxDQUFDTSxRQUFRO1FBRW5DLElBQUlFLFVBQVUsVUFBVUEsVUFBVSxRQUFRO1lBQ3hDLE9BQU8sQ0FBQ0QsUUFBUSxNQUFLLElBQUssUUFBUUMsU0FBUyxTQUFTO1FBQ3REO0lBQ0Y7SUFFQSxPQUFPRDtBQUNUO0FBRUEsU0FBU0UsZUFBZUMsS0FBSztJQUMzQixPQUFPL1UsT0FBT0QsSUFBSSxDQUFDZ1YsT0FBT3BTLE1BQU0sQ0FBQyxTQUFVNE0sR0FBRyxFQUFFK0QsUUFBUTtRQUN0RCxJQUFJQyxPQUFPd0IsS0FBSyxDQUFDekIsU0FBUztRQUMxQixJQUFJMEIsV0FBVyxDQUFDLENBQUN6QixLQUFLQSxJQUFJO1FBRTFCLElBQUl5QixVQUFVO1lBQ1p6RixHQUFHLENBQUNnRSxLQUFLRCxRQUFRLENBQUMsR0FBR0MsS0FBS0EsSUFBSTtRQUNoQyxPQUFPO1lBQ0xoRSxHQUFHLENBQUMrRCxTQUFTLEdBQUdDO1FBQ2xCO1FBRUEsT0FBT2hFO0lBQ1QsR0FBRyxDQUFDO0FBQ047QUFFQSxTQUFTMEYsWUFBWTVCLE1BQU0sRUFBRTBCLEtBQUs7SUFDaEMsSUFBSUcsU0FBU3RVLFVBQVVDLE1BQU0sR0FBRyxLQUFLRCxTQUFTLENBQUMsRUFBRSxLQUFLbUwsWUFBWW5MLFNBQVMsQ0FBQyxFQUFFLEdBQUcsQ0FBQztJQUNsRixJQUFJdVUsb0JBQW9CRCxPQUFPRSxTQUFTLEVBQ3BDQSxZQUFZRCxzQkFBc0IsS0FBSyxJQUFJLFFBQVFBO0lBQ3ZELElBQUlFLGFBQWFQLGVBQWVDO0lBRWhDLElBQUksT0FBTzdDLFVBQVVMLEtBQUssQ0FBQ3lELE9BQU8sS0FBSyxjQUFjLENBQUNGLFdBQVc7UUFDL0RsRCxVQUFVTCxLQUFLLENBQUN5RCxPQUFPLENBQUNqQyxRQUFReUIsZUFBZUM7SUFDakQsT0FBTztRQUNMN0MsVUFBVXZDLE1BQU0sQ0FBQzBELE9BQU8sR0FBRzVTLGVBQWVBLGVBQWUsQ0FBQyxHQUFHeVIsVUFBVXZDLE1BQU0sQ0FBQzBELE9BQU8sSUFBSSxDQUFDLElBQUlnQztJQUNoRztJQUNBOzs7OztHQUtDLEdBR0QsSUFBSWhDLFdBQVcsT0FBTztRQUNwQjRCLFlBQVksTUFBTUY7SUFDcEI7QUFDRjtBQUVBLElBQUlRLGdCQUFnQjtJQUFDLFdBQVcsR0FBRTVULFlBQVksNERBQTREO1FBQ3hHNlQsSUFBSTtRQUNKQyxJQUFJO0lBQ047SUFBSSxXQUFXLEdBQUU5VCxZQUFZLG9IQUFvSDtRQUMvSStULE1BQU07UUFDTkYsSUFBSTtRQUNKRyxNQUFNO1FBQ05GLElBQUk7SUFDTjtJQUFJLFdBQVcsR0FBRTlULFlBQVksMkRBQTJEO1FBQ3RGK1QsTUFBTTtRQUNORixJQUFJO0lBQ047Q0FBRztBQUVILElBQUlJLGFBQWFDLFdBQVdDO0FBQzVCLElBQUluRyxTQUFTdUMsVUFBVXZDLE1BQU0sRUFDekJzQyxRQUFRQyxVQUFVRCxLQUFLO0FBQzNCLElBQUk4RCxhQUFjSCxDQUFBQSxjQUFjLENBQUMsR0FBRzNVLGdCQUFnQjJVLGFBQWFyTSxnQkFBZ0J2SixPQUFPZ1csTUFBTSxDQUFDak0sb0JBQW9CLENBQUNSLGVBQWUsSUFBSXRJLGdCQUFnQjJVLGFBQWFwTSxjQUFjeEosT0FBT2dXLE1BQU0sQ0FBQ2pNLG9CQUFvQixDQUFDUCxhQUFhLElBQUlvTSxXQUFVO0FBQ2hQLElBQUlLLHVCQUF1QjtBQUMzQixJQUFJQyxhQUFhLENBQUM7QUFDbEIsSUFBSUMsY0FBYyxDQUFDO0FBQ25CLElBQUlDLGFBQWEsQ0FBQztBQUNsQixJQUFJQyxnQkFBZ0IsQ0FBQztBQUNyQixJQUFJQyxXQUFXLENBQUM7QUFDaEIsSUFBSUMsV0FBWVYsQ0FBQUEsWUFBWSxDQUFDLEdBQUc1VSxnQkFBZ0I0VSxXQUFXdE0sZ0JBQWdCdkosT0FBT0QsSUFBSSxDQUFDOEosZUFBZSxDQUFDTixlQUFlLElBQUl0SSxnQkFBZ0I0VSxXQUFXck0sY0FBY3hKLE9BQU9ELElBQUksQ0FBQzhKLGVBQWUsQ0FBQ0wsYUFBYSxJQUFJcU0sU0FBUTtBQUV4TixTQUFTVyxXQUFXNVQsSUFBSTtJQUN0QixPQUFPLENBQUN1SSxpQkFBaUJoRCxPQUFPLENBQUN2RjtBQUNuQztBQUVBLFNBQVM2VCxZQUFZdEssU0FBUyxFQUFFdUssR0FBRztJQUNqQyxJQUFJQyxRQUFRRCxJQUFJdkgsS0FBSyxDQUFDO0lBQ3RCLElBQUlrRSxTQUFTc0QsS0FBSyxDQUFDLEVBQUU7SUFDckIsSUFBSXJELFdBQVdxRCxNQUFNclQsS0FBSyxDQUFDLEdBQUc0UCxJQUFJLENBQUM7SUFFbkMsSUFBSUcsV0FBV2xILGFBQWFtSCxhQUFhLE1BQU0sQ0FBQ2tELFdBQVdsRCxXQUFXO1FBQ3BFLE9BQU9BO0lBQ1QsT0FBTztRQUNMLE9BQU87SUFDVDtBQUNGO0FBQ0EsSUFBSXNELFFBQVEsU0FBU0E7SUFDbkIsSUFBSUMsU0FBUyxTQUFTQSxPQUFPQyxPQUFPO1FBQ2xDLE9BQU9uVSxPQUFPZ04sUUFBUSxTQUFVckwsQ0FBQyxFQUFFeUosS0FBSyxFQUFFc0YsTUFBTTtZQUM5Qy9PLENBQUMsQ0FBQytPLE9BQU8sR0FBRzFRLE9BQU9vTCxPQUFPK0ksU0FBUyxDQUFDO1lBQ3BDLE9BQU94UztRQUNULEdBQUcsQ0FBQztJQUNOO0lBRUE0UixhQUFhVyxPQUFPLFNBQVV0SCxHQUFHLEVBQUVnRSxJQUFJLEVBQUVELFFBQVE7UUFDL0MsSUFBSUMsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUNYaEUsR0FBRyxDQUFDZ0UsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHRDtRQUNqQjtRQUVBLElBQUlDLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDWCxJQUFJd0QsVUFBVXhELElBQUksQ0FBQyxFQUFFLENBQUNwVCxNQUFNLENBQUMsU0FBVXdULENBQUM7Z0JBQ3RDLE9BQU8sT0FBT0EsTUFBTTtZQUN0QjtZQUNBb0QsUUFBUWhXLE9BQU8sQ0FBQyxTQUFVaVcsS0FBSztnQkFDN0J6SCxHQUFHLENBQUN5SCxNQUFNNVEsUUFBUSxDQUFDLElBQUksR0FBR2tOO1lBQzVCO1FBQ0Y7UUFFQSxPQUFPL0Q7SUFDVDtJQUNBNEcsY0FBY1UsT0FBTyxTQUFVdEgsR0FBRyxFQUFFZ0UsSUFBSSxFQUFFRCxRQUFRO1FBQ2hEL0QsR0FBRyxDQUFDK0QsU0FBUyxHQUFHQTtRQUVoQixJQUFJQyxJQUFJLENBQUMsRUFBRSxFQUFFO1lBQ1gsSUFBSXdELFVBQVV4RCxJQUFJLENBQUMsRUFBRSxDQUFDcFQsTUFBTSxDQUFDLFNBQVV3VCxDQUFDO2dCQUN0QyxPQUFPLE9BQU9BLE1BQU07WUFDdEI7WUFDQW9ELFFBQVFoVyxPQUFPLENBQUMsU0FBVWlXLEtBQUs7Z0JBQzdCekgsR0FBRyxDQUFDeUgsTUFBTSxHQUFHMUQ7WUFDZjtRQUNGO1FBRUEsT0FBTy9EO0lBQ1Q7SUFDQStHLFdBQVdPLE9BQU8sU0FBVXRILEdBQUcsRUFBRWdFLElBQUksRUFBRUQsUUFBUTtRQUM3QyxJQUFJeUQsVUFBVXhELElBQUksQ0FBQyxFQUFFO1FBQ3JCaEUsR0FBRyxDQUFDK0QsU0FBUyxHQUFHQTtRQUNoQnlELFFBQVFoVyxPQUFPLENBQUMsU0FBVWlXLEtBQUs7WUFDN0J6SCxHQUFHLENBQUN5SCxNQUFNLEdBQUcxRDtRQUNmO1FBQ0EsT0FBTy9EO0lBQ1QsSUFBSSx3RUFBd0U7SUFDNUUsd0VBQXdFO0lBRXhFLElBQUkwSCxhQUFhLFNBQVN0SCxVQUFVM0MsT0FBT2tLLFlBQVk7SUFDdkQsSUFBSUMsY0FBY3hVLE9BQU9zUCxPQUFPLFNBQVUxQyxHQUFHLEVBQUU2SCxJQUFJO1FBQ2pELElBQUlDLHdCQUF3QkQsSUFBSSxDQUFDLEVBQUU7UUFDbkMsSUFBSS9ELFNBQVMrRCxJQUFJLENBQUMsRUFBRTtRQUNwQixJQUFJOUQsV0FBVzhELElBQUksQ0FBQyxFQUFFO1FBRXRCLElBQUkvRCxXQUFXLFNBQVMsQ0FBQzRELFlBQVk7WUFDbkM1RCxTQUFTO1FBQ1g7UUFFQSxJQUFJLE9BQU9nRSwwQkFBMEIsVUFBVTtZQUM3QzlILElBQUkrSCxLQUFLLENBQUNELHNCQUFzQixHQUFHO2dCQUNqQ2hFLFFBQVFBO2dCQUNSQyxVQUFVQTtZQUNaO1FBQ0Y7UUFFQSxJQUFJLE9BQU8rRCwwQkFBMEIsVUFBVTtZQUM3QzlILElBQUlnSSxRQUFRLENBQUNGLHNCQUFzQmpSLFFBQVEsQ0FBQyxJQUFJLEdBQUc7Z0JBQ2pEaU4sUUFBUUE7Z0JBQ1JDLFVBQVVBO1lBQ1o7UUFDRjtRQUVBLE9BQU8vRDtJQUNULEdBQUc7UUFDRCtILE9BQU8sQ0FBQztRQUNSQyxVQUFVLENBQUM7SUFDYjtJQUNBbkIsYUFBYWUsWUFBWUcsS0FBSztJQUM5QmpCLGdCQUFnQmMsWUFBWUksUUFBUTtJQUNwQ3RCLHVCQUF1QnVCLG1CQUFtQnhLLE9BQU9mLFlBQVksRUFBRTtRQUM3RHdMLFFBQVF6SyxPQUFPZCxhQUFhO0lBQzlCO0FBQ0Y7QUFDQWlCLFNBQVMsU0FBVTBHLENBQUM7SUFDbEJvQyx1QkFBdUJ1QixtQkFBbUIzRCxFQUFFNUgsWUFBWSxFQUFFO1FBQ3hEd0wsUUFBUXpLLE9BQU9kLGFBQWE7SUFDOUI7QUFDRjtBQUNBMEs7QUFDQSxTQUFTYyxVQUFVckUsTUFBTSxFQUFFbUIsT0FBTztJQUNoQyxPQUFPLENBQUMwQixVQUFVLENBQUM3QyxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUNtQixRQUFRO0FBQzVDO0FBQ0EsU0FBU21ELFdBQVd0RSxNQUFNLEVBQUV1RSxRQUFRO0lBQ2xDLE9BQU8sQ0FBQ3pCLFdBQVcsQ0FBQzlDLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQ3VFLFNBQVM7QUFDOUM7QUFDQSxTQUFTQyxRQUFReEUsTUFBTSxFQUFFMkQsS0FBSztJQUM1QixPQUFPLENBQUNWLFFBQVEsQ0FBQ2pELE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQzJELE1BQU07QUFDeEM7QUFDQSxTQUFTYyxVQUFVbFYsSUFBSTtJQUNyQixPQUFPd1QsVUFBVSxDQUFDeFQsS0FBSyxJQUFJO1FBQ3pCeVEsUUFBUTtRQUNSQyxVQUFVO0lBQ1o7QUFDRjtBQUNBLFNBQVN5RSxhQUFhdkQsT0FBTztJQUMzQixJQUFJd0QsYUFBYTNCLGFBQWEsQ0FBQzdCLFFBQVE7SUFDdkMsSUFBSXlELGFBQWFQLFVBQVUsT0FBT2xEO0lBQ2xDLE9BQU93RCxjQUFlQyxDQUFBQSxhQUFhO1FBQ2pDNUUsUUFBUTtRQUNSQyxVQUFVMkU7SUFDWixJQUFJLElBQUcsS0FBTTtRQUNYNUUsUUFBUTtRQUNSQyxVQUFVO0lBQ1o7QUFDRjtBQUNBLFNBQVM0RTtJQUNQLE9BQU9qQztBQUNUO0FBQ0EsSUFBSWtDLHFCQUFxQixTQUFTQTtJQUNoQyxPQUFPO1FBQ0w5RSxRQUFRO1FBQ1JDLFVBQVU7UUFDVjhFLE1BQU0sRUFBRTtJQUNWO0FBQ0Y7QUFDQSxTQUFTWixtQkFBbUJhLGFBQWE7SUFDdkMsSUFBSW5ELFNBQVN0VSxVQUFVQyxNQUFNLEdBQUcsS0FBS0QsU0FBUyxDQUFDLEVBQUUsS0FBS21MLFlBQVluTCxTQUFTLENBQUMsRUFBRSxHQUFHLENBQUM7SUFDbEYsSUFBSTBYLGlCQUFpQnBELE9BQU91QyxNQUFNLEVBQzlCQSxTQUFTYSxtQkFBbUIsS0FBSyxJQUFJL08saUJBQWlCK087SUFDMUQsSUFBSXZLLFFBQVFsRSxlQUFlLENBQUM0TixPQUFPLENBQUNZLGNBQWM7SUFDbEQsSUFBSWhGLFNBQVN2SixlQUFlLENBQUMyTixPQUFPLENBQUNZLGNBQWMsSUFBSXZPLGVBQWUsQ0FBQzJOLE9BQU8sQ0FBQzFKLE1BQU07SUFDckYsSUFBSXdLLFVBQVVGLGlCQUFpQm5HLFVBQVV2QyxNQUFNLEdBQUcwSSxnQkFBZ0I7SUFDbEUsT0FBT2hGLFVBQVVrRixXQUFXO0FBQzlCO0FBQ0EsSUFBSUMsc0JBQXVCMUMsQ0FBQUEsdUJBQXVCLENBQUMsR0FBRzdVLGdCQUFnQjZVLHNCQUFzQnZNLGdCQUFnQnZKLE9BQU9ELElBQUksQ0FBQ2dLLG9CQUFvQixDQUFDUixlQUFlLElBQUl0SSxnQkFBZ0I2VSxzQkFBc0J0TSxjQUFjeEosT0FBT0QsSUFBSSxDQUFDZ0ssb0JBQW9CLENBQUNQLGFBQWEsSUFBSXNNLG9CQUFtQjtBQUN6UixTQUFTMkMsaUJBQWlCekMsTUFBTTtJQUM5QixJQUFJMEM7SUFFSixJQUFJeEQsU0FBU3RVLFVBQVVDLE1BQU0sR0FBRyxLQUFLRCxTQUFTLENBQUMsRUFBRSxLQUFLbUwsWUFBWW5MLFNBQVMsQ0FBQyxFQUFFLEdBQUcsQ0FBQztJQUNsRixJQUFJK1gsc0JBQXNCekQsT0FBTzBELFdBQVcsRUFDeENBLGNBQWNELHdCQUF3QixLQUFLLElBQUksUUFBUUE7SUFDM0QsSUFBSUUsV0FBWUgsQ0FBQUEsWUFBWSxDQUFDLEdBQUd6WCxnQkFBZ0J5WCxXQUFXblAsZ0JBQWdCLEdBQUdnQixNQUFNLENBQUN5QyxPQUFPYixTQUFTLEVBQUUsS0FBSzVCLE1BQU0sQ0FBQ2hCLGtCQUFrQnRJLGdCQUFnQnlYLFdBQVdsUCxjQUFjLEdBQUdlLE1BQU0sQ0FBQ3lDLE9BQU9iLFNBQVMsRUFBRSxLQUFLNUIsTUFBTSxDQUFDZixnQkFBZ0JrUCxTQUFRO0lBQzlPLElBQUlJLGNBQWM7SUFDbEIsSUFBSXJCLFNBQVNsTztJQUViLElBQUl5TSxPQUFPK0MsUUFBUSxDQUFDRixRQUFRLENBQUN0UCxlQUFlLEtBQUt5TSxPQUFPZ0QsSUFBSSxDQUFDLFNBQVVDLENBQUM7UUFDdEUsT0FBT1QsbUJBQW1CLENBQUNqUCxlQUFlLENBQUN3UCxRQUFRLENBQUNFO0lBQ3RELElBQUk7UUFDRnhCLFNBQVNsTztJQUNYO0lBRUEsSUFBSXlNLE9BQU8rQyxRQUFRLENBQUNGLFFBQVEsQ0FBQ3JQLGFBQWEsS0FBS3dNLE9BQU9nRCxJQUFJLENBQUMsU0FBVUMsQ0FBQztRQUNwRSxPQUFPVCxtQkFBbUIsQ0FBQ2hQLGFBQWEsQ0FBQ3VQLFFBQVEsQ0FBQ0U7SUFDcEQsSUFBSTtRQUNGeEIsU0FBU2pPO0lBQ1g7SUFFQSxJQUFJMFAsWUFBWWxELE9BQU9yVCxNQUFNLENBQUMsU0FBVTRNLEdBQUcsRUFBRW1ILEdBQUc7UUFDOUMsSUFBSXBELFdBQVdtRCxZQUFZekosT0FBT2IsU0FBUyxFQUFFdUs7UUFFN0MsSUFBSS9HLE1BQU0sQ0FBQytHLElBQUksRUFBRTtZQUNmQSxNQUFNWCxVQUFVLENBQUMwQixPQUFPLENBQUNzQixRQUFRLENBQUNyQyxPQUFPMU0sb0JBQW9CLENBQUN5TixPQUFPLENBQUNmLElBQUksR0FBR0E7WUFDN0VvQyxjQUFjcEM7WUFDZG5ILElBQUk4RCxNQUFNLEdBQUdxRDtRQUNmLE9BQU8sSUFBSUgsUUFBUSxDQUFDa0IsT0FBTyxDQUFDdFAsT0FBTyxDQUFDdU8sT0FBTyxDQUFDLEdBQUc7WUFDN0NvQyxjQUFjcEM7WUFDZG5ILElBQUk4RCxNQUFNLEdBQUdtRSxtQkFBbUJkLEtBQUs7Z0JBQ25DZSxRQUFRQTtZQUNWO1FBQ0YsT0FBTyxJQUFJbkUsVUFBVTtZQUNuQi9ELElBQUkrRCxRQUFRLEdBQUdBO1FBQ2pCLE9BQU8sSUFBSW9ELFFBQVExSixPQUFPWixnQkFBZ0IsSUFBSXNLLFFBQVFtQyxRQUFRLENBQUN0UCxlQUFlLElBQUltTixRQUFRbUMsUUFBUSxDQUFDclAsYUFBYSxFQUFFO1lBQ2hIK0YsSUFBSTZJLElBQUksQ0FBQzdYLElBQUksQ0FBQ21XO1FBQ2hCO1FBRUEsSUFBSSxDQUFDa0MsZUFBZXJKLElBQUk4RCxNQUFNLElBQUk5RCxJQUFJK0QsUUFBUSxFQUFFO1lBQzlDLElBQUk4RCxPQUFPMEIsZ0JBQWdCLE9BQU9oQixVQUFVdkksSUFBSStELFFBQVEsSUFBSSxDQUFDO1lBQzdELElBQUk2RixnQkFBZ0J0QixRQUFRdEksSUFBSThELE1BQU0sRUFBRTlELElBQUkrRCxRQUFRO1lBRXBELElBQUk4RCxLQUFLL0QsTUFBTSxFQUFFO2dCQUNmeUYsY0FBYztZQUNoQjtZQUVBdkosSUFBSStELFFBQVEsR0FBRzhELEtBQUs5RCxRQUFRLElBQUk2RixpQkFBaUI1SixJQUFJK0QsUUFBUTtZQUM3RC9ELElBQUk4RCxNQUFNLEdBQUcrRCxLQUFLL0QsTUFBTSxJQUFJOUQsSUFBSThELE1BQU07WUFFdEMsSUFBSTlELElBQUk4RCxNQUFNLEtBQUssU0FBUyxDQUFDMUQsTUFBTSxDQUFDLE1BQU0sSUFBSUEsTUFBTSxDQUFDLE1BQU0sSUFBSSxDQUFDM0MsT0FBT2tLLFlBQVksRUFBRTtnQkFDbkYsK0VBQStFO2dCQUMvRSwyQ0FBMkM7Z0JBQzNDM0gsSUFBSThELE1BQU0sR0FBRztZQUNmO1FBQ0Y7UUFFQSxPQUFPOUQ7SUFDVCxHQUFHNEk7SUFFSCxJQUFJbkMsT0FBTytDLFFBQVEsQ0FBQyxnQkFBZ0IvQyxPQUFPK0MsUUFBUSxDQUFDLFFBQVE7UUFDMURHLFVBQVU3RixNQUFNLEdBQUc7SUFDckI7SUFFQSxJQUFJMkMsT0FBTytDLFFBQVEsQ0FBQyxpQkFBaUIvQyxPQUFPK0MsUUFBUSxDQUFDLFFBQVE7UUFDM0RHLFVBQVU3RixNQUFNLEdBQUc7SUFDckI7SUFFQSxJQUFJLENBQUM2RixVQUFVN0YsTUFBTSxJQUFJb0UsV0FBV2pPLGdCQUFpQm1HLENBQUFBLE1BQU0sQ0FBQyxPQUFPLElBQUkzQyxPQUFPa0ssWUFBWSxHQUFHO1FBQzNGZ0MsVUFBVTdGLE1BQU0sR0FBRztRQUNuQjZGLFVBQVU1RixRQUFRLEdBQUd1RSxRQUFRcUIsVUFBVTdGLE1BQU0sRUFBRTZGLFVBQVU1RixRQUFRLEtBQUs0RixVQUFVNUYsUUFBUTtJQUMxRjtJQUVBLElBQUk0RixVQUFVN0YsTUFBTSxLQUFLLFFBQVF5RixnQkFBZ0IsTUFBTTtRQUNyRCxnRkFBZ0Y7UUFDaEYsMENBQTBDO1FBQzFDSSxVQUFVN0YsTUFBTSxHQUFHNkUsNEJBQTRCO0lBQ2pEO0lBRUEsT0FBT2dCO0FBQ1Q7QUFFQSxJQUFJRSxVQUFVLFdBQVcsR0FBRTtJQUN6QixTQUFTQTtRQUNQN1YsZ0JBQWdCLElBQUksRUFBRTZWO1FBRXRCLElBQUksQ0FBQ0MsV0FBVyxHQUFHLENBQUM7SUFDdEI7SUFFQXJWLGFBQWFvVixTQUFTO1FBQUM7WUFDckJwWSxLQUFLO1lBQ0xtRCxPQUFPLFNBQVM4RztnQkFDZCxJQUFJN0ksUUFBUSxJQUFJO2dCQUVoQixJQUFLLElBQUlrWCxPQUFPMVksVUFBVUMsTUFBTSxFQUFFd1ksY0FBYyxJQUFJalUsTUFBTWtVLE9BQU9DLE9BQU8sR0FBR0EsT0FBT0QsTUFBTUMsT0FBUTtvQkFDOUZGLFdBQVcsQ0FBQ0UsS0FBSyxHQUFHM1ksU0FBUyxDQUFDMlksS0FBSztnQkFDckM7Z0JBRUEsSUFBSUMsWUFBWUgsWUFBWTFXLE1BQU0sQ0FBQyxJQUFJLENBQUM4VyxnQkFBZ0IsRUFBRSxDQUFDO2dCQUMzRHpaLE9BQU9ELElBQUksQ0FBQ3laLFdBQVd6WSxPQUFPLENBQUMsU0FBVUMsR0FBRztvQkFDMUNvQixNQUFNaVgsV0FBVyxDQUFDclksSUFBSSxHQUFHUCxlQUFlQSxlQUFlLENBQUMsR0FBRzJCLE1BQU1pWCxXQUFXLENBQUNyWSxJQUFJLElBQUksQ0FBQyxJQUFJd1ksU0FBUyxDQUFDeFksSUFBSTtvQkFDeEdpVSxZQUFZalUsS0FBS3dZLFNBQVMsQ0FBQ3hZLElBQUksR0FBRyxnSEFBZ0g7b0JBRWxKLElBQUkwWSxhQUFhM1Asb0JBQW9CLENBQUNSLGVBQWUsQ0FBQ3ZJLElBQUk7b0JBQzFELElBQUkwWSxZQUFZekUsWUFBWXlFLFlBQVlGLFNBQVMsQ0FBQ3hZLElBQUk7b0JBQ3RENFY7Z0JBQ0Y7WUFDRjtRQUNGO1FBQUc7WUFDRDVWLEtBQUs7WUFDTG1ELE9BQU8sU0FBU3dWO2dCQUNkLElBQUksQ0FBQ04sV0FBVyxHQUFHLENBQUM7WUFDdEI7UUFDRjtRQUFHO1lBQ0RyWSxLQUFLO1lBQ0xtRCxPQUFPLFNBQVNzVixpQkFBaUJELFNBQVMsRUFBRUksVUFBVTtnQkFDcEQsSUFBSXZFLGFBQWF1RSxXQUFXdkcsTUFBTSxJQUFJdUcsV0FBV3RHLFFBQVEsSUFBSXNHLFdBQVdyRyxJQUFJLEdBQUc7b0JBQzdFLEdBQUdxRztnQkFDTCxJQUFJQTtnQkFDSjVaLE9BQU9ELElBQUksQ0FBQ3NWLFlBQVlySyxHQUFHLENBQUMsU0FBVWhLLEdBQUc7b0JBQ3ZDLElBQUk2WSxrQkFBa0J4RSxVQUFVLENBQUNyVSxJQUFJLEVBQ2pDcVMsU0FBU3dHLGdCQUFnQnhHLE1BQU0sRUFDL0JDLFdBQVd1RyxnQkFBZ0J2RyxRQUFRLEVBQ25DQyxPQUFPc0csZ0JBQWdCdEcsSUFBSTtvQkFDL0IsSUFBSXdELFVBQVV4RCxJQUFJLENBQUMsRUFBRTtvQkFDckIsSUFBSSxDQUFDaUcsU0FBUyxDQUFDbkcsT0FBTyxFQUFFbUcsU0FBUyxDQUFDbkcsT0FBTyxHQUFHLENBQUM7b0JBRTdDLElBQUkwRCxRQUFRbFcsTUFBTSxHQUFHLEdBQUc7d0JBQ3RCa1csUUFBUWhXLE9BQU8sQ0FBQyxTQUFVaVcsS0FBSzs0QkFDN0IsSUFBSSxPQUFPQSxVQUFVLFVBQVU7Z0NBQzdCd0MsU0FBUyxDQUFDbkcsT0FBTyxDQUFDMkQsTUFBTSxHQUFHekQ7NEJBQzdCO3dCQUNGO29CQUNGO29CQUVBaUcsU0FBUyxDQUFDbkcsT0FBTyxDQUFDQyxTQUFTLEdBQUdDO2dCQUNoQztnQkFDQSxPQUFPaUc7WUFDVDtRQUNGO0tBQUU7SUFFRixPQUFPSjtBQUNUO0FBRUEsSUFBSVUsV0FBVyxFQUFFO0FBQ2pCLElBQUlDLFNBQVMsQ0FBQztBQUNkLElBQUlDLFlBQVksQ0FBQztBQUNqQixJQUFJQyxzQkFBc0JqYSxPQUFPRCxJQUFJLENBQUNpYTtBQUN0QyxTQUFTRSxnQkFBZ0JDLFdBQVcsRUFBRS9TLElBQUk7SUFDeEMsSUFBSTlGLE1BQU04RixLQUFLZ1QsU0FBUztJQUN4Qk4sV0FBV0s7SUFDWEosU0FBUyxDQUFDO0lBQ1YvWixPQUFPRCxJQUFJLENBQUNpYSxXQUFXalosT0FBTyxDQUFDLFNBQVVzWixDQUFDO1FBQ3hDLElBQUlKLG9CQUFvQjlSLE9BQU8sQ0FBQ2tTLE9BQU8sQ0FBQyxHQUFHO1lBQ3pDLE9BQU9MLFNBQVMsQ0FBQ0ssRUFBRTtRQUNyQjtJQUNGO0lBRUFQLFNBQVMvWSxPQUFPLENBQUMsU0FBVXVaLE1BQU07UUFDL0IsSUFBSTNJLFNBQVMySSxPQUFPM0ksTUFBTSxHQUFHMkksT0FBTzNJLE1BQU0sS0FBSyxDQUFDO1FBQ2hEM1IsT0FBT0QsSUFBSSxDQUFDNFIsUUFBUTVRLE9BQU8sQ0FBQyxTQUFVd1osRUFBRTtZQUN0QyxJQUFJLE9BQU81SSxNQUFNLENBQUM0SSxHQUFHLEtBQUssWUFBWTtnQkFDcENqWixHQUFHLENBQUNpWixHQUFHLEdBQUc1SSxNQUFNLENBQUM0SSxHQUFHO1lBQ3RCO1lBRUEsSUFBSWxaLFFBQVFzUSxNQUFNLENBQUM0SSxHQUFHLE1BQU0sVUFBVTtnQkFDcEN2YSxPQUFPRCxJQUFJLENBQUM0UixNQUFNLENBQUM0SSxHQUFHLEVBQUV4WixPQUFPLENBQUMsU0FBVXlaLEVBQUU7b0JBQzFDLElBQUksQ0FBQ2xaLEdBQUcsQ0FBQ2laLEdBQUcsRUFBRTt3QkFDWmpaLEdBQUcsQ0FBQ2laLEdBQUcsR0FBRyxDQUFDO29CQUNiO29CQUVBalosR0FBRyxDQUFDaVosR0FBRyxDQUFDQyxHQUFHLEdBQUc3SSxNQUFNLENBQUM0SSxHQUFHLENBQUNDLEdBQUc7Z0JBQzlCO1lBQ0Y7UUFDRjtRQUVBLElBQUlGLE9BQU96SSxLQUFLLEVBQUU7WUFDaEIsSUFBSUEsUUFBUXlJLE9BQU96SSxLQUFLO1lBQ3hCN1IsT0FBT0QsSUFBSSxDQUFDOFIsT0FBTzlRLE9BQU8sQ0FBQyxTQUFVMFosSUFBSTtnQkFDdkMsSUFBSSxDQUFDVixNQUFNLENBQUNVLEtBQUssRUFBRTtvQkFDakJWLE1BQU0sQ0FBQ1UsS0FBSyxHQUFHLEVBQUU7Z0JBQ25CO2dCQUVBVixNQUFNLENBQUNVLEtBQUssQ0FBQ2xhLElBQUksQ0FBQ3NSLEtBQUssQ0FBQzRJLEtBQUs7WUFDL0I7UUFDRjtRQUVBLElBQUlILE9BQU9JLFFBQVEsRUFBRTtZQUNuQkosT0FBT0ksUUFBUSxDQUFDVjtRQUNsQjtJQUNGO0lBRUEsT0FBTzFZO0FBQ1Q7QUFDQSxTQUFTcVosV0FBV0YsSUFBSSxFQUFFRyxXQUFXO0lBQ25DLElBQUssSUFBSXRCLE9BQU8xWSxVQUFVQyxNQUFNLEVBQUV3QyxPQUFPLElBQUkrQixNQUFNa1UsT0FBTyxJQUFJQSxPQUFPLElBQUksSUFBSUMsT0FBTyxHQUFHQSxPQUFPRCxNQUFNQyxPQUFRO1FBQzFHbFcsSUFBSSxDQUFDa1csT0FBTyxFQUFFLEdBQUczWSxTQUFTLENBQUMyWSxLQUFLO0lBQ2xDO0lBRUEsSUFBSXNCLFVBQVVkLE1BQU0sQ0FBQ1UsS0FBSyxJQUFJLEVBQUU7SUFDaENJLFFBQVE5WixPQUFPLENBQUMsU0FBVStaLE1BQU07UUFDOUJGLGNBQWNFLE9BQU90YSxLQUFLLENBQUMsTUFBTTtZQUFDb2E7U0FBWSxDQUFDclEsTUFBTSxDQUFDbEgsUUFBUSxzQ0FBc0M7SUFDdEc7SUFDQSxPQUFPdVg7QUFDVDtBQUNBLFNBQVNHLFVBQVVOLElBQUk7SUFDckIsSUFBSyxJQUFJTyxRQUFRcGEsVUFBVUMsTUFBTSxFQUFFd0MsT0FBTyxJQUFJK0IsTUFBTTRWLFFBQVEsSUFBSUEsUUFBUSxJQUFJLElBQUlDLFFBQVEsR0FBR0EsUUFBUUQsT0FBT0MsUUFBUztRQUNqSDVYLElBQUksQ0FBQzRYLFFBQVEsRUFBRSxHQUFHcmEsU0FBUyxDQUFDcWEsTUFBTTtJQUNwQztJQUVBLElBQUlKLFVBQVVkLE1BQU0sQ0FBQ1UsS0FBSyxJQUFJLEVBQUU7SUFDaENJLFFBQVE5WixPQUFPLENBQUMsU0FBVStaLE1BQU07UUFDOUJBLE9BQU90YSxLQUFLLENBQUMsTUFBTTZDO0lBQ3JCO0lBQ0EsT0FBTzBJO0FBQ1Q7QUFDQSxTQUFTbVA7SUFDUCxJQUFJVCxPQUFPN1osU0FBUyxDQUFDLEVBQUU7SUFDdkIsSUFBSXlDLE9BQU8rQixNQUFNMUQsU0FBUyxDQUFDNEIsS0FBSyxDQUFDTCxJQUFJLENBQUNyQyxXQUFXO0lBQ2pELE9BQU9vWixTQUFTLENBQUNTLEtBQUssR0FBR1QsU0FBUyxDQUFDUyxLQUFLLENBQUNqYSxLQUFLLENBQUMsTUFBTTZDLFFBQVEwSTtBQUMvRDtBQUVBLFNBQVNvUCxtQkFBbUJDLFVBQVU7SUFDcEMsSUFBSUEsV0FBVy9ILE1BQU0sS0FBSyxNQUFNO1FBQzlCK0gsV0FBVy9ILE1BQU0sR0FBRztJQUN0QjtJQUVBLElBQUlDLFdBQVc4SCxXQUFXOUgsUUFBUTtJQUNsQyxJQUFJRCxTQUFTK0gsV0FBVy9ILE1BQU0sSUFBSTZFO0lBQ2xDLElBQUksQ0FBQzVFLFVBQVU7SUFDZkEsV0FBV3VFLFFBQVF4RSxRQUFRQyxhQUFhQTtJQUN4QyxPQUFPSCxnQkFBZ0JrSSxRQUFRaEMsV0FBVyxFQUFFaEcsUUFBUUMsYUFBYUgsZ0JBQWdCakIsVUFBVXZDLE1BQU0sRUFBRTBELFFBQVFDO0FBQzdHO0FBQ0EsSUFBSStILFVBQVUsSUFBSWpDO0FBQ2xCLElBQUlrQyxTQUFTLFNBQVNBO0lBQ3BCdE8sT0FBT1gsY0FBYyxHQUFHO0lBQ3hCVyxPQUFPUCxnQkFBZ0IsR0FBRztJQUMxQnNPLFVBQVU7QUFDWjtBQUNBLElBQUluSixNQUFNO0lBQ1IySixPQUFPLFNBQVNBO1FBQ2QsSUFBSXJHLFNBQVN0VSxVQUFVQyxNQUFNLEdBQUcsS0FBS0QsU0FBUyxDQUFDLEVBQUUsS0FBS21MLFlBQVluTCxTQUFTLENBQUMsRUFBRSxHQUFHLENBQUM7UUFFbEYsSUFBSWlILFFBQVE7WUFDVmtULFVBQVUsZUFBZTdGO1lBQ3pCZ0csYUFBYSxzQkFBc0JoRztZQUNuQyxPQUFPZ0csYUFBYSxTQUFTaEc7UUFDL0IsT0FBTztZQUNMLE9BQU9zRyxRQUFRQyxNQUFNLENBQUM7UUFDeEI7SUFDRjtJQUNBQyxPQUFPLFNBQVNBO1FBQ2QsSUFBSXhHLFNBQVN0VSxVQUFVQyxNQUFNLEdBQUcsS0FBS0QsU0FBUyxDQUFDLEVBQUUsS0FBS21MLFlBQVluTCxTQUFTLENBQUMsRUFBRSxHQUFHLENBQUM7UUFDbEYsSUFBSSthLHFCQUFxQnpHLE9BQU95RyxrQkFBa0I7UUFFbEQsSUFBSTNPLE9BQU9YLGNBQWMsS0FBSyxPQUFPO1lBQ25DVyxPQUFPWCxjQUFjLEdBQUc7UUFDMUI7UUFFQVcsT0FBT1AsZ0JBQWdCLEdBQUc7UUFDMUJpRyxTQUFTO1lBQ1BrSixZQUFZO2dCQUNWRCxvQkFBb0JBO1lBQ3RCO1lBQ0FaLFVBQVUsU0FBUzdGO1FBQ3JCO0lBQ0Y7QUFDRjtBQUNBLElBQUkyRyxRQUFRO0lBQ1Z0SSxNQUFNLFNBQVNBLEtBQUt1SSxLQUFLO1FBQ3ZCLElBQUlBLFVBQVUsTUFBTTtZQUNsQixPQUFPO1FBQ1Q7UUFFQSxJQUFJemEsUUFBUXlhLFdBQVcsWUFBWUEsTUFBTXpJLE1BQU0sSUFBSXlJLE1BQU14SSxRQUFRLEVBQUU7WUFDakUsT0FBTztnQkFDTEQsUUFBUXlJLE1BQU16SSxNQUFNO2dCQUNwQkMsVUFBVXVFLFFBQVFpRSxNQUFNekksTUFBTSxFQUFFeUksTUFBTXhJLFFBQVEsS0FBS3dJLE1BQU14SSxRQUFRO1lBQ25FO1FBQ0Y7UUFFQSxJQUFJbE8sTUFBTUMsT0FBTyxDQUFDeVcsVUFBVUEsTUFBTWpiLE1BQU0sS0FBSyxHQUFHO1lBQzlDLElBQUl5UyxXQUFXd0ksS0FBSyxDQUFDLEVBQUUsQ0FBQzNULE9BQU8sQ0FBQyxXQUFXLElBQUkyVCxLQUFLLENBQUMsRUFBRSxDQUFDeFksS0FBSyxDQUFDLEtBQUt3WSxLQUFLLENBQUMsRUFBRTtZQUMzRSxJQUFJekksU0FBU21FLG1CQUFtQnNFLEtBQUssQ0FBQyxFQUFFO1lBQ3hDLE9BQU87Z0JBQ0x6SSxRQUFRQTtnQkFDUkMsVUFBVXVFLFFBQVF4RSxRQUFRQyxhQUFhQTtZQUN6QztRQUNGO1FBRUEsSUFBSSxPQUFPd0ksVUFBVSxZQUFhQSxDQUFBQSxNQUFNM1QsT0FBTyxDQUFDLEdBQUdvQyxNQUFNLENBQUN5QyxPQUFPYixTQUFTLEVBQUUsUUFBUSxDQUFDLEtBQUsyUCxNQUFNQyxLQUFLLENBQUM5Uiw4QkFBNkIsR0FBSTtZQUNySSxJQUFJK1IsZ0JBQWdCdkQsaUJBQWlCcUQsTUFBTTNNLEtBQUssQ0FBQyxNQUFNO2dCQUNyRHlKLGFBQWE7WUFDZjtZQUNBLE9BQU87Z0JBQ0x2RixRQUFRMkksY0FBYzNJLE1BQU0sSUFBSTZFO2dCQUNoQzVFLFVBQVV1RSxRQUFRbUUsY0FBYzNJLE1BQU0sRUFBRTJJLGNBQWMxSSxRQUFRLEtBQUswSSxjQUFjMUksUUFBUTtZQUMzRjtRQUNGO1FBRUEsSUFBSSxPQUFPd0ksVUFBVSxVQUFVO1lBQzdCLElBQUlHLFVBQVUvRDtZQUVkLE9BQU87Z0JBQ0w3RSxRQUFRNEk7Z0JBQ1IzSSxVQUFVdUUsUUFBUW9FLFNBQVNILFVBQVVBO1lBQ3ZDO1FBQ0Y7SUFDRjtBQUNGO0FBQ0EsSUFBSUksTUFBTTtJQUNSWixRQUFRQTtJQUNSdE8sUUFBUUE7SUFDUjRFLEtBQUtBO0lBQ0xpSyxPQUFPQTtJQUNQUixTQUFTQTtJQUNURixvQkFBb0JBO0lBQ3BCdkksUUFBUUE7QUFDVjtBQUVBLElBQUlnSixjQUFjLFNBQVNBO0lBQ3pCLElBQUkxRyxTQUFTdFUsVUFBVUMsTUFBTSxHQUFHLEtBQUtELFNBQVMsQ0FBQyxFQUFFLEtBQUttTCxZQUFZbkwsU0FBUyxDQUFDLEVBQUUsR0FBRyxDQUFDO0lBQ2xGLElBQUl1Yix3QkFBd0JqSCxPQUFPeUcsa0JBQWtCLEVBQ2pEQSxxQkFBcUJRLDBCQUEwQixLQUFLLElBQUkxVSxXQUFXMFU7SUFDdkUsSUFBSSxDQUFDbmMsT0FBT0QsSUFBSSxDQUFDbVMsVUFBVXZDLE1BQU0sRUFBRTlPLE1BQU0sR0FBRyxLQUFLbU0sT0FBT2tLLFlBQVksS0FBS3JQLFVBQVVtRixPQUFPWCxjQUFjLEVBQUU2UCxJQUFJdEssR0FBRyxDQUFDMkosS0FBSyxDQUFDO1FBQ3RIdE0sTUFBTTBNO0lBQ1I7QUFDRjtBQUVBLFNBQVNTLFlBQVl4USxHQUFHLEVBQUV5USxlQUFlO0lBQ3ZDcmMsT0FBT29CLGNBQWMsQ0FBQ3dLLEtBQUssWUFBWTtRQUNyQ3RKLEtBQUsrWjtJQUNQO0lBQ0FyYyxPQUFPb0IsY0FBYyxDQUFDd0ssS0FBSyxRQUFRO1FBQ2pDdEosS0FBSyxTQUFTQTtZQUNaLE9BQU9zSixJQUFJMFEsUUFBUSxDQUFDdFIsR0FBRyxDQUFDLFNBQVUySSxDQUFDO2dCQUNqQyxPQUFPZixPQUFPZTtZQUNoQjtRQUNGO0lBQ0Y7SUFDQTNULE9BQU9vQixjQUFjLENBQUN3SyxLQUFLLFFBQVE7UUFDakN0SixLQUFLLFNBQVNBO1lBQ1osSUFBSSxDQUFDdUYsUUFBUTtZQUNiLElBQUkwVSxZQUFZOVUsU0FBU1EsYUFBYSxDQUFDO1lBQ3ZDc1UsVUFBVXRPLFNBQVMsR0FBR3JDLElBQUk0USxJQUFJO1lBQzlCLE9BQU9ELFVBQVV0SixRQUFRO1FBQzNCO0lBQ0Y7SUFDQSxPQUFPckg7QUFDVDtBQUVBLFNBQVM2USxPQUFRclYsSUFBSTtJQUNuQixJQUFJNkwsV0FBVzdMLEtBQUs2TCxRQUFRLEVBQ3hCeUosT0FBT3RWLEtBQUtzVixJQUFJLEVBQ2hCQyxPQUFPdlYsS0FBS3VWLElBQUksRUFDaEJyTixhQUFhbEksS0FBS2tJLFVBQVUsRUFDNUJLLFNBQVN2SSxLQUFLdUksTUFBTSxFQUNwQkcsWUFBWTFJLEtBQUswSSxTQUFTO0lBRTlCLElBQUlELHNCQUFzQkMsY0FBYzRNLEtBQUtFLEtBQUssSUFBSSxDQUFDRCxLQUFLQyxLQUFLLEVBQUU7UUFDakUsSUFBSWxNLFFBQVFnTSxLQUFLaE0sS0FBSyxFQUNsQkUsU0FBUzhMLEtBQUs5TCxNQUFNO1FBQ3hCLElBQUlpTSxTQUFTO1lBQ1hyUCxHQUFHa0QsUUFBUUUsU0FBUztZQUNwQm5ELEdBQUc7UUFDTDtRQUNBNkIsVUFBVSxDQUFDLFFBQVEsR0FBR0ksV0FBV2pQLGVBQWVBLGVBQWUsQ0FBQyxHQUFHa1AsU0FBUyxDQUFDLEdBQUc7WUFDOUUsb0JBQW9CLEdBQUdwRixNQUFNLENBQUNzUyxPQUFPclAsQ0FBQyxHQUFHc0MsVUFBVXRDLENBQUMsR0FBRyxJQUFJLE9BQU9qRCxNQUFNLENBQUNzUyxPQUFPcFAsQ0FBQyxHQUFHcUMsVUFBVXJDLENBQUMsR0FBRyxJQUFJO1FBQ3hHO0lBQ0Y7SUFFQSxPQUFPO1FBQUM7WUFDTnFGLEtBQUs7WUFDTHhELFlBQVlBO1lBQ1oyRCxVQUFVQTtRQUNaO0tBQUU7QUFDSjtBQUVBLFNBQVM2SixTQUFVMVYsSUFBSTtJQUNyQixJQUFJaU0sU0FBU2pNLEtBQUtpTSxNQUFNLEVBQ3BCQyxXQUFXbE0sS0FBS2tNLFFBQVEsRUFDeEJMLFdBQVc3TCxLQUFLNkwsUUFBUSxFQUN4QjNELGFBQWFsSSxLQUFLa0ksVUFBVSxFQUM1QnlOLFNBQVMzVixLQUFLMlYsTUFBTTtJQUN4QixJQUFJcE8sS0FBS29PLFdBQVcsT0FBTyxHQUFHeFMsTUFBTSxDQUFDOEksUUFBUSxLQUFLOUksTUFBTSxDQUFDeUMsT0FBT2IsU0FBUyxFQUFFLEtBQUs1QixNQUFNLENBQUMrSSxZQUFZeUo7SUFDbkcsT0FBTztRQUFDO1lBQ05qSyxLQUFLO1lBQ0x4RCxZQUFZO2dCQUNWdkIsT0FBTztZQUNUO1lBQ0FrRixVQUFVO2dCQUFDO29CQUNUSCxLQUFLO29CQUNMeEQsWUFBWTdPLGVBQWVBLGVBQWUsQ0FBQyxHQUFHNk8sYUFBYSxDQUFDLEdBQUc7d0JBQzdEWCxJQUFJQTtvQkFDTjtvQkFDQXNFLFVBQVVBO2dCQUNaO2FBQUU7UUFDSjtLQUFFO0FBQ0o7QUFFQSxTQUFTK0osc0JBQXNCOUgsTUFBTTtJQUNuQyxJQUFJK0gsZ0JBQWdCL0gsT0FBT0gsS0FBSyxFQUM1QjJILE9BQU9PLGNBQWNQLElBQUksRUFDekJDLE9BQU9NLGNBQWNOLElBQUksRUFDekJ0SixTQUFTNkIsT0FBTzdCLE1BQU0sRUFDdEJDLFdBQVc0QixPQUFPNUIsUUFBUSxFQUMxQnhELFlBQVlvRixPQUFPcEYsU0FBUyxFQUM1QmlOLFNBQVM3SCxPQUFPNkgsTUFBTSxFQUN0QkcsUUFBUWhJLE9BQU9nSSxLQUFLLEVBQ3BCQyxTQUFTakksT0FBT2lJLE1BQU0sRUFDdEJDLFVBQVVsSSxPQUFPa0ksT0FBTyxFQUN4QjlJLFFBQVFZLE9BQU9aLEtBQUssRUFDcEIrSSxvQkFBb0JuSSxPQUFPb0ksU0FBUyxFQUNwQ0EsWUFBWUQsc0JBQXNCLEtBQUssSUFBSSxRQUFRQTtJQUV2RCxJQUFJalcsT0FBT3VWLEtBQUtDLEtBQUssR0FBR0QsT0FBT0QsTUFDM0JoTSxRQUFRdEosS0FBS3NKLEtBQUssRUFDbEJFLFNBQVN4SixLQUFLd0osTUFBTTtJQUV4QixJQUFJMk0saUJBQWlCbEssV0FBVztJQUNoQyxJQUFJbUssWUFBWTtRQUFDeFEsT0FBT1osZ0JBQWdCO1FBQUVrSCxXQUFXLEdBQUcvSSxNQUFNLENBQUN5QyxPQUFPYixTQUFTLEVBQUUsS0FBSzVCLE1BQU0sQ0FBQytJLFlBQVk7S0FBRyxDQUFDblQsTUFBTSxDQUFDLFNBQVUwVCxDQUFDO1FBQzdILE9BQU9TLE1BQU1tSixPQUFPLENBQUN0VixPQUFPLENBQUMwTCxPQUFPLENBQUM7SUFDdkMsR0FBRzFULE1BQU0sQ0FBQyxTQUFVMFQsQ0FBQztRQUNuQixPQUFPQSxNQUFNLE1BQU0sQ0FBQyxDQUFDQTtJQUN2QixHQUFHdEosTUFBTSxDQUFDK0osTUFBTW1KLE9BQU8sRUFBRXZLLElBQUksQ0FBQztJQUM5QixJQUFJd0ssVUFBVTtRQUNaekssVUFBVSxFQUFFO1FBQ1ozRCxZQUFZN08sZUFBZUEsZUFBZSxDQUFDLEdBQUc2VCxNQUFNaEYsVUFBVSxHQUFHLENBQUMsR0FBRztZQUNuRSxlQUFlK0Q7WUFDZixhQUFhQztZQUNiLFNBQVNrSztZQUNULFFBQVFsSixNQUFNaEYsVUFBVSxDQUFDcU8sSUFBSSxJQUFJO1lBQ2pDLFNBQVM7WUFDVCxXQUFXLE9BQU9wVCxNQUFNLENBQUNtRyxPQUFPLEtBQUtuRyxNQUFNLENBQUNxRztRQUM5QztJQUNGO0lBQ0EsSUFBSWdOLHlCQUF5Qkwsa0JBQWtCLENBQUMsQ0FBQ2pKLE1BQU1tSixPQUFPLENBQUN0VixPQUFPLENBQUMsV0FBVztRQUNoRnVJLE9BQU8sR0FBR25HLE1BQU0sQ0FBQ21HLFFBQVFFLFNBQVMsS0FBSyxRQUFRO0lBQ2pELElBQUksQ0FBQztJQUVMLElBQUkwTSxXQUFXO1FBQ2JJLFFBQVFwTyxVQUFVLENBQUN6RyxjQUFjLEdBQUc7SUFDdEM7SUFFQSxJQUFJcVUsT0FBTztRQUNUUSxRQUFRekssUUFBUSxDQUFDMVMsSUFBSSxDQUFDO1lBQ3BCdVMsS0FBSztZQUNMeEQsWUFBWTtnQkFDVlgsSUFBSStPLFFBQVFwTyxVQUFVLENBQUMsa0JBQWtCLElBQUksU0FBUy9FLE1BQU0sQ0FBQzZTLFdBQVcxTztZQUMxRTtZQUNBdUUsVUFBVTtnQkFBQ2lLO2FBQU07UUFDbkI7UUFDQSxPQUFPUSxRQUFRcE8sVUFBVSxDQUFDNE4sS0FBSztJQUNqQztJQUVBLElBQUk3WixPQUFPNUMsZUFBZUEsZUFBZSxDQUFDLEdBQUdpZCxVQUFVLENBQUMsR0FBRztRQUN6RHJLLFFBQVFBO1FBQ1JDLFVBQVVBO1FBQ1ZvSixNQUFNQTtRQUNOQyxNQUFNQTtRQUNOUSxRQUFRQTtRQUNSck4sV0FBV0E7UUFDWGlOLFFBQVFBO1FBQ1JwTixRQUFRbFAsZUFBZUEsZUFBZSxDQUFDLEdBQUdtZCx5QkFBeUJ0SixNQUFNM0UsTUFBTTtJQUNqRjtJQUVBLElBQUk3RCxRQUFRNlEsS0FBS0MsS0FBSyxJQUFJRixLQUFLRSxLQUFLLEdBQUcxQixhQUFhLHdCQUF3QjdYLFNBQVM7UUFDbkY0UCxVQUFVLEVBQUU7UUFDWjNELFlBQVksQ0FBQztJQUNmLElBQUk0TCxhQUFhLHdCQUF3QjdYLFNBQVM7UUFDaEQ0UCxVQUFVLEVBQUU7UUFDWjNELFlBQVksQ0FBQztJQUNmLEdBQ0kyRCxXQUFXbkgsTUFBTW1ILFFBQVEsRUFDekIzRCxhQUFheEQsTUFBTXdELFVBQVU7SUFFakNqTSxLQUFLNFAsUUFBUSxHQUFHQTtJQUNoQjVQLEtBQUtpTSxVQUFVLEdBQUdBO0lBRWxCLElBQUl5TixRQUFRO1FBQ1YsT0FBT0QsU0FBU3paO0lBQ2xCLE9BQU87UUFDTCxPQUFPb1osT0FBT3BaO0lBQ2hCO0FBQ0Y7QUFDQSxTQUFTd2EsdUJBQXVCM0ksTUFBTTtJQUNwQyxJQUFJd0ksVUFBVXhJLE9BQU93SSxPQUFPLEVBQ3hCaE4sUUFBUXdFLE9BQU94RSxLQUFLLEVBQ3BCRSxTQUFTc0UsT0FBT3RFLE1BQU0sRUFDdEJkLFlBQVlvRixPQUFPcEYsU0FBUyxFQUM1Qm9OLFFBQVFoSSxPQUFPZ0ksS0FBSyxFQUNwQjVJLFFBQVFZLE9BQU9aLEtBQUssRUFDcEJ3SixxQkFBcUI1SSxPQUFPb0ksU0FBUyxFQUNyQ0EsWUFBWVEsdUJBQXVCLEtBQUssSUFBSSxRQUFRQTtJQUV4RCxJQUFJeE8sYUFBYTdPLGVBQWVBLGVBQWVBLGVBQWUsQ0FBQyxHQUFHNlQsTUFBTWhGLFVBQVUsR0FBRzROLFFBQVE7UUFDM0YsU0FBU0E7SUFDWCxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUc7UUFDWCxTQUFTNUksTUFBTW1KLE9BQU8sQ0FBQ3ZLLElBQUksQ0FBQztJQUM5QjtJQUVBLElBQUlvSyxXQUFXO1FBQ2JoTyxVQUFVLENBQUN6RyxjQUFjLEdBQUc7SUFDOUI7SUFFQSxJQUFJOEcsU0FBU2xQLGVBQWUsQ0FBQyxHQUFHNlQsTUFBTTNFLE1BQU07SUFFNUMsSUFBSUUsc0JBQXNCQyxZQUFZO1FBQ3BDSCxNQUFNLENBQUMsWUFBWSxHQUFHYSxnQkFBZ0I7WUFDcENWLFdBQVdBO1lBQ1hnQixlQUFlO1lBQ2ZKLE9BQU9BO1lBQ1BFLFFBQVFBO1FBQ1Y7UUFDQWpCLE1BQU0sQ0FBQyxvQkFBb0IsR0FBR0EsTUFBTSxDQUFDLFlBQVk7SUFDbkQ7SUFFQSxJQUFJb08sY0FBY3JPLFdBQVdDO0lBRTdCLElBQUlvTyxZQUFZbGQsTUFBTSxHQUFHLEdBQUc7UUFDMUJ5TyxVQUFVLENBQUMsUUFBUSxHQUFHeU87SUFDeEI7SUFFQSxJQUFJblMsTUFBTSxFQUFFO0lBQ1pBLElBQUlyTCxJQUFJLENBQUM7UUFDUHVTLEtBQUs7UUFDTHhELFlBQVlBO1FBQ1oyRCxVQUFVO1lBQUN5SztTQUFRO0lBQ3JCO0lBRUEsSUFBSVIsT0FBTztRQUNUdFIsSUFBSXJMLElBQUksQ0FBQztZQUNQdVMsS0FBSztZQUNMeEQsWUFBWTtnQkFDVjBPLE9BQU87WUFDVDtZQUNBL0ssVUFBVTtnQkFBQ2lLO2FBQU07UUFDbkI7SUFDRjtJQUVBLE9BQU90UjtBQUNUO0FBQ0EsU0FBU3FTLDBCQUEwQi9JLE1BQU07SUFDdkMsSUFBSXdJLFVBQVV4SSxPQUFPd0ksT0FBTyxFQUN4QlIsUUFBUWhJLE9BQU9nSSxLQUFLLEVBQ3BCNUksUUFBUVksT0FBT1osS0FBSztJQUV4QixJQUFJaEYsYUFBYTdPLGVBQWVBLGVBQWVBLGVBQWUsQ0FBQyxHQUFHNlQsTUFBTWhGLFVBQVUsR0FBRzROLFFBQVE7UUFDM0YsU0FBU0E7SUFDWCxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUc7UUFDWCxTQUFTNUksTUFBTW1KLE9BQU8sQ0FBQ3ZLLElBQUksQ0FBQztJQUM5QjtJQUVBLElBQUk2SyxjQUFjck8sV0FBVzRFLE1BQU0zRSxNQUFNO0lBRXpDLElBQUlvTyxZQUFZbGQsTUFBTSxHQUFHLEdBQUc7UUFDMUJ5TyxVQUFVLENBQUMsUUFBUSxHQUFHeU87SUFDeEI7SUFFQSxJQUFJblMsTUFBTSxFQUFFO0lBQ1pBLElBQUlyTCxJQUFJLENBQUM7UUFDUHVTLEtBQUs7UUFDTHhELFlBQVlBO1FBQ1oyRCxVQUFVO1lBQUN5SztTQUFRO0lBQ3JCO0lBRUEsSUFBSVIsT0FBTztRQUNUdFIsSUFBSXJMLElBQUksQ0FBQztZQUNQdVMsS0FBSztZQUNMeEQsWUFBWTtnQkFDVjBPLE9BQU87WUFDVDtZQUNBL0ssVUFBVTtnQkFBQ2lLO2FBQU07UUFDbkI7SUFDRjtJQUVBLE9BQU90UjtBQUNUO0FBRUEsSUFBSXNTLFdBQVdoTSxVQUFVdkMsTUFBTTtBQUMvQixTQUFTd08sWUFBWTVLLElBQUk7SUFDdkIsSUFBSTdDLFFBQVE2QyxJQUFJLENBQUMsRUFBRTtJQUNuQixJQUFJM0MsU0FBUzJDLElBQUksQ0FBQyxFQUFFO0lBRXBCLElBQUk2SyxjQUFjN0ssS0FBS2pRLEtBQUssQ0FBQyxJQUN6QithLGVBQWUzWixlQUFlMFosYUFBYSxJQUMzQ0UsYUFBYUQsWUFBWSxDQUFDLEVBQUU7SUFFaEMsSUFBSTdTLFVBQVU7SUFFZCxJQUFJcEcsTUFBTUMsT0FBTyxDQUFDaVosYUFBYTtRQUM3QjlTLFVBQVU7WUFDUnNILEtBQUs7WUFDTHhELFlBQVk7Z0JBQ1YwTyxPQUFPLEdBQUd6VCxNQUFNLENBQUN5QyxPQUFPYixTQUFTLEVBQUUsS0FBSzVCLE1BQU0sQ0FBQ0UsZ0JBQWdCQyxLQUFLO1lBQ3RFO1lBQ0F1SSxVQUFVO2dCQUFDO29CQUNUSCxLQUFLO29CQUNMeEQsWUFBWTt3QkFDVjBPLE9BQU8sR0FBR3pULE1BQU0sQ0FBQ3lDLE9BQU9iLFNBQVMsRUFBRSxLQUFLNUIsTUFBTSxDQUFDRSxnQkFBZ0JJLFNBQVM7d0JBQ3hFMFQsTUFBTTt3QkFDTmxSLEdBQUdpUixVQUFVLENBQUMsRUFBRTtvQkFDbEI7Z0JBQ0Y7Z0JBQUc7b0JBQ0R4TCxLQUFLO29CQUNMeEQsWUFBWTt3QkFDVjBPLE9BQU8sR0FBR3pULE1BQU0sQ0FBQ3lDLE9BQU9iLFNBQVMsRUFBRSxLQUFLNUIsTUFBTSxDQUFDRSxnQkFBZ0JHLE9BQU87d0JBQ3RFMlQsTUFBTTt3QkFDTmxSLEdBQUdpUixVQUFVLENBQUMsRUFBRTtvQkFDbEI7Z0JBQ0Y7YUFBRTtRQUNKO0lBQ0YsT0FBTztRQUNMOVMsVUFBVTtZQUNSc0gsS0FBSztZQUNMeEQsWUFBWTtnQkFDVmlQLE1BQU07Z0JBQ05sUixHQUFHaVI7WUFDTDtRQUNGO0lBQ0Y7SUFFQSxPQUFPO1FBQ0wxQixPQUFPO1FBQ1BsTSxPQUFPQTtRQUNQRSxRQUFRQTtRQUNSMkMsTUFBTS9IO0lBQ1I7QUFDRjtBQUNBLElBQUlnVCw2QkFBNkI7SUFDL0I1QixPQUFPO0lBQ1BsTSxPQUFPO0lBQ1BFLFFBQVE7QUFDVjtBQUVBLFNBQVM2TixtQkFBbUJuTCxRQUFRLEVBQUVELE1BQU07SUFDMUMsSUFBSSxDQUFDaEssY0FBYyxDQUFDMkQsT0FBT0gsZ0JBQWdCLElBQUl5RyxVQUFVO1FBQ3ZEb0wsUUFBUUMsS0FBSyxDQUFDLG1CQUFvQnBVLE1BQU0sQ0FBQytJLFVBQVUsa0JBQW9CL0ksTUFBTSxDQUFDOEksUUFBUTtJQUN4RjtBQUNGO0FBRUEsU0FBU3VMLFNBQVN0TCxRQUFRLEVBQUVELE1BQU07SUFDaEMsSUFBSXlGLGNBQWN6RjtJQUVsQixJQUFJQSxXQUFXLFFBQVFyRyxPQUFPZixZQUFZLEtBQUssTUFBTTtRQUNuRG9ILFNBQVM2RTtJQUNYO0lBRUEsT0FBTyxJQUFJc0QsUUFBUSxTQUFVcUQsT0FBTyxFQUFFcEQsTUFBTTtRQUMxQyxJQUFJN1AsTUFBTTtZQUNSZ1IsT0FBTztZQUNQbE0sT0FBTztZQUNQRSxRQUFRO1lBQ1IyQyxNQUFNMkgsYUFBYSwwQkFBMEIsQ0FBQztRQUNoRDtRQUVBLElBQUlwQyxnQkFBZ0IsTUFBTTtZQUN4QixJQUFJMUIsT0FBT1UsVUFBVXhFLGFBQWEsQ0FBQztZQUNuQ0EsV0FBVzhELEtBQUs5RCxRQUFRLElBQUlBO1lBQzVCRCxTQUFTK0QsS0FBSy9ELE1BQU0sSUFBSUE7UUFDMUI7UUFFQSxJQUFJQyxZQUFZRCxVQUFVNkssUUFBUSxDQUFDN0ssT0FBTyxJQUFJNkssUUFBUSxDQUFDN0ssT0FBTyxDQUFDQyxTQUFTLEVBQUU7WUFDeEUsSUFBSUMsT0FBTzJLLFFBQVEsQ0FBQzdLLE9BQU8sQ0FBQ0MsU0FBUztZQUNyQyxPQUFPdUwsUUFBUVYsWUFBWTVLO1FBQzdCO1FBRUFrTCxtQkFBbUJuTCxVQUFVRDtRQUM3QndMLFFBQVFwZSxlQUFlQSxlQUFlLENBQUMsR0FBRytkLDZCQUE2QixDQUFDLEdBQUc7WUFDekVqTCxNQUFNdkcsT0FBT0gsZ0JBQWdCLElBQUl5RyxXQUFXNEgsYUFBYSwwQkFBMEIsQ0FBQyxJQUFJLENBQUM7UUFDM0Y7SUFDRjtBQUNGO0FBRUEsSUFBSTRELFNBQVMsU0FBU3RZLFFBQVE7QUFFOUIsSUFBSWpDLElBQUl5SSxPQUFPSixrQkFBa0IsSUFBSWpGLGVBQWVBLFlBQVlkLElBQUksSUFBSWMsWUFBWWIsT0FBTyxHQUFHYSxjQUFjO0lBQzFHZCxNQUFNaVk7SUFDTmhZLFNBQVNnWTtBQUNYO0FBQ0EsSUFBSUMsV0FBVztBQUVmLElBQUlDLFFBQVEsU0FBU0EsTUFBTXBjLElBQUk7SUFDN0IyQixFQUFFc0MsSUFBSSxDQUFDLEdBQUcwRCxNQUFNLENBQUN3VSxVQUFVLEtBQUt4VSxNQUFNLENBQUMzSCxNQUFNO0lBQzdDLE9BQU87UUFDTCxPQUFPcWMsSUFBSXJjO0lBQ2I7QUFDRjtBQUVBLElBQUlxYyxNQUFNLFNBQVNBLElBQUlyYyxJQUFJO0lBQ3pCMkIsRUFBRXNDLElBQUksQ0FBQyxHQUFHMEQsTUFBTSxDQUFDd1UsVUFBVSxLQUFLeFUsTUFBTSxDQUFDM0gsTUFBTTtJQUM3QzJCLEVBQUV1QyxPQUFPLENBQUMsR0FBR3lELE1BQU0sQ0FBQ3dVLFVBQVUsS0FBS3hVLE1BQU0sQ0FBQzNILE9BQU8sR0FBRzJILE1BQU0sQ0FBQ3dVLFVBQVUsS0FBS3hVLE1BQU0sQ0FBQzNILE1BQU0sWUFBWSxHQUFHMkgsTUFBTSxDQUFDd1UsVUFBVSxLQUFLeFUsTUFBTSxDQUFDM0gsTUFBTTtBQUMzSTtBQUVBLElBQUlzYyxPQUFPO0lBQ1RGLE9BQU9BO0lBQ1BDLEtBQUtBO0FBQ1A7QUFFQSxJQUFJRSxTQUFTLFNBQVMzWSxRQUFRO0FBRTlCLFNBQVM0WSxVQUFVblEsSUFBSTtJQUNyQixJQUFJc00sUUFBUXRNLEtBQUt2RCxZQUFZLEdBQUd1RCxLQUFLdkQsWUFBWSxDQUFDN0MsaUJBQWlCO0lBQ25FLE9BQU8sT0FBTzBTLFVBQVU7QUFDMUI7QUFFQSxTQUFTOEQsaUJBQWlCcFEsSUFBSTtJQUM1QixJQUFJb0UsU0FBU3BFLEtBQUt2RCxZQUFZLEdBQUd1RCxLQUFLdkQsWUFBWSxDQUFDMUMsZUFBZTtJQUNsRSxJQUFJdUssT0FBT3RFLEtBQUt2RCxZQUFZLEdBQUd1RCxLQUFLdkQsWUFBWSxDQUFDekMsYUFBYTtJQUM5RCxPQUFPb0ssVUFBVUU7QUFDbkI7QUFFQSxTQUFTK0wsZ0JBQWdCclEsSUFBSTtJQUMzQixPQUFPQSxRQUFRQSxLQUFLQyxTQUFTLElBQUlELEtBQUtDLFNBQVMsQ0FBQ3FRLFFBQVEsSUFBSXRRLEtBQUtDLFNBQVMsQ0FBQ3FRLFFBQVEsQ0FBQ3ZTLE9BQU9aLGdCQUFnQjtBQUM3RztBQUVBLFNBQVNvVDtJQUNQLElBQUl4UyxPQUFPWCxjQUFjLEtBQUssTUFBTTtRQUNsQyxPQUFPb1QsU0FBU3ZjLE9BQU87SUFDekI7SUFFQSxJQUFJd2MsVUFBVUQsUUFBUSxDQUFDelMsT0FBT1gsY0FBYyxDQUFDO0lBQzdDLE9BQU9xVCxXQUFXRCxTQUFTdmMsT0FBTztBQUNwQztBQUVBLFNBQVN5YyxnQkFBZ0I3TSxHQUFHO0lBQzFCLE9BQU9yTCxTQUFTa1ksZUFBZSxDQUFDLDhCQUE4QjdNO0FBQ2hFO0FBRUEsU0FBUzdLLGNBQWM2SyxHQUFHO0lBQ3hCLE9BQU9yTCxTQUFTUSxhQUFhLENBQUM2SztBQUNoQztBQUVBLFNBQVM4TSxXQUFXQyxXQUFXO0lBQzdCLElBQUkzSyxTQUFTdFUsVUFBVUMsTUFBTSxHQUFHLEtBQUtELFNBQVMsQ0FBQyxFQUFFLEtBQUttTCxZQUFZbkwsU0FBUyxDQUFDLEVBQUUsR0FBRyxDQUFDO0lBQ2xGLElBQUlrZixlQUFlNUssT0FBTzZLLElBQUksRUFDMUJBLE9BQU9ELGlCQUFpQixLQUFLLElBQUlELFlBQVkvTSxHQUFHLEtBQUssUUFBUTZNLGtCQUFrQjFYLGdCQUFnQjZYO0lBRW5HLElBQUksT0FBT0QsZ0JBQWdCLFVBQVU7UUFDbkMsT0FBT3BZLFNBQVN1WSxjQUFjLENBQUNIO0lBQ2pDO0lBRUEsSUFBSS9NLE1BQU1pTixLQUFLRixZQUFZL00sR0FBRztJQUM5QjlTLE9BQU9ELElBQUksQ0FBQzhmLFlBQVl2USxVQUFVLElBQUksRUFBRSxFQUFFdk8sT0FBTyxDQUFDLFNBQVVDLEdBQUc7UUFDN0Q4UixJQUFJOUUsWUFBWSxDQUFDaE4sS0FBSzZlLFlBQVl2USxVQUFVLENBQUN0TyxJQUFJO0lBQ25EO0lBQ0EsSUFBSWlTLFdBQVc0TSxZQUFZNU0sUUFBUSxJQUFJLEVBQUU7SUFDekNBLFNBQVNsUyxPQUFPLENBQUMsU0FBVXNOLEtBQUs7UUFDOUJ5RSxJQUFJbU4sV0FBVyxDQUFDTCxXQUFXdlIsT0FBTztZQUNoQzBSLE1BQU1BO1FBQ1I7SUFDRjtJQUNBLE9BQU9qTjtBQUNUO0FBRUEsU0FBU29OLGNBQWNqUixJQUFJO0lBQ3pCLElBQUlrUixVQUFVLElBQUk1VixNQUFNLENBQUMwRSxLQUFLbVIsU0FBUyxFQUFFO0lBQ3pDLHFCQUFxQixHQUVyQkQsVUFBVSxHQUFHNVYsTUFBTSxDQUFDNFYsU0FBUztJQUM3QixtQkFBbUIsR0FFbkIsT0FBT0E7QUFDVDtBQUVBLElBQUlWLFdBQVc7SUFDYnZjLFNBQVMsU0FBU0EsUUFBUW1kLFFBQVE7UUFDaEMsSUFBSXBSLE9BQU9vUixRQUFRLENBQUMsRUFBRTtRQUV0QixJQUFJcFIsS0FBS3FSLFVBQVUsRUFBRTtZQUNuQkQsUUFBUSxDQUFDLEVBQUUsQ0FBQ3RmLE9BQU8sQ0FBQyxTQUFVd2YsU0FBUztnQkFDckN0UixLQUFLcVIsVUFBVSxDQUFDOVIsWUFBWSxDQUFDb1IsV0FBV1csWUFBWXRSO1lBQ3REO1lBRUEsSUFBSUEsS0FBS3ZELFlBQVksQ0FBQzdDLG1CQUFtQixRQUFRbUUsT0FBT0wsa0JBQWtCLEVBQUU7Z0JBQzFFLElBQUl3VCxVQUFVMVksU0FBUytZLGFBQWEsQ0FBQ04sY0FBY2pSO2dCQUNuREEsS0FBS3FSLFVBQVUsQ0FBQ0csWUFBWSxDQUFDTixTQUFTbFI7WUFDeEMsT0FBTztnQkFDTEEsS0FBS3lSLE1BQU07WUFDYjtRQUNGO0lBQ0Y7SUFDQUMsTUFBTSxTQUFTQSxLQUFLTixRQUFRO1FBQzFCLElBQUlwUixPQUFPb1IsUUFBUSxDQUFDLEVBQUU7UUFDdEIsSUFBSU8sYUFBYVAsUUFBUSxDQUFDLEVBQUUsRUFBRSxtRkFBbUY7UUFDakgsNENBQTRDO1FBRTVDLElBQUksQ0FBQ3JSLFdBQVdDLE1BQU05RyxPQUFPLENBQUM2RSxPQUFPWixnQkFBZ0IsR0FBRztZQUN0RCxPQUFPcVQsU0FBU3ZjLE9BQU8sQ0FBQ21kO1FBQzFCO1FBRUEsSUFBSVEsU0FBUyxJQUFJN2UsT0FBTyxHQUFHdUksTUFBTSxDQUFDeUMsT0FBT2IsU0FBUyxFQUFFO1FBQ3BELE9BQU95VSxVQUFVLENBQUMsRUFBRSxDQUFDdFIsVUFBVSxDQUFDWCxFQUFFO1FBRWxDLElBQUlpUyxVQUFVLENBQUMsRUFBRSxDQUFDdFIsVUFBVSxDQUFDME8sS0FBSyxFQUFFO1lBQ2xDLElBQUk4QyxlQUFlRixVQUFVLENBQUMsRUFBRSxDQUFDdFIsVUFBVSxDQUFDME8sS0FBSyxDQUFDN08sS0FBSyxDQUFDLEtBQUt4TSxNQUFNLENBQUMsU0FBVTRNLEdBQUcsRUFBRW1ILEdBQUc7Z0JBQ3BGLElBQUlBLFFBQVExSixPQUFPWixnQkFBZ0IsSUFBSXNLLElBQUlxRixLQUFLLENBQUM4RSxTQUFTO29CQUN4RHRSLElBQUl3UixLQUFLLENBQUN4Z0IsSUFBSSxDQUFDbVc7Z0JBQ2pCLE9BQU87b0JBQ0xuSCxJQUFJeVIsTUFBTSxDQUFDemdCLElBQUksQ0FBQ21XO2dCQUNsQjtnQkFFQSxPQUFPbkg7WUFDVCxHQUFHO2dCQUNEeVIsUUFBUSxFQUFFO2dCQUNWRCxPQUFPLEVBQUU7WUFDWDtZQUVBSCxVQUFVLENBQUMsRUFBRSxDQUFDdFIsVUFBVSxDQUFDME8sS0FBSyxHQUFHOEMsYUFBYUMsS0FBSyxDQUFDN04sSUFBSSxDQUFDO1lBRXpELElBQUk0TixhQUFhRSxNQUFNLENBQUNuZ0IsTUFBTSxLQUFLLEdBQUc7Z0JBQ3BDb08sS0FBS2dTLGVBQWUsQ0FBQztZQUN2QixPQUFPO2dCQUNMaFMsS0FBS2pCLFlBQVksQ0FBQyxTQUFTOFMsYUFBYUUsTUFBTSxDQUFDOU4sSUFBSSxDQUFDO1lBQ3REO1FBQ0Y7UUFFQSxJQUFJZ08sZUFBZU4sV0FBVzVWLEdBQUcsQ0FBQyxTQUFVMkksQ0FBQztZQUMzQyxPQUFPZixPQUFPZTtRQUNoQixHQUFHVCxJQUFJLENBQUM7UUFFUmpFLEtBQUtqQixZQUFZLENBQUNuRixlQUFlO1FBQ2pDb0csS0FBS2hCLFNBQVMsR0FBR2lUO0lBQ25CO0FBQ0Y7QUFFQSxTQUFTQyxxQkFBcUJDLEVBQUU7SUFDOUJBO0FBQ0Y7QUFFQSxTQUFTQyxRQUFRQyxTQUFTLEVBQUVDLFFBQVE7SUFDbEMsSUFBSUMsbUJBQW1CLE9BQU9ELGFBQWEsYUFBYUEsV0FBV3BDO0lBRW5FLElBQUltQyxVQUFVemdCLE1BQU0sS0FBSyxHQUFHO1FBQzFCMmdCO0lBQ0YsT0FBTztRQUNMLElBQUlDLFFBQVFOO1FBRVosSUFBSW5VLE9BQU9OLGNBQWMsS0FBS3ZELHlCQUF5QjtZQUNyRHNZLFFBQVFqYSxPQUFPa2EscUJBQXFCLElBQUlQO1FBQzFDO1FBRUFNLE1BQU07WUFDSixJQUFJL0IsVUFBVUY7WUFDZCxJQUFJM1ksT0FBT3FZLEtBQUtGLEtBQUssQ0FBQztZQUN0QnNDLFVBQVV0VyxHQUFHLENBQUMwVTtZQUNkN1k7WUFDQTJhO1FBQ0Y7SUFDRjtBQUNGO0FBQ0EsSUFBSUcsV0FBVztBQUNmLFNBQVNDO0lBQ1BELFdBQVc7QUFDYjtBQUNBLFNBQVNFO0lBQ1BGLFdBQVc7QUFDYjtBQUNBLElBQUlHLEtBQUs7QUFDVCxTQUFTQyxRQUFRQyxPQUFPO0lBQ3RCLElBQUksQ0FBQ3RhLG1CQUFtQjtRQUN0QjtJQUNGO0lBRUEsSUFBSSxDQUFDc0YsT0FBT1AsZ0JBQWdCLEVBQUU7UUFDNUI7SUFDRjtJQUVBLElBQUl3Vix3QkFBd0JELFFBQVFFLFlBQVksRUFDNUNBLGVBQWVELDBCQUEwQixLQUFLLElBQUk5QyxTQUFTOEMsdUJBQzNERSx3QkFBd0JILFFBQVFJLFlBQVksRUFDNUNBLGVBQWVELDBCQUEwQixLQUFLLElBQUloRCxTQUFTZ0QsdUJBQzNERSx3QkFBd0JMLFFBQVFNLHNCQUFzQixFQUN0REEseUJBQXlCRCwwQkFBMEIsS0FBSyxJQUFJbEQsU0FBU2tELHVCQUNyRUUsd0JBQXdCUCxRQUFRUSxvQkFBb0IsRUFDcERBLHVCQUF1QkQsMEJBQTBCLEtBQUssSUFBSTlhLFdBQVc4YTtJQUN6RVQsS0FBSyxJQUFJcGEsa0JBQWtCLFNBQVUrYSxPQUFPO1FBQzFDLElBQUlkLFVBQVU7UUFDZCxJQUFJZSxnQkFBZ0J4SztRQUNwQnBKLFFBQVEyVCxTQUFTMWhCLE9BQU8sQ0FBQyxTQUFVNGhCLGNBQWM7WUFDL0MsSUFBSUEsZUFBZUMsSUFBSSxLQUFLLGVBQWVELGVBQWVFLFVBQVUsQ0FBQ2hpQixNQUFNLEdBQUcsS0FBSyxDQUFDdWUsVUFBVXVELGVBQWVFLFVBQVUsQ0FBQyxFQUFFLEdBQUc7Z0JBQzNILElBQUk3VixPQUFPUixvQkFBb0IsRUFBRTtvQkFDL0I4Vix1QkFBdUJLLGVBQWVqaUIsTUFBTTtnQkFDOUM7Z0JBRUF3aEIsYUFBYVMsZUFBZWppQixNQUFNO1lBQ3BDO1lBRUEsSUFBSWlpQixlQUFlQyxJQUFJLEtBQUssZ0JBQWdCRCxlQUFlamlCLE1BQU0sQ0FBQzRmLFVBQVUsSUFBSXRULE9BQU9SLG9CQUFvQixFQUFFO2dCQUMzRzhWLHVCQUF1QkssZUFBZWppQixNQUFNLENBQUM0ZixVQUFVO1lBQ3pEO1lBRUEsSUFBSXFDLGVBQWVDLElBQUksS0FBSyxnQkFBZ0J4RCxVQUFVdUQsZUFBZWppQixNQUFNLEtBQUssQ0FBQzhKLGdDQUFnQ3JDLE9BQU8sQ0FBQ3dhLGVBQWVuVCxhQUFhLEdBQUc7Z0JBQ3RKLElBQUltVCxlQUFlblQsYUFBYSxLQUFLLFdBQVc2UCxpQkFBaUJzRCxlQUFlamlCLE1BQU0sR0FBRztvQkFDdkYsSUFBSW9pQixvQkFBb0JySyxpQkFBaUJ6SixXQUFXMlQsZUFBZWppQixNQUFNLElBQ3JFMlMsU0FBU3lQLGtCQUFrQnpQLE1BQU0sRUFDakNDLFdBQVd3UCxrQkFBa0J4UCxRQUFRO29CQUV6Q3FQLGVBQWVqaUIsTUFBTSxDQUFDc04sWUFBWSxDQUFDaEYsYUFBYXFLLFVBQVVxUDtvQkFDMUQsSUFBSXBQLFVBQVVxUCxlQUFlamlCLE1BQU0sQ0FBQ3NOLFlBQVksQ0FBQy9FLFdBQVdxSztnQkFDOUQsT0FBTyxJQUFJZ00sZ0JBQWdCcUQsZUFBZWppQixNQUFNLEdBQUc7b0JBQ2pEMGhCLGFBQWFPLGVBQWVqaUIsTUFBTTtnQkFDcEM7WUFDRjtRQUNGO0lBQ0Y7SUFDQSxJQUFJLENBQUNtSCxRQUFRO0lBQ2JpYSxHQUFHQyxPQUFPLENBQUNTLHNCQUFzQjtRQUMvQk8sV0FBVztRQUNYelQsWUFBWTtRQUNaMFQsZUFBZTtRQUNmQyxTQUFTO0lBQ1g7QUFDRjtBQUNBLFNBQVNDO0lBQ1AsSUFBSSxDQUFDcEIsSUFBSTtJQUNUQSxHQUFHb0IsVUFBVTtBQUNmO0FBRUEsU0FBU0MsWUFBYWxVLElBQUk7SUFDeEIsSUFBSWxCLFFBQVFrQixLQUFLdkQsWUFBWSxDQUFDO0lBQzlCLElBQUlFLE1BQU0sRUFBRTtJQUVaLElBQUltQyxPQUFPO1FBQ1RuQyxNQUFNbUMsTUFBTW9CLEtBQUssQ0FBQyxLQUFLeE0sTUFBTSxDQUFDLFNBQVU0TSxHQUFHLEVBQUV4QixLQUFLO1lBQ2hELElBQUk0QixTQUFTNUIsTUFBTW9CLEtBQUssQ0FBQztZQUN6QixJQUFJdkYsT0FBTytGLE1BQU0sQ0FBQyxFQUFFO1lBQ3BCLElBQUl4TCxRQUFRd0wsT0FBT3JNLEtBQUssQ0FBQztZQUV6QixJQUFJc0csUUFBUXpGLE1BQU10RCxNQUFNLEdBQUcsR0FBRztnQkFDNUIwTyxHQUFHLENBQUMzRixLQUFLLEdBQUd6RixNQUFNK08sSUFBSSxDQUFDLEtBQUt6RCxJQUFJO1lBQ2xDO1lBRUEsT0FBT0Y7UUFDVCxHQUFHLENBQUM7SUFDTjtJQUVBLE9BQU8zRDtBQUNUO0FBRUEsU0FBU3dYLFlBQWFuVSxJQUFJO0lBQ3hCLElBQUlvVSxpQkFBaUJwVSxLQUFLdkQsWUFBWSxDQUFDO0lBQ3ZDLElBQUk0WCxtQkFBbUJyVSxLQUFLdkQsWUFBWSxDQUFDO0lBQ3pDLElBQUk2WCxZQUFZdFUsS0FBS3NVLFNBQVMsS0FBS3hYLFlBQVlrRCxLQUFLc1UsU0FBUyxDQUFDOVQsSUFBSSxLQUFLO0lBQ3ZFLElBQUk3RCxNQUFNNk0saUJBQWlCekosV0FBV0M7SUFFdEMsSUFBSSxDQUFDckQsSUFBSXlILE1BQU0sRUFBRTtRQUNmekgsSUFBSXlILE1BQU0sR0FBRzZFO0lBQ2Y7SUFFQSxJQUFJbUwsa0JBQWtCQyxrQkFBa0I7UUFDdEMxWCxJQUFJeUgsTUFBTSxHQUFHZ1E7UUFDYnpYLElBQUkwSCxRQUFRLEdBQUdnUTtJQUNqQjtJQUVBLElBQUkxWCxJQUFJMEgsUUFBUSxJQUFJMUgsSUFBSXlILE1BQU0sRUFBRTtRQUM5QixPQUFPekg7SUFDVDtJQUVBLElBQUlBLElBQUl5SCxNQUFNLElBQUlrUSxVQUFVMWlCLE1BQU0sR0FBRyxHQUFHO1FBQ3RDK0ssSUFBSTBILFFBQVEsR0FBR3FFLFdBQVcvTCxJQUFJeUgsTUFBTSxFQUFFcEUsS0FBS3NVLFNBQVMsS0FBSzdMLFVBQVU5TCxJQUFJeUgsTUFBTSxFQUFFa0IsTUFBTXRGLEtBQUtzVSxTQUFTO0lBQ3JHO0lBRUEsSUFBSSxDQUFDM1gsSUFBSTBILFFBQVEsSUFBSXRHLE9BQU9rSyxZQUFZLElBQUlqSSxLQUFLdVUsVUFBVSxJQUFJdlUsS0FBS3VVLFVBQVUsQ0FBQ0MsUUFBUSxLQUFLQyxLQUFLQyxTQUFTLEVBQUU7UUFDMUcvWCxJQUFJMEgsUUFBUSxHQUFHckUsS0FBS3VVLFVBQVUsQ0FBQ0ksSUFBSTtJQUNyQztJQUVBLE9BQU9oWTtBQUNUO0FBRUEsU0FBU2lZLGlCQUFrQjVVLElBQUk7SUFDN0IsSUFBSTZVLGtCQUFrQmhWLFFBQVFHLEtBQUtLLFVBQVUsRUFBRTNNLE1BQU0sQ0FBQyxTQUFVNE0sR0FBRyxFQUFFaEUsSUFBSTtRQUN2RSxJQUFJZ0UsSUFBSTNNLElBQUksS0FBSyxXQUFXMk0sSUFBSTNNLElBQUksS0FBSyxTQUFTO1lBQ2hEMk0sR0FBRyxDQUFDaEUsS0FBSzNJLElBQUksQ0FBQyxHQUFHMkksS0FBS3BILEtBQUs7UUFDN0I7UUFFQSxPQUFPb0w7SUFDVCxHQUFHLENBQUM7SUFDSixJQUFJMk4sUUFBUWpPLEtBQUt2RCxZQUFZLENBQUM7SUFDOUIsSUFBSTBSLFVBQVVuTyxLQUFLdkQsWUFBWSxDQUFDO0lBRWhDLElBQUlzQixPQUFPVCxRQUFRLEVBQUU7UUFDbkIsSUFBSTJRLE9BQU87WUFDVDRHLGVBQWUsQ0FBQyxrQkFBa0IsR0FBRyxHQUFHdlosTUFBTSxDQUFDeUMsT0FBT1osZ0JBQWdCLEVBQUUsV0FBVzdCLE1BQU0sQ0FBQzZTLFdBQVcxTztRQUN2RyxPQUFPO1lBQ0xvVixlQUFlLENBQUMsY0FBYyxHQUFHO1lBQ2pDQSxlQUFlLENBQUMsWUFBWSxHQUFHO1FBQ2pDO0lBQ0Y7SUFFQSxPQUFPQTtBQUNUO0FBRUEsU0FBU0M7SUFDUCxPQUFPO1FBQ0x6USxVQUFVO1FBQ1Y0SixPQUFPO1FBQ1BFLFNBQVM7UUFDVC9KLFFBQVE7UUFDUnZELFdBQVd4QztRQUNYeVAsUUFBUTtRQUNSSixNQUFNO1lBQ0pySixVQUFVO1lBQ1ZELFFBQVE7WUFDUitFLE1BQU0sRUFBRTtRQUNWO1FBQ0ErRSxRQUFRO1FBQ1I3SSxPQUFPO1lBQ0xtSixTQUFTLEVBQUU7WUFDWDlOLFFBQVEsQ0FBQztZQUNUTCxZQUFZLENBQUM7UUFDZjtJQUNGO0FBQ0Y7QUFDQSxTQUFTMFUsVUFBVS9VLElBQUk7SUFDckIsSUFBSWdWLFNBQVNyakIsVUFBVUMsTUFBTSxHQUFHLEtBQUtELFNBQVMsQ0FBQyxFQUFFLEtBQUttTCxZQUFZbkwsU0FBUyxDQUFDLEVBQUUsR0FBRztRQUMvRXVpQixhQUFhO0lBQ2Y7SUFFQSxJQUFJZSxlQUFlZCxZQUFZblUsT0FDM0JxRSxXQUFXNFEsYUFBYTVRLFFBQVEsRUFDaENELFNBQVM2USxhQUFhN1EsTUFBTSxFQUM1QjhRLGVBQWVELGFBQWE5TCxJQUFJO0lBRXBDLElBQUkwTCxrQkFBa0JELGlCQUFpQjVVO0lBQ3ZDLElBQUltVixhQUFhekosV0FBVyx1QkFBdUIsQ0FBQyxHQUFHMUw7SUFDdkQsSUFBSW9WLGNBQWNKLE9BQU9kLFdBQVcsR0FBR0EsWUFBWWxVLFFBQVEsRUFBRTtJQUM3RCxPQUFPeE8sZUFBZTtRQUNwQjZTLFVBQVVBO1FBQ1Y0SixPQUFPak8sS0FBS3ZELFlBQVksQ0FBQztRQUN6QjBSLFNBQVNuTyxLQUFLdkQsWUFBWSxDQUFDO1FBQzNCMkgsUUFBUUE7UUFDUnZELFdBQVd4QztRQUNYcVAsTUFBTTtZQUNKckosVUFBVTtZQUNWRCxRQUFRO1lBQ1IrRSxNQUFNLEVBQUU7UUFDVjtRQUNBK0UsUUFBUTtRQUNSSixRQUFRO1FBQ1J6SSxPQUFPO1lBQ0xtSixTQUFTMEc7WUFDVHhVLFFBQVEwVTtZQUNSL1UsWUFBWXdVO1FBQ2Q7SUFDRixHQUFHTTtBQUNMO0FBRUEsSUFBSUUsV0FBV3BTLFVBQVV2QyxNQUFNO0FBRS9CLFNBQVM0VSxpQkFBaUJ0VixJQUFJO0lBQzVCLElBQUl1VixXQUFXeFgsT0FBT1gsY0FBYyxLQUFLLFNBQVMyWCxVQUFVL1UsTUFBTTtRQUNoRWtVLGFBQWE7SUFDZixLQUFLYSxVQUFVL1U7SUFFZixJQUFJLENBQUN1VixTQUFTbFEsS0FBSyxDQUFDbUosT0FBTyxDQUFDdFYsT0FBTyxDQUFDK0Isd0JBQXdCO1FBQzFELE9BQU9nUixhQUFhLHNCQUFzQmpNLE1BQU11VjtJQUNsRCxPQUFPO1FBQ0wsT0FBT3RKLGFBQWEsa0NBQWtDak0sTUFBTXVWO0lBQzlEO0FBQ0Y7QUFFQSxJQUFJQyxnQkFBZ0IsSUFBSTFaO0FBQ3hCdEIsU0FBU3VCLEdBQUcsQ0FBQyxTQUFVeU0sTUFBTTtJQUMzQmdOLGNBQWN4WixHQUFHLENBQUMsTUFBTVYsTUFBTSxDQUFDa047QUFDakM7QUFDQXpYLE9BQU9ELElBQUksQ0FBQzhKLGVBQWUsQ0FBQ04sZUFBZSxFQUFFeUIsR0FBRyxDQUFDeVosY0FBY3haLEdBQUcsQ0FBQ0MsSUFBSSxDQUFDdVo7QUFDeEV6a0IsT0FBT0QsSUFBSSxDQUFDOEosZUFBZSxDQUFDTCxhQUFhLEVBQUV3QixHQUFHLENBQUN5WixjQUFjeFosR0FBRyxDQUFDQyxJQUFJLENBQUN1WjtBQUN0RUEsZ0JBQWdCemYsbUJBQW1CeWY7QUFFbkMsU0FBU0MsT0FBT0MsSUFBSTtJQUNsQixJQUFJcEQsV0FBVzNnQixVQUFVQyxNQUFNLEdBQUcsS0FBS0QsU0FBUyxDQUFDLEVBQUUsS0FBS21MLFlBQVluTCxTQUFTLENBQUMsRUFBRSxHQUFHO0lBQ25GLElBQUksQ0FBQ2lILFFBQVEsT0FBTzJULFFBQVFxRCxPQUFPO0lBQ25DLElBQUkrRixnQkFBZ0JuZCxTQUFTSyxlQUFlLENBQUNvSCxTQUFTO0lBRXRELElBQUkyVixTQUFTLFNBQVNBLE9BQU9DLE1BQU07UUFDakMsT0FBT0YsY0FBYzNaLEdBQUcsQ0FBQyxHQUFHVixNQUFNLENBQUNyQiw2QkFBNkIsS0FBS3FCLE1BQU0sQ0FBQ3VhO0lBQzlFO0lBRUEsSUFBSUMsWUFBWSxTQUFTQSxVQUFVRCxNQUFNO1FBQ3ZDLE9BQU9GLGNBQWNsRSxNQUFNLENBQUMsR0FBR25XLE1BQU0sQ0FBQ3JCLDZCQUE2QixLQUFLcUIsTUFBTSxDQUFDdWE7SUFDakY7SUFFQSxJQUFJaGEsV0FBV2tDLE9BQU9rSyxZQUFZLEdBQUd1TixnQkFBZ0JoYixTQUFTdUIsR0FBRyxDQUFDLFNBQVVnYSxDQUFDO1FBQzNFLE9BQU8sTUFBTXphLE1BQU0sQ0FBQ3lhO0lBQ3RCLEdBQUd6YSxNQUFNLENBQUN2SyxPQUFPRCxJQUFJLENBQUN1a0I7SUFFdEIsSUFBSSxDQUFDeFosU0FBU2lPLFFBQVEsQ0FBQyxPQUFPO1FBQzVCak8sU0FBU3ZLLElBQUksQ0FBQztJQUNoQjtJQUVBLElBQUkwa0IsbUJBQW1CO1FBQUMsSUFBSTFhLE1BQU0sQ0FBQ0wsdUJBQXVCLFVBQVVLLE1BQU0sQ0FBQzFCLGVBQWU7S0FBTSxDQUFDMEIsTUFBTSxDQUFDTyxTQUFTRSxHQUFHLENBQUMsU0FBVXpHLENBQUM7UUFDOUgsT0FBTyxJQUFJZ0csTUFBTSxDQUFDaEcsR0FBRyxVQUFVZ0csTUFBTSxDQUFDMUIsZUFBZTtJQUN2RCxJQUFJcUssSUFBSSxDQUFDO0lBRVQsSUFBSStSLGlCQUFpQnBrQixNQUFNLEtBQUssR0FBRztRQUNqQyxPQUFPMmEsUUFBUXFELE9BQU87SUFDeEI7SUFFQSxJQUFJcUcsYUFBYSxFQUFFO0lBRW5CLElBQUk7UUFDRkEsYUFBYXBXLFFBQVE2VixLQUFLUSxnQkFBZ0IsQ0FBQ0Y7SUFDN0MsRUFBRSxPQUFPOWQsR0FBRyxDQUNaO0lBRUEsSUFBSStkLFdBQVdya0IsTUFBTSxHQUFHLEdBQUc7UUFDekJna0IsT0FBTztRQUNQRSxVQUFVO0lBQ1osT0FBTztRQUNMLE9BQU92SixRQUFRcUQsT0FBTztJQUN4QjtJQUVBLElBQUloWSxPQUFPcVksS0FBS0YsS0FBSyxDQUFDO0lBQ3RCLElBQUlzQyxZQUFZNEQsV0FBV3ZpQixNQUFNLENBQUMsU0FBVTRNLEdBQUcsRUFBRU4sSUFBSTtRQUNuRCxJQUFJO1lBQ0YsSUFBSW9SLFdBQVdrRSxpQkFBaUJ0VjtZQUVoQyxJQUFJb1IsVUFBVTtnQkFDWjlRLElBQUloUCxJQUFJLENBQUM4ZjtZQUNYO1FBQ0YsRUFBRSxPQUFPbFosR0FBRztZQUNWLElBQUksQ0FBQ2tDLFlBQVk7Z0JBQ2YsSUFBSWxDLEVBQUV2RSxJQUFJLEtBQUssZUFBZTtvQkFDNUI4YixRQUFRQyxLQUFLLENBQUN4WDtnQkFDaEI7WUFDRjtRQUNGO1FBRUEsT0FBT29JO0lBQ1QsR0FBRyxFQUFFO0lBQ0wsT0FBTyxJQUFJaU0sUUFBUSxTQUFVcUQsT0FBTyxFQUFFcEQsTUFBTTtRQUMxQ0QsUUFBUTRKLEdBQUcsQ0FBQzlELFdBQVcrRCxJQUFJLENBQUMsU0FBVUMsaUJBQWlCO1lBQ3JEakUsUUFBUWlFLG1CQUFtQjtnQkFDekJULE9BQU87Z0JBQ1BBLE9BQU87Z0JBQ1BFLFVBQVU7Z0JBQ1YsSUFBSSxPQUFPeEQsYUFBYSxZQUFZQTtnQkFDcEMxYTtnQkFDQWdZO1lBQ0Y7UUFDRixHQUFHMEcsS0FBSyxDQUFDLFNBQVVwZSxDQUFDO1lBQ2xCTjtZQUNBNFUsT0FBT3RVO1FBQ1Q7SUFDRjtBQUNGO0FBRUEsU0FBU3FlLE9BQU92VyxJQUFJO0lBQ2xCLElBQUlzUyxXQUFXM2dCLFVBQVVDLE1BQU0sR0FBRyxLQUFLRCxTQUFTLENBQUMsRUFBRSxLQUFLbUwsWUFBWW5MLFNBQVMsQ0FBQyxFQUFFLEdBQUc7SUFDbkYyakIsaUJBQWlCdFYsTUFBTW9XLElBQUksQ0FBQyxTQUFVaEYsUUFBUTtRQUM1QyxJQUFJQSxVQUFVO1lBQ1pnQixRQUFRO2dCQUFDaEI7YUFBUyxFQUFFa0I7UUFDdEI7SUFDRjtBQUNGO0FBRUEsU0FBU2tFLGFBQWExZixJQUFJO0lBQ3hCLE9BQU8sU0FBVTJmLG1CQUFtQjtRQUNsQyxJQUFJeFEsU0FBU3RVLFVBQVVDLE1BQU0sR0FBRyxLQUFLRCxTQUFTLENBQUMsRUFBRSxLQUFLbUwsWUFBWW5MLFNBQVMsQ0FBQyxFQUFFLEdBQUcsQ0FBQztRQUNsRixJQUFJK2tCLGlCQUFpQixDQUFDRCx1QkFBdUIsQ0FBQyxHQUFHblMsSUFBSSxHQUFHbVMsc0JBQXNCdkssbUJBQW1CdUssdUJBQXVCLENBQUM7UUFDekgsSUFBSS9JLE9BQU96SCxPQUFPeUgsSUFBSTtRQUV0QixJQUFJQSxNQUFNO1lBQ1JBLE9BQU8sQ0FBQ0EsUUFBUSxDQUFDLEdBQUdwSixJQUFJLEdBQUdvSixPQUFPeEIsbUJBQW1Cd0IsUUFBUSxDQUFDO1FBQ2hFO1FBRUEsT0FBTzVXLEtBQUs0ZixnQkFBZ0JsbEIsZUFBZUEsZUFBZSxDQUFDLEdBQUd5VSxTQUFTLENBQUMsR0FBRztZQUN6RXlILE1BQU1BO1FBQ1I7SUFDRjtBQUNGO0FBRUEsSUFBSWlKLFNBQVMsU0FBU0EsT0FBT0QsY0FBYztJQUN6QyxJQUFJelEsU0FBU3RVLFVBQVVDLE1BQU0sR0FBRyxLQUFLRCxTQUFTLENBQUMsRUFBRSxLQUFLbUwsWUFBWW5MLFNBQVMsQ0FBQyxFQUFFLEdBQUcsQ0FBQztJQUNsRixJQUFJaWxCLG9CQUFvQjNRLE9BQU9wRixTQUFTLEVBQ3BDQSxZQUFZK1Ysc0JBQXNCLEtBQUssSUFBSXZZLHVCQUF1QnVZLG1CQUNsRUMsaUJBQWlCNVEsT0FBTzZILE1BQU0sRUFDOUJBLFNBQVMrSSxtQkFBbUIsS0FBSyxJQUFJLFFBQVFBLGdCQUM3Q0MsZUFBZTdRLE9BQU95SCxJQUFJLEVBQzFCQSxPQUFPb0osaUJBQWlCLEtBQUssSUFBSSxPQUFPQSxjQUN4Q0MsaUJBQWlCOVEsT0FBT2lJLE1BQU0sRUFDOUJBLFNBQVM2SSxtQkFBbUIsS0FBSyxJQUFJLE9BQU9BLGdCQUM1Q0MsZ0JBQWdCL1EsT0FBT2dJLEtBQUssRUFDNUJBLFFBQVErSSxrQkFBa0IsS0FBSyxJQUFJLE9BQU9BLGVBQzFDQyxrQkFBa0JoUixPQUFPa0ksT0FBTyxFQUNoQ0EsVUFBVThJLG9CQUFvQixLQUFLLElBQUksT0FBT0EsaUJBQzlDQyxrQkFBa0JqUixPQUFPdUksT0FBTyxFQUNoQ0EsVUFBVTBJLG9CQUFvQixLQUFLLElBQUksRUFBRSxHQUFHQSxpQkFDNUNDLHFCQUFxQmxSLE9BQU81RixVQUFVLEVBQ3RDQSxhQUFhOFcsdUJBQXVCLEtBQUssSUFBSSxDQUFDLElBQUlBLG9CQUNsREMsaUJBQWlCblIsT0FBT3ZGLE1BQU0sRUFDOUJBLFNBQVMwVyxtQkFBbUIsS0FBSyxJQUFJLENBQUMsSUFBSUE7SUFDOUMsSUFBSSxDQUFDVixnQkFBZ0I7SUFDckIsSUFBSXRTLFNBQVNzUyxlQUFldFMsTUFBTSxFQUM5QkMsV0FBV3FTLGVBQWVyUyxRQUFRLEVBQ2xDQyxPQUFPb1MsZUFBZXBTLElBQUk7SUFDOUIsT0FBTzZJLFlBQVkzYixlQUFlO1FBQ2hDbWlCLE1BQU07SUFDUixHQUFHK0MsaUJBQWlCO1FBQ2xCNUssVUFBVSw0QkFBNEI7WUFDcEM0SyxnQkFBZ0JBO1lBQ2hCelEsUUFBUUE7UUFDVjtRQUVBLElBQUlsSSxPQUFPVCxRQUFRLEVBQUU7WUFDbkIsSUFBSTJRLE9BQU87Z0JBQ1Q1TixVQUFVLENBQUMsa0JBQWtCLEdBQUcsR0FBRy9FLE1BQU0sQ0FBQ3lDLE9BQU9aLGdCQUFnQixFQUFFLFdBQVc3QixNQUFNLENBQUM2UyxXQUFXMU87WUFDbEcsT0FBTztnQkFDTFksVUFBVSxDQUFDLGNBQWMsR0FBRztnQkFDNUJBLFVBQVUsQ0FBQyxZQUFZLEdBQUc7WUFDNUI7UUFDRjtRQUVBLE9BQU8wTixzQkFBc0I7WUFDM0JqSSxPQUFPO2dCQUNMMkgsTUFBTXlCLFlBQVk1SztnQkFDbEJvSixNQUFNQSxPQUFPd0IsWUFBWXhCLEtBQUtwSixJQUFJLElBQUk7b0JBQ3BDcUosT0FBTztvQkFDUGxNLE9BQU87b0JBQ1BFLFFBQVE7b0JBQ1IyQyxNQUFNLENBQUM7Z0JBQ1Q7WUFDRjtZQUNBRixRQUFRQTtZQUNSQyxVQUFVQTtZQUNWeEQsV0FBV3JQLGVBQWVBLGVBQWUsQ0FBQyxHQUFHNk0sdUJBQXVCd0M7WUFDcEVpTixRQUFRQTtZQUNSRyxPQUFPQTtZQUNQQyxRQUFRQTtZQUNSQyxTQUFTQTtZQUNUOUksT0FBTztnQkFDTGhGLFlBQVlBO2dCQUNaSyxRQUFRQTtnQkFDUjhOLFNBQVNBO1lBQ1g7UUFDRjtJQUNGO0FBQ0Y7QUFDQSxJQUFJNkksa0JBQWtCO0lBQ3BCM1UsUUFBUSxTQUFTQTtRQUNmLE9BQU87WUFDTDRCLE1BQU1rUyxhQUFhRztRQUNyQjtJQUNGO0lBQ0EvVCxPQUFPLFNBQVNBO1FBQ2QsT0FBTztZQUNMMFUsMkJBQTJCLFNBQVNBLDBCQUEwQjNMLFdBQVc7Z0JBQ3ZFQSxZQUFZc0gsWUFBWSxHQUFHd0M7Z0JBQzNCOUosWUFBWXdILFlBQVksR0FBR29EO2dCQUMzQixPQUFPNUs7WUFDVDtRQUNGO0lBQ0Y7SUFDQUYsVUFBVSxTQUFTQSxTQUFTOEwsWUFBWTtRQUN0Q0EsYUFBYWpMLEtBQUssR0FBRyxTQUFVckcsTUFBTTtZQUNuQyxJQUFJdVIsZUFBZXZSLE9BQU9qRyxJQUFJLEVBQzFCQSxPQUFPd1gsaUJBQWlCLEtBQUssSUFBSWhmLFdBQVdnZixjQUM1Q0MsbUJBQW1CeFIsT0FBT3FNLFFBQVEsRUFDbENBLFdBQVdtRixxQkFBcUIsS0FBSyxJQUFJLFlBQWEsSUFBSUE7WUFDOUQsT0FBT2hDLE9BQU96VixNQUFNc1M7UUFDdEI7UUFFQWlGLGFBQWFHLDhCQUE4QixHQUFHLFNBQVUxWCxJQUFJLEVBQUV1VixRQUFRO1lBQ3BFLElBQUlsUixXQUFXa1IsU0FBU2xSLFFBQVEsRUFDNUI0SixRQUFRc0gsU0FBU3RILEtBQUssRUFDdEJFLFVBQVVvSCxTQUFTcEgsT0FBTyxFQUMxQi9KLFNBQVNtUixTQUFTblIsTUFBTSxFQUN4QnZELFlBQVkwVSxTQUFTMVUsU0FBUyxFQUM5QmlOLFNBQVN5SCxTQUFTekgsTUFBTSxFQUN4QkosT0FBTzZILFNBQVM3SCxJQUFJLEVBQ3BCUSxTQUFTcUgsU0FBU3JILE1BQU0sRUFDeEI3SSxRQUFRa1EsU0FBU2xRLEtBQUs7WUFDMUIsT0FBTyxJQUFJa0gsUUFBUSxTQUFVcUQsT0FBTyxFQUFFcEQsTUFBTTtnQkFDMUNELFFBQVE0SixHQUFHLENBQUM7b0JBQUN4RyxTQUFTdEwsVUFBVUQ7b0JBQVNzSixLQUFLckosUUFBUSxHQUFHc0wsU0FBU2pDLEtBQUtySixRQUFRLEVBQUVxSixLQUFLdEosTUFBTSxJQUFJbUksUUFBUXFELE9BQU8sQ0FBQzt3QkFDOUdqQyxPQUFPO3dCQUNQbE0sT0FBTzt3QkFDUEUsUUFBUTt3QkFDUjJDLE1BQU0sQ0FBQztvQkFDVDtpQkFBRyxFQUFFOFIsSUFBSSxDQUFDLFNBQVVqZSxJQUFJO29CQUN0QixJQUFJMEUsUUFBUXBILGVBQWUwQyxNQUFNLElBQzdCc1YsT0FBTzVRLEtBQUssQ0FBQyxFQUFFLEVBQ2Y2USxPQUFPN1EsS0FBSyxDQUFDLEVBQUU7b0JBRW5CK1MsUUFBUTt3QkFBQzVQO3dCQUFNK04sc0JBQXNCOzRCQUNuQ2pJLE9BQU87Z0NBQ0wySCxNQUFNQTtnQ0FDTkMsTUFBTUE7NEJBQ1I7NEJBQ0F0SixRQUFRQTs0QkFDUkMsVUFBVUE7NEJBQ1Z4RCxXQUFXQTs0QkFDWGlOLFFBQVFBOzRCQUNSSSxRQUFRQTs0QkFDUkQsT0FBT0E7NEJBQ1BFLFNBQVNBOzRCQUNUOUksT0FBT0E7NEJBQ1BnSixXQUFXO3dCQUNiO3FCQUFHO2dCQUNMLEdBQUdpSSxLQUFLLENBQUM5SjtZQUNYO1FBQ0Y7UUFFQStLLGFBQWFJLG9CQUFvQixHQUFHLFNBQVVDLEtBQUs7WUFDakQsSUFBSTVULFdBQVc0VCxNQUFNNVQsUUFBUSxFQUN6QjNELGFBQWF1WCxNQUFNdlgsVUFBVSxFQUM3Qm9OLE9BQU9tSyxNQUFNbkssSUFBSSxFQUNqQjVNLFlBQVkrVyxNQUFNL1csU0FBUyxFQUMzQkgsU0FBU2tYLE1BQU1sWCxNQUFNO1lBQ3pCLElBQUlvTyxjQUFjck8sV0FBV0M7WUFFN0IsSUFBSW9PLFlBQVlsZCxNQUFNLEdBQUcsR0FBRztnQkFDMUJ5TyxVQUFVLENBQUMsUUFBUSxHQUFHeU87WUFDeEI7WUFFQSxJQUFJK0k7WUFFSixJQUFJalgsc0JBQXNCQyxZQUFZO2dCQUNwQ2dYLFlBQVk1TCxhQUFhLHFDQUFxQztvQkFDNUR3QixNQUFNQTtvQkFDTjVNLFdBQVdBO29CQUNYRSxnQkFBZ0IwTSxLQUFLaE0sS0FBSztvQkFDMUJULFdBQVd5TSxLQUFLaE0sS0FBSztnQkFDdkI7WUFDRjtZQUVBdUMsU0FBUzFTLElBQUksQ0FBQ3VtQixhQUFhcEssS0FBS25KLElBQUk7WUFDcEMsT0FBTztnQkFDTE4sVUFBVUE7Z0JBQ1YzRCxZQUFZQTtZQUNkO1FBQ0Y7SUFDRjtBQUNGO0FBRUEsSUFBSXlYLFNBQVM7SUFDWHBWLFFBQVEsU0FBU0E7UUFDZixPQUFPO1lBQ0xxVixPQUFPLFNBQVNBLE1BQU1DLFNBQVM7Z0JBQzdCLElBQUkvUixTQUFTdFUsVUFBVUMsTUFBTSxHQUFHLEtBQUtELFNBQVMsQ0FBQyxFQUFFLEtBQUttTCxZQUFZbkwsU0FBUyxDQUFDLEVBQUUsR0FBRyxDQUFDO2dCQUNsRixJQUFJdWxCLGtCQUFrQmpSLE9BQU91SSxPQUFPLEVBQ2hDQSxVQUFVMEksb0JBQW9CLEtBQUssSUFBSSxFQUFFLEdBQUdBO2dCQUNoRCxPQUFPL0osWUFBWTtvQkFDakJ3RyxNQUFNO2dCQUNSLEdBQUc7b0JBQ0Q3SCxVQUFVLDRCQUE0Qjt3QkFDcENrTSxXQUFXQTt3QkFDWC9SLFFBQVFBO29CQUNWO29CQUNBLElBQUlqQyxXQUFXLEVBQUU7b0JBQ2pCZ1UsVUFBVSxTQUFVNWpCLElBQUk7d0JBQ3RCK0IsTUFBTUMsT0FBTyxDQUFDaEMsUUFBUUEsS0FBSzJILEdBQUcsQ0FBQyxTQUFVMkksQ0FBQzs0QkFDeENWLFdBQVdBLFNBQVMxSSxNQUFNLENBQUNvSixFQUFFMkksUUFBUTt3QkFDdkMsS0FBS3JKLFdBQVdBLFNBQVMxSSxNQUFNLENBQUNsSCxLQUFLaVosUUFBUTtvQkFDL0M7b0JBQ0EsT0FBTzt3QkFBQzs0QkFDTnhKLEtBQUs7NEJBQ0x4RCxZQUFZO2dDQUNWME8sT0FBTztvQ0FBQyxHQUFHelQsTUFBTSxDQUFDeUMsT0FBT2IsU0FBUyxFQUFFO2lDQUFXLENBQUM1QixNQUFNLENBQUN2RixtQkFBbUJ5WSxVQUFVdkssSUFBSSxDQUFDOzRCQUMzRjs0QkFDQUQsVUFBVUE7d0JBQ1o7cUJBQUU7Z0JBQ0o7WUFDRjtRQUNGO0lBQ0Y7QUFDRjtBQUVBLElBQUlpVSxnQkFBZ0I7SUFDbEJ2VixRQUFRLFNBQVNBO1FBQ2YsT0FBTztZQUNMeUMsU0FBUyxTQUFTQSxRQUFRc0osT0FBTztnQkFDL0IsSUFBSXhJLFNBQVN0VSxVQUFVQyxNQUFNLEdBQUcsS0FBS0QsU0FBUyxDQUFDLEVBQUUsS0FBS21MLFlBQVluTCxTQUFTLENBQUMsRUFBRSxHQUFHLENBQUM7Z0JBQ2xGLElBQUlxbEIsZ0JBQWdCL1EsT0FBT2dJLEtBQUssRUFDNUJBLFFBQVErSSxrQkFBa0IsS0FBSyxJQUFJLE9BQU9BLGVBQzFDRSxrQkFBa0JqUixPQUFPdUksT0FBTyxFQUNoQ0EsVUFBVTBJLG9CQUFvQixLQUFLLElBQUksRUFBRSxHQUFHQSxpQkFDNUNDLHFCQUFxQmxSLE9BQU81RixVQUFVLEVBQ3RDQSxhQUFhOFcsdUJBQXVCLEtBQUssSUFBSSxDQUFDLElBQUlBLG9CQUNsREMsaUJBQWlCblIsT0FBT3ZGLE1BQU0sRUFDOUJBLFNBQVMwVyxtQkFBbUIsS0FBSyxJQUFJLENBQUMsSUFBSUE7Z0JBQzlDLE9BQU9qSyxZQUFZO29CQUNqQndHLE1BQU07b0JBQ05sRixTQUFTQTtnQkFDWCxHQUFHO29CQUNEM0MsVUFBVSw0QkFBNEI7d0JBQ3BDMkMsU0FBU0E7d0JBQ1R4SSxRQUFRQTtvQkFDVjtvQkFDQSxPQUFPK0ksMEJBQTBCO3dCQUMvQlAsU0FBU0EsUUFBUXRYLFFBQVE7d0JBQ3pCOFcsT0FBT0E7d0JBQ1A1SSxPQUFPOzRCQUNMaEYsWUFBWUE7NEJBQ1pLLFFBQVFBOzRCQUNSOE4sU0FBUztnQ0FBQyxHQUFHbFQsTUFBTSxDQUFDeUMsT0FBT2IsU0FBUyxFQUFFOzZCQUFtQixDQUFDNUIsTUFBTSxDQUFDdkYsbUJBQW1CeVk7d0JBQ3RGO29CQUNGO2dCQUNGO1lBQ0Y7UUFDRjtJQUNGO0FBQ0Y7QUFFQSxJQUFJMEosYUFBYTtJQUNmeFYsUUFBUSxTQUFTQTtRQUNmLE9BQU87WUFDTHlWLE1BQU0sU0FBU0EsS0FBSzFKLE9BQU87Z0JBQ3pCLElBQUl4SSxTQUFTdFUsVUFBVUMsTUFBTSxHQUFHLEtBQUtELFNBQVMsQ0FBQyxFQUFFLEtBQUttTCxZQUFZbkwsU0FBUyxDQUFDLEVBQUUsR0FBRyxDQUFDO2dCQUNsRixJQUFJaWxCLG9CQUFvQjNRLE9BQU9wRixTQUFTLEVBQ3BDQSxZQUFZK1Ysc0JBQXNCLEtBQUssSUFBSXZZLHVCQUF1QnVZLG1CQUNsRUksZ0JBQWdCL1EsT0FBT2dJLEtBQUssRUFDNUJBLFFBQVErSSxrQkFBa0IsS0FBSyxJQUFJLE9BQU9BLGVBQzFDRSxrQkFBa0JqUixPQUFPdUksT0FBTyxFQUNoQ0EsVUFBVTBJLG9CQUFvQixLQUFLLElBQUksRUFBRSxHQUFHQSxpQkFDNUNDLHFCQUFxQmxSLE9BQU81RixVQUFVLEVBQ3RDQSxhQUFhOFcsdUJBQXVCLEtBQUssSUFBSSxDQUFDLElBQUlBLG9CQUNsREMsaUJBQWlCblIsT0FBT3ZGLE1BQU0sRUFDOUJBLFNBQVMwVyxtQkFBbUIsS0FBSyxJQUFJLENBQUMsSUFBSUE7Z0JBQzlDLE9BQU9qSyxZQUFZO29CQUNqQndHLE1BQU07b0JBQ05sRixTQUFTQTtnQkFDWCxHQUFHO29CQUNEM0MsVUFBVSw0QkFBNEI7d0JBQ3BDMkMsU0FBU0E7d0JBQ1R4SSxRQUFRQTtvQkFDVjtvQkFDQSxPQUFPMkksdUJBQXVCO3dCQUM1QkgsU0FBU0E7d0JBQ1Q1TixXQUFXclAsZUFBZUEsZUFBZSxDQUFDLEdBQUc2TSx1QkFBdUJ3Qzt3QkFDcEVvTixPQUFPQTt3QkFDUDVJLE9BQU87NEJBQ0xoRixZQUFZQTs0QkFDWkssUUFBUUE7NEJBQ1I4TixTQUFTO2dDQUFDLEdBQUdsVCxNQUFNLENBQUN5QyxPQUFPYixTQUFTLEVBQUU7NkJBQWdCLENBQUM1QixNQUFNLENBQUN2RixtQkFBbUJ5WTt3QkFDbkY7b0JBQ0Y7Z0JBQ0Y7WUFDRjtRQUNGO0lBQ0Y7SUFDQS9DLFVBQVUsU0FBU0EsU0FBUzhMLFlBQVk7UUFDdENBLGFBQWFhLGtCQUFrQixHQUFHLFNBQVVwWSxJQUFJLEVBQUV1VixRQUFRO1lBQ3hELElBQUl0SCxRQUFRc0gsU0FBU3RILEtBQUssRUFDdEJwTixZQUFZMFUsU0FBUzFVLFNBQVMsRUFDOUJ3RSxRQUFRa1EsU0FBU2xRLEtBQUs7WUFDMUIsSUFBSTVELFFBQVE7WUFDWixJQUFJRSxTQUFTO1lBRWIsSUFBSTFJLE9BQU87Z0JBQ1QsSUFBSW9mLG1CQUFtQkMsU0FBU0MsaUJBQWlCdlksTUFBTXdZLFFBQVEsRUFBRTtnQkFDakUsSUFBSUMscUJBQXFCelksS0FBSzBZLHFCQUFxQjtnQkFDbkRqWCxRQUFRZ1gsbUJBQW1CaFgsS0FBSyxHQUFHNFc7Z0JBQ25DMVcsU0FBUzhXLG1CQUFtQjlXLE1BQU0sR0FBRzBXO1lBQ3ZDO1lBRUEsSUFBSXRhLE9BQU9ULFFBQVEsSUFBSSxDQUFDMlEsT0FBTztnQkFDN0I1SSxNQUFNaEYsVUFBVSxDQUFDLGNBQWMsR0FBRztZQUNwQztZQUVBLE9BQU9rTSxRQUFRcUQsT0FBTyxDQUFDO2dCQUFDNVA7Z0JBQU00Tyx1QkFBdUI7b0JBQ25ESCxTQUFTek8sS0FBS2hCLFNBQVM7b0JBQ3ZCeUMsT0FBT0E7b0JBQ1BFLFFBQVFBO29CQUNSZCxXQUFXQTtvQkFDWG9OLE9BQU9BO29CQUNQNUksT0FBT0E7b0JBQ1BnSixXQUFXO2dCQUNiO2FBQUc7UUFDTDtJQUNGO0FBQ0Y7QUFFQSxJQUFJc0ssd0JBQXdCLElBQUk1bEIsT0FBTyxLQUFNO0FBQzdDLElBQUk2bEIsMEJBQTBCO0lBQUM7SUFBUztDQUFRO0FBQ2hELFNBQVNDLG9CQUFvQnBLLE9BQU87SUFDbEMsSUFBSXFLLFVBQVVySyxRQUFReGEsT0FBTyxDQUFDMGtCLHVCQUF1QjtJQUNyRCxJQUFJSSxZQUFZdFQsWUFBWXFULFNBQVM7SUFDckMsSUFBSUUsZUFBZUQsYUFBYUgsdUJBQXVCLENBQUMsRUFBRSxJQUFJRyxhQUFhSCx1QkFBdUIsQ0FBQyxFQUFFO0lBQ3JHLElBQUlLLFlBQVlILFFBQVFsbkIsTUFBTSxLQUFLLElBQUlrbkIsT0FBTyxDQUFDLEVBQUUsS0FBS0EsT0FBTyxDQUFDLEVBQUUsR0FBRztJQUNuRSxPQUFPO1FBQ0w1akIsT0FBTytqQixZQUFZM1QsTUFBTXdULE9BQU8sQ0FBQyxFQUFFLElBQUl4VCxNQUFNd1Q7UUFDN0NJLGFBQWFGLGdCQUFnQkM7SUFDL0I7QUFDRjtBQUVBLFNBQVNFLG1CQUFtQm5aLElBQUksRUFBRW9aLFFBQVE7SUFDeEMsSUFBSUMsbUJBQW1CLEdBQUcvZCxNQUFNLENBQUN4QixnQ0FBZ0N3QixNQUFNLENBQUM4ZCxTQUFTbmxCLE9BQU8sQ0FBQyxLQUFLO0lBQzlGLE9BQU8sSUFBSXNZLFFBQVEsU0FBVXFELE9BQU8sRUFBRXBELE1BQU07UUFDMUMsSUFBSXhNLEtBQUt2RCxZQUFZLENBQUM0YyxzQkFBc0IsTUFBTTtZQUNoRCx1Q0FBdUM7WUFDdkMsT0FBT3pKO1FBQ1Q7UUFFQSxJQUFJNUwsV0FBV25FLFFBQVFHLEtBQUtnRSxRQUFRO1FBQ3BDLElBQUlzVixnQ0FBZ0N0VixTQUFTOVMsTUFBTSxDQUFDLFNBQVUwVCxDQUFDO1lBQzdELE9BQU9BLEVBQUVuSSxZQUFZLENBQUM1Qyw0QkFBNEJ1ZjtRQUNwRCxFQUFFLENBQUMsRUFBRTtRQUNMLElBQUkxWSxTQUFTbkksT0FBT2dnQixnQkFBZ0IsQ0FBQ3ZZLE1BQU1vWjtRQUMzQyxJQUFJRyxhQUFhN1ksT0FBTzhZLGdCQUFnQixDQUFDLGVBQWUxTSxLQUFLLENBQUM1UjtRQUM5RCxJQUFJdWUsYUFBYS9ZLE9BQU84WSxnQkFBZ0IsQ0FBQztRQUN6QyxJQUFJL0ssVUFBVS9OLE9BQU84WSxnQkFBZ0IsQ0FBQztRQUV0QyxJQUFJRixpQ0FBaUMsQ0FBQ0MsWUFBWTtZQUNoRCxpR0FBaUc7WUFDakcsOEZBQThGO1lBQzlGLDZDQUE2QztZQUM3Q3ZaLEtBQUswWixXQUFXLENBQUNKO1lBQ2pCLE9BQU8xSjtRQUNULE9BQU8sSUFBSTJKLGNBQWM5SyxZQUFZLFVBQVVBLFlBQVksSUFBSTtZQUM3RCxJQUFJa0wsV0FBV2paLE9BQU84WSxnQkFBZ0IsQ0FBQztZQUV2QyxJQUFJaFIsU0FBUyxDQUFDO2dCQUFDO2FBQVEsQ0FBQ3RQLE9BQU8sQ0FBQ3FnQixVQUFVLENBQUMsRUFBRSxJQUFJaGYsZUFBZUQ7WUFDaEUsSUFBSThKLFNBQVMsQ0FBQztnQkFBQztnQkFBUztnQkFBVztnQkFBUztnQkFBUTtnQkFBVztnQkFBVTthQUFNLENBQUNsTCxPQUFPLENBQUNxZ0IsVUFBVSxDQUFDLEVBQUUsSUFBSTFlLGVBQWUsQ0FBQzJOLE9BQU8sQ0FBQytRLFVBQVUsQ0FBQyxFQUFFLENBQUNLLFdBQVcsR0FBRyxHQUFHemUscUJBQXFCLENBQUNxTixPQUFPLENBQUNpUixXQUFXO1lBRXpNLElBQUlJLHVCQUF1QmhCLG9CQUFvQmMsV0FDM0NHLFdBQVdELHFCQUFxQjNrQixLQUFLLEVBQ3JDZ2tCLGNBQWNXLHFCQUFxQlgsV0FBVztZQUVsRCxJQUFJYSxPQUFPUixVQUFVLENBQUMsRUFBRSxDQUFDUyxVQUFVLENBQUM7WUFDcEMsSUFBSTNWLFdBQVdvRSxVQUFVckUsUUFBUTBWO1lBQ2pDLElBQUlHLGlCQUFpQjVWO1lBRXJCLElBQUkwVixNQUFNO2dCQUNSLElBQUlHLFlBQVlwUixhQUFhZ1I7Z0JBRTdCLElBQUlJLFVBQVU3VixRQUFRLElBQUk2VixVQUFVOVYsTUFBTSxFQUFFO29CQUMxQ0MsV0FBVzZWLFVBQVU3VixRQUFRO29CQUM3QkQsU0FBUzhWLFVBQVU5VixNQUFNO2dCQUMzQjtZQUNGLEVBQUUsK0ZBQStGO1lBQ2pHLG9EQUFvRDtZQUdwRCxJQUFJQyxZQUFZLENBQUM2VSxlQUFnQixFQUFDSSxpQ0FBaUNBLDhCQUE4QjdjLFlBQVksQ0FBQzFDLGlCQUFpQnFLLFVBQVVrViw4QkFBOEI3YyxZQUFZLENBQUN6QyxlQUFlaWdCLGNBQWEsR0FBSTtnQkFDbE5qYSxLQUFLakIsWUFBWSxDQUFDc2Esa0JBQWtCWTtnQkFFcEMsSUFBSVgsK0JBQStCO29CQUNqQyw4REFBOEQ7b0JBQzlEdFosS0FBSzBaLFdBQVcsQ0FBQ0o7Z0JBQ25CO2dCQUVBLElBQUlhLE9BQU9yRjtnQkFDWCxJQUFJelAsUUFBUThVLEtBQUs5VSxLQUFLO2dCQUN0QkEsTUFBTWhGLFVBQVUsQ0FBQ3hHLHVCQUF1QixHQUFHdWY7Z0JBQzNDekosU0FBU3RMLFVBQVVELFFBQVFnUyxJQUFJLENBQUMsU0FBVTNJLElBQUk7b0JBQzVDLElBQUk2RCxZQUFZdkQsc0JBQXNCdmMsZUFBZUEsZUFBZSxDQUFDLEdBQUcyb0IsT0FBTyxDQUFDLEdBQUc7d0JBQ2pGclUsT0FBTzs0QkFDTDJILE1BQU1BOzRCQUNOQyxNQUFNeEU7d0JBQ1I7d0JBQ0E5RSxRQUFRQTt3QkFDUkMsVUFBVTRWO3dCQUNWNVUsT0FBT0E7d0JBQ1BnSixXQUFXO29CQUNiO29CQUVBLElBQUk5UixVQUFVL0QsU0FBU2tZLGVBQWUsQ0FBQyw4QkFBOEI7b0JBRXJFLElBQUkwSSxhQUFhLFlBQVk7d0JBQzNCcFosS0FBS1QsWUFBWSxDQUFDaEQsU0FBU3lELEtBQUt1VSxVQUFVO29CQUM1QyxPQUFPO3dCQUNMdlUsS0FBS2dSLFdBQVcsQ0FBQ3pVO29CQUNuQjtvQkFFQUEsUUFBUTRVLFNBQVMsR0FBR0csVUFBVXZWLEdBQUcsQ0FBQyxTQUFVMkksQ0FBQzt3QkFDM0MsT0FBT2YsT0FBT2U7b0JBQ2hCLEdBQUdULElBQUksQ0FBQztvQkFDUmpFLEtBQUtnUyxlQUFlLENBQUNxSDtvQkFDckJ6SjtnQkFDRixHQUFHMEcsS0FBSyxDQUFDOUo7WUFDWCxPQUFPO2dCQUNMb0Q7WUFDRjtRQUNGLE9BQU87WUFDTEE7UUFDRjtJQUNGO0FBQ0Y7QUFFQSxTQUFTM2IsUUFBUStMLElBQUk7SUFDbkIsT0FBT3VNLFFBQVE0SixHQUFHLENBQUM7UUFBQ2dELG1CQUFtQm5aLE1BQU07UUFBYW1aLG1CQUFtQm5aLE1BQU07S0FBVztBQUNoRztBQUVBLFNBQVNvYSxZQUFZcGEsSUFBSTtJQUN2QixPQUFPQSxLQUFLcVIsVUFBVSxLQUFLdFosU0FBU2UsSUFBSSxJQUFJLENBQUMsQ0FBQ3FCLG9DQUFvQ2pCLE9BQU8sQ0FBQzhHLEtBQUtYLE9BQU8sQ0FBQ0MsV0FBVyxPQUFPLENBQUNVLEtBQUt2RCxZQUFZLENBQUM1QywyQkFBNEIsRUFBQ21HLEtBQUtxUixVQUFVLElBQUlyUixLQUFLcVIsVUFBVSxDQUFDaFMsT0FBTyxLQUFLLEtBQUk7QUFDOU47QUFFQSxTQUFTOUIscUJBQXFCbVksSUFBSTtJQUNoQyxJQUFJLENBQUM5YyxRQUFRO0lBQ2IsT0FBTyxJQUFJMlQsUUFBUSxTQUFVcUQsT0FBTyxFQUFFcEQsTUFBTTtRQUMxQyxJQUFJNk4sYUFBYXhhLFFBQVE2VixLQUFLUSxnQkFBZ0IsQ0FBQyxNQUFNaGxCLE1BQU0sQ0FBQ2twQixhQUFhcmUsR0FBRyxDQUFDOUg7UUFDN0UsSUFBSStiLE1BQU1DLEtBQUtGLEtBQUssQ0FBQztRQUNyQjRDO1FBQ0FwRyxRQUFRNEosR0FBRyxDQUFDa0UsWUFBWWpFLElBQUksQ0FBQztZQUMzQnBHO1lBQ0E0QztZQUNBaEQ7UUFDRixHQUFHMEcsS0FBSyxDQUFDO1lBQ1B0RztZQUNBNEM7WUFDQXBHO1FBQ0Y7SUFDRjtBQUNGO0FBRUEsSUFBSThOLGlCQUFpQjtJQUNuQjFYLE9BQU8sU0FBU0E7UUFDZCxPQUFPO1lBQ0wwVSwyQkFBMkIsU0FBU0EsMEJBQTBCM0wsV0FBVztnQkFDdkVBLFlBQVkwSCxzQkFBc0IsR0FBRzlWO2dCQUNyQyxPQUFPb087WUFDVDtRQUNGO0lBQ0Y7SUFDQUYsVUFBVSxTQUFTQSxTQUFTOEwsWUFBWTtRQUN0Q0EsYUFBYWdELGtCQUFrQixHQUFHLFNBQVV0VSxNQUFNO1lBQ2hELElBQUl1UixlQUFldlIsT0FBT2pHLElBQUksRUFDMUJBLE9BQU93WCxpQkFBaUIsS0FBSyxJQUFJaGYsV0FBV2dmO1lBRWhELElBQUl6WixPQUFPUixvQkFBb0IsRUFBRTtnQkFDL0JBLHFCQUFxQnlDO1lBQ3ZCO1FBQ0Y7SUFDRjtBQUNGO0FBRUEsSUFBSXdhLGFBQWE7QUFDakIsSUFBSUMscUJBQXFCO0lBQ3ZCL1gsUUFBUSxTQUFTQTtRQUNmLE9BQU87WUFDTEMsS0FBSztnQkFDSCtYLFNBQVMsU0FBU0E7b0JBQ2hCL0g7b0JBQ0E2SCxhQUFhO2dCQUNmO1lBQ0Y7UUFDRjtJQUNGO0lBQ0E1WCxPQUFPLFNBQVNBO1FBQ2QsT0FBTztZQUNMK1gsV0FBVyxTQUFTQTtnQkFDbEI3SCxRQUFRcEgsV0FBVyw2QkFBNkIsQ0FBQztZQUNuRDtZQUNBVyxRQUFRLFNBQVNBO2dCQUNmNEg7WUFDRjtZQUNBeEgsT0FBTyxTQUFTQSxNQUFNeEcsTUFBTTtnQkFDMUIsSUFBSXNOLHVCQUF1QnROLE9BQU9zTixvQkFBb0I7Z0JBRXRELElBQUlpSCxZQUFZO29CQUNkNUg7Z0JBQ0YsT0FBTztvQkFDTEUsUUFBUXBILFdBQVcsNkJBQTZCO3dCQUM5QzZILHNCQUFzQkE7b0JBQ3hCO2dCQUNGO1lBQ0Y7UUFDRjtJQUNGO0FBQ0Y7QUFFQSxJQUFJcUgsdUJBQXVCLFNBQVNBLHFCQUFxQkMsZUFBZTtJQUN0RSxJQUFJaGEsWUFBWTtRQUNkdkMsTUFBTTtRQUNOQyxHQUFHO1FBQ0hDLEdBQUc7UUFDSEUsT0FBTztRQUNQQyxPQUFPO1FBQ1BGLFFBQVE7SUFDVjtJQUNBLE9BQU9vYyxnQkFBZ0JqQixXQUFXLEdBQUcxWixLQUFLLENBQUMsS0FBS3hNLE1BQU0sQ0FBQyxTQUFVNE0sR0FBRyxFQUFFcEosQ0FBQztRQUNyRSxJQUFJd1EsUUFBUXhRLEVBQUUwaUIsV0FBVyxHQUFHMVosS0FBSyxDQUFDO1FBQ2xDLElBQUl5RixRQUFRK0IsS0FBSyxDQUFDLEVBQUU7UUFDcEIsSUFBSXlCLE9BQU96QixNQUFNclQsS0FBSyxDQUFDLEdBQUc0UCxJQUFJLENBQUM7UUFFL0IsSUFBSTBCLFNBQVN3RCxTQUFTLEtBQUs7WUFDekI3SSxJQUFJNUIsS0FBSyxHQUFHO1lBQ1osT0FBTzRCO1FBQ1Q7UUFFQSxJQUFJcUYsU0FBU3dELFNBQVMsS0FBSztZQUN6QjdJLElBQUkzQixLQUFLLEdBQUc7WUFDWixPQUFPMkI7UUFDVDtRQUVBNkksT0FBTzJSLFdBQVczUjtRQUVsQixJQUFJNFIsTUFBTTVSLE9BQU87WUFDZixPQUFPN0k7UUFDVDtRQUVBLE9BQVFxRjtZQUNOLEtBQUs7Z0JBQ0hyRixJQUFJaEMsSUFBSSxHQUFHZ0MsSUFBSWhDLElBQUksR0FBRzZLO2dCQUN0QjtZQUVGLEtBQUs7Z0JBQ0g3SSxJQUFJaEMsSUFBSSxHQUFHZ0MsSUFBSWhDLElBQUksR0FBRzZLO2dCQUN0QjtZQUVGLEtBQUs7Z0JBQ0g3SSxJQUFJL0IsQ0FBQyxHQUFHK0IsSUFBSS9CLENBQUMsR0FBRzRLO2dCQUNoQjtZQUVGLEtBQUs7Z0JBQ0g3SSxJQUFJL0IsQ0FBQyxHQUFHK0IsSUFBSS9CLENBQUMsR0FBRzRLO2dCQUNoQjtZQUVGLEtBQUs7Z0JBQ0g3SSxJQUFJOUIsQ0FBQyxHQUFHOEIsSUFBSTlCLENBQUMsR0FBRzJLO2dCQUNoQjtZQUVGLEtBQUs7Z0JBQ0g3SSxJQUFJOUIsQ0FBQyxHQUFHOEIsSUFBSTlCLENBQUMsR0FBRzJLO2dCQUNoQjtZQUVGLEtBQUs7Z0JBQ0g3SSxJQUFJN0IsTUFBTSxHQUFHNkIsSUFBSTdCLE1BQU0sR0FBRzBLO2dCQUMxQjtRQUNKO1FBRUEsT0FBTzdJO0lBQ1QsR0FBR087QUFDTDtBQUNBLElBQUltYSxrQkFBa0I7SUFDcEJ0WSxRQUFRLFNBQVNBO1FBQ2YsT0FBTztZQUNMa0ssT0FBTztnQkFDTC9MLFdBQVcsU0FBU0EsVUFBVWdhLGVBQWU7b0JBQzNDLE9BQU9ELHFCQUFxQkM7Z0JBQzlCO1lBQ0Y7UUFDRjtJQUNGO0lBQ0FqWSxPQUFPLFNBQVNBO1FBQ2QsT0FBTztZQUNMcVkscUJBQXFCLFNBQVNBLG9CQUFvQnRQLFdBQVcsRUFBRTNMLElBQUk7Z0JBQ2pFLElBQUk2YSxrQkFBa0I3YSxLQUFLdkQsWUFBWSxDQUFDO2dCQUV4QyxJQUFJb2UsaUJBQWlCO29CQUNuQmxQLFlBQVk5SyxTQUFTLEdBQUcrWixxQkFBcUJDO2dCQUMvQztnQkFFQSxPQUFPbFA7WUFDVDtRQUNGO0lBQ0Y7SUFDQUYsVUFBVSxTQUFTQSxTQUFTVixTQUFTO1FBQ25DQSxVQUFVbVEsaUNBQWlDLEdBQUcsU0FBVS9pQixJQUFJO1lBQzFELElBQUlzVixPQUFPdFYsS0FBS3NWLElBQUksRUFDaEI1TSxZQUFZMUksS0FBSzBJLFNBQVMsRUFDMUJFLGlCQUFpQjVJLEtBQUs0SSxjQUFjLEVBQ3BDQyxZQUFZN0ksS0FBSzZJLFNBQVM7WUFDOUIsSUFBSUMsUUFBUTtnQkFDVkosV0FBVyxhQUFhdkYsTUFBTSxDQUFDeUYsaUJBQWlCLEdBQUc7WUFDckQ7WUFDQSxJQUFJRyxpQkFBaUIsYUFBYTVGLE1BQU0sQ0FBQ3VGLFVBQVV0QyxDQUFDLEdBQUcsSUFBSSxNQUFNakQsTUFBTSxDQUFDdUYsVUFBVXJDLENBQUMsR0FBRyxJQUFJO1lBQzFGLElBQUkyQyxhQUFhLFNBQVM3RixNQUFNLENBQUN1RixVQUFVdkMsSUFBSSxHQUFHLEtBQU11QyxDQUFBQSxVQUFVbkMsS0FBSyxHQUFHLENBQUMsSUFBSSxJQUFJLE1BQU1wRCxNQUFNLENBQUN1RixVQUFVdkMsSUFBSSxHQUFHLEtBQU11QyxDQUFBQSxVQUFVbEMsS0FBSyxHQUFHLENBQUMsSUFBSSxJQUFJO1lBQ2xKLElBQUl5QyxjQUFjLFVBQVU5RixNQUFNLENBQUN1RixVQUFVcEMsTUFBTSxFQUFFO1lBQ3JELElBQUk0QyxRQUFRO2dCQUNWUixXQUFXLEdBQUd2RixNQUFNLENBQUM0RixnQkFBZ0IsS0FBSzVGLE1BQU0sQ0FBQzZGLFlBQVksS0FBSzdGLE1BQU0sQ0FBQzhGO1lBQzNFO1lBQ0EsSUFBSUUsT0FBTztnQkFDVFQsV0FBVyxhQUFhdkYsTUFBTSxDQUFDMEYsWUFBWSxJQUFJLENBQUMsR0FBRztZQUNyRDtZQUNBLElBQUlxWixhQUFhO2dCQUNmcFosT0FBT0E7Z0JBQ1BJLE9BQU9BO2dCQUNQQyxNQUFNQTtZQUNSO1lBQ0EsT0FBTztnQkFDTHVDLEtBQUs7Z0JBQ0x4RCxZQUFZN08sZUFBZSxDQUFDLEdBQUc2b0IsV0FBV3BaLEtBQUs7Z0JBQy9DK0MsVUFBVTtvQkFBQzt3QkFDVEgsS0FBSzt3QkFDTHhELFlBQVk3TyxlQUFlLENBQUMsR0FBRzZvQixXQUFXaFosS0FBSzt3QkFDL0MyQyxVQUFVOzRCQUFDO2dDQUNUSCxLQUFLNEosS0FBS25KLElBQUksQ0FBQ1QsR0FBRztnQ0FDbEJHLFVBQVV5SixLQUFLbkosSUFBSSxDQUFDTixRQUFRO2dDQUM1QjNELFlBQVk3TyxlQUFlQSxlQUFlLENBQUMsR0FBR2ljLEtBQUtuSixJQUFJLENBQUNqRSxVQUFVLEdBQUdnYSxXQUFXL1ksSUFBSTs0QkFDdEY7eUJBQUU7b0JBQ0o7aUJBQUU7WUFDSjtRQUNGO0lBQ0Y7QUFDRjtBQUVBLElBQUk2WixZQUFZO0lBQ2Q1YyxHQUFHO0lBQ0hDLEdBQUc7SUFDSGlELE9BQU87SUFDUEUsUUFBUTtBQUNWO0FBRUEsU0FBU3laLFVBQVU5SixTQUFTO0lBQzFCLElBQUkrSixRQUFRMXBCLFVBQVVDLE1BQU0sR0FBRyxLQUFLRCxTQUFTLENBQUMsRUFBRSxLQUFLbUwsWUFBWW5MLFNBQVMsQ0FBQyxFQUFFLEdBQUc7SUFFaEYsSUFBSTJmLFVBQVVqUixVQUFVLElBQUtpUixDQUFBQSxVQUFValIsVUFBVSxDQUFDaVAsSUFBSSxJQUFJK0wsS0FBSSxHQUFJO1FBQ2hFL0osVUFBVWpSLFVBQVUsQ0FBQ2lQLElBQUksR0FBRztJQUM5QjtJQUVBLE9BQU9nQztBQUNUO0FBRUEsU0FBU2dLLFFBQVEzSixVQUFVO0lBQ3pCLElBQUlBLFdBQVc5TixHQUFHLEtBQUssS0FBSztRQUMxQixPQUFPOE4sV0FBVzNOLFFBQVE7SUFDNUIsT0FBTztRQUNMLE9BQU87WUFBQzJOO1NBQVc7SUFDckI7QUFDRjtBQUVBLElBQUk0SixRQUFRO0lBQ1YzWSxPQUFPLFNBQVNBO1FBQ2QsT0FBTztZQUNMcVkscUJBQXFCLFNBQVNBLG9CQUFvQnRQLFdBQVcsRUFBRTNMLElBQUk7Z0JBQ2pFLElBQUl3YixXQUFXeGIsS0FBS3ZELFlBQVksQ0FBQztnQkFDakMsSUFBSWlSLE9BQU8sQ0FBQzhOLFdBQVd0Uyx1QkFBdUJNLGlCQUFpQmdTLFNBQVN0YixLQUFLLENBQUMsS0FBS25FLEdBQUcsQ0FBQyxTQUFVckssQ0FBQztvQkFDaEcsT0FBT0EsRUFBRThPLElBQUk7Z0JBQ2Y7Z0JBRUEsSUFBSSxDQUFDa04sS0FBS3RKLE1BQU0sRUFBRTtvQkFDaEJzSixLQUFLdEosTUFBTSxHQUFHNkU7Z0JBQ2hCO2dCQUVBMEMsWUFBWStCLElBQUksR0FBR0E7Z0JBQ25CL0IsWUFBWXVDLE1BQU0sR0FBR2xPLEtBQUt2RCxZQUFZLENBQUM7Z0JBQ3ZDLE9BQU9rUDtZQUNUO1FBQ0Y7SUFDRjtJQUNBRixVQUFVLFNBQVNBLFNBQVNWLFNBQVM7UUFDbkNBLFVBQVUwUSxvQkFBb0IsR0FBRyxTQUFVdGpCLElBQUk7WUFDN0MsSUFBSTZMLFdBQVc3TCxLQUFLNkwsUUFBUSxFQUN4QjNELGFBQWFsSSxLQUFLa0ksVUFBVSxFQUM1Qm9OLE9BQU90VixLQUFLc1YsSUFBSSxFQUNoQkMsT0FBT3ZWLEtBQUt1VixJQUFJLEVBQ2hCZ08saUJBQWlCdmpCLEtBQUsrVixNQUFNLEVBQzVCck4sWUFBWTFJLEtBQUswSSxTQUFTO1lBQzlCLElBQUk4YSxZQUFZbE8sS0FBS2hNLEtBQUssRUFDdEJtYSxXQUFXbk8sS0FBS25KLElBQUk7WUFDeEIsSUFBSXVYLFlBQVluTyxLQUFLak0sS0FBSyxFQUN0QnFhLFdBQVdwTyxLQUFLcEosSUFBSTtZQUN4QixJQUFJeVgsUUFBUWpiLGdCQUFnQjtnQkFDMUJELFdBQVdBO2dCQUNYRSxnQkFBZ0I4YTtnQkFDaEI3YSxXQUFXMmE7WUFDYjtZQUNBLElBQUlLLFdBQVc7Z0JBQ2JuWSxLQUFLO2dCQUNMeEQsWUFBWTdPLGVBQWVBLGVBQWUsQ0FBQyxHQUFHMnBCLFlBQVksQ0FBQyxHQUFHO29CQUM1RDdMLE1BQU07Z0JBQ1I7WUFDRjtZQUNBLElBQUkyTSw4QkFBOEJMLFNBQVM1WCxRQUFRLEdBQUc7Z0JBQ3BEQSxVQUFVNFgsU0FBUzVYLFFBQVEsQ0FBQ2pJLEdBQUcsQ0FBQ3FmO1lBQ2xDLElBQUksQ0FBQztZQUNMLElBQUljLGlCQUFpQjtnQkFDbkJyWSxLQUFLO2dCQUNMeEQsWUFBWTdPLGVBQWUsQ0FBQyxHQUFHdXFCLE1BQU0xYSxLQUFLO2dCQUMxQzJDLFVBQVU7b0JBQUNvWCxVQUFVNXBCLGVBQWU7d0JBQ2xDcVMsS0FBSytYLFNBQVMvWCxHQUFHO3dCQUNqQnhELFlBQVk3TyxlQUFlQSxlQUFlLENBQUMsR0FBR29xQixTQUFTdmIsVUFBVSxHQUFHMGIsTUFBTXphLElBQUk7b0JBQ2hGLEdBQUcyYTtpQkFBOEI7WUFDbkM7WUFDQSxJQUFJRSxpQkFBaUI7Z0JBQ25CdFksS0FBSztnQkFDTHhELFlBQVk3TyxlQUFlLENBQUMsR0FBR3VxQixNQUFNOWEsS0FBSztnQkFDMUMrQyxVQUFVO29CQUFDa1k7aUJBQWU7WUFDNUI7WUFDQSxJQUFJaE8sU0FBUyxRQUFRNVMsTUFBTSxDQUFDb2dCLGtCQUFrQmpjO1lBQzlDLElBQUkyYyxTQUFTLFFBQVE5Z0IsTUFBTSxDQUFDb2dCLGtCQUFrQmpjO1lBQzlDLElBQUk0YyxVQUFVO2dCQUNaeFksS0FBSztnQkFDTHhELFlBQVk3TyxlQUFlQSxlQUFlLENBQUMsR0FBRzJwQixZQUFZLENBQUMsR0FBRztvQkFDNUR6YixJQUFJd087b0JBQ0pvTyxXQUFXO29CQUNYQyxrQkFBa0I7Z0JBQ3BCO2dCQUNBdlksVUFBVTtvQkFBQ2dZO29CQUFVRztpQkFBZTtZQUN0QztZQUNBLElBQUlLLE9BQU87Z0JBQ1QzWSxLQUFLO2dCQUNMRyxVQUFVO29CQUFDO3dCQUNUSCxLQUFLO3dCQUNMeEQsWUFBWTs0QkFDVlgsSUFBSTBjO3dCQUNOO3dCQUNBcFksVUFBVXNYLFFBQVFRO29CQUNwQjtvQkFBR087aUJBQVE7WUFDYjtZQUNBclksU0FBUzFTLElBQUksQ0FBQ2tyQixNQUFNO2dCQUNsQjNZLEtBQUs7Z0JBQ0x4RCxZQUFZN08sZUFBZTtvQkFDekI4ZCxNQUFNO29CQUNOLGFBQWEsUUFBUWhVLE1BQU0sQ0FBQzhnQixRQUFRO29CQUNwQzFPLE1BQU0sUUFBUXBTLE1BQU0sQ0FBQzRTLFFBQVE7Z0JBQy9CLEdBQUdpTjtZQUNMO1lBQ0EsT0FBTztnQkFDTG5YLFVBQVVBO2dCQUNWM0QsWUFBWUE7WUFDZDtRQUNGO0lBQ0Y7QUFDRjtBQUVBLElBQUlvYyx1QkFBdUI7SUFDekJoUixVQUFVLFNBQVNBLFNBQVNWLFNBQVM7UUFDbkMsSUFBSTJSLGVBQWU7UUFFbkIsSUFBSW5rQixPQUFPb2tCLFVBQVUsRUFBRTtZQUNyQkQsZUFBZW5rQixPQUFPb2tCLFVBQVUsQ0FBQyxvQ0FBb0NDLE9BQU87UUFDOUU7UUFFQTdSLFVBQVU4UixtQkFBbUIsR0FBRztZQUM5QixJQUFJQyxZQUFZLEVBQUU7WUFDbEIsSUFBSUMsT0FBTztnQkFDVHpOLE1BQU07WUFDUjtZQUNBLElBQUkwTixpQkFBaUI7Z0JBQ25CQyxlQUFlO2dCQUNmQyxhQUFhO2dCQUNiQyxLQUFLO1lBQ1AsR0FBRyxPQUFPO1lBRVZMLFVBQVV4ckIsSUFBSSxDQUFDO2dCQUNidVMsS0FBSztnQkFDTHhELFlBQVk3TyxlQUFlQSxlQUFlLENBQUMsR0FBR3VyQixPQUFPLENBQUMsR0FBRztvQkFDdkQzZSxHQUFHO2dCQUNMO1lBQ0Y7WUFFQSxJQUFJZ2Ysa0JBQWtCNXJCLGVBQWVBLGVBQWUsQ0FBQyxHQUFHd3JCLGlCQUFpQixDQUFDLEdBQUc7Z0JBQzNFemMsZUFBZTtZQUNqQjtZQUVBLElBQUk4YyxNQUFNO2dCQUNSeFosS0FBSztnQkFDTHhELFlBQVk3TyxlQUFlQSxlQUFlLENBQUMsR0FBR3VyQixPQUFPLENBQUMsR0FBRztvQkFDdkRPLElBQUk7b0JBQ0pDLElBQUk7b0JBQ0pDLEdBQUc7Z0JBQ0w7Z0JBQ0F4WixVQUFVLEVBQUU7WUFDZDtZQUVBLElBQUksQ0FBQzBZLGNBQWM7Z0JBQ2pCVyxJQUFJclosUUFBUSxDQUFDMVMsSUFBSSxDQUFDO29CQUNoQnVTLEtBQUs7b0JBQ0x4RCxZQUFZN08sZUFBZUEsZUFBZSxDQUFDLEdBQUd3ckIsaUJBQWlCLENBQUMsR0FBRzt3QkFDakV6YyxlQUFlO3dCQUNmd0csUUFBUTtvQkFDVjtnQkFDRixHQUFHO29CQUNEbEQsS0FBSztvQkFDTHhELFlBQVk3TyxlQUFlQSxlQUFlLENBQUMsR0FBRzRyQixrQkFBa0IsQ0FBQyxHQUFHO3dCQUNsRXJXLFFBQVE7b0JBQ1Y7Z0JBQ0Y7WUFDRjtZQUVBK1YsVUFBVXhyQixJQUFJLENBQUMrckI7WUFDZlAsVUFBVXhyQixJQUFJLENBQUM7Z0JBQ2J1UyxLQUFLO2dCQUNMeEQsWUFBWTdPLGVBQWVBLGVBQWUsQ0FBQyxHQUFHdXJCLE9BQU8sQ0FBQyxHQUFHO29CQUN2RFUsU0FBUztvQkFDVHJmLEdBQUc7Z0JBQ0w7Z0JBQ0E0RixVQUFVMFksZUFBZSxFQUFFLEdBQUc7b0JBQUM7d0JBQzdCN1ksS0FBSzt3QkFDTHhELFlBQVk3TyxlQUFlQSxlQUFlLENBQUMsR0FBRzRyQixrQkFBa0IsQ0FBQyxHQUFHOzRCQUNsRXJXLFFBQVE7d0JBQ1Y7b0JBQ0Y7aUJBQUU7WUFDSjtZQUVBLElBQUksQ0FBQzJWLGNBQWM7Z0JBQ2pCLGNBQWM7Z0JBQ2RJLFVBQVV4ckIsSUFBSSxDQUFDO29CQUNidVMsS0FBSztvQkFDTHhELFlBQVk3TyxlQUFlQSxlQUFlLENBQUMsR0FBR3VyQixPQUFPLENBQUMsR0FBRzt3QkFDdkRVLFNBQVM7d0JBQ1RyZixHQUFHO29CQUNMO29CQUNBNEYsVUFBVTt3QkFBQzs0QkFDVEgsS0FBSzs0QkFDTHhELFlBQVk3TyxlQUFlQSxlQUFlLENBQUMsR0FBRzRyQixrQkFBa0IsQ0FBQyxHQUFHO2dDQUNsRXJXLFFBQVE7NEJBQ1Y7d0JBQ0Y7cUJBQUU7Z0JBQ0o7WUFDRjtZQUVBLE9BQU87Z0JBQ0xsRCxLQUFLO2dCQUNMeEQsWUFBWTtvQkFDVixTQUFTO2dCQUNYO2dCQUNBMkQsVUFBVThZO1lBQ1o7UUFDRjtJQUNGO0FBQ0Y7QUFFQSxJQUFJWSxhQUFhO0lBQ2Y5YSxPQUFPLFNBQVNBO1FBQ2QsT0FBTztZQUNMcVkscUJBQXFCLFNBQVNBLG9CQUFvQnRQLFdBQVcsRUFBRTNMLElBQUk7Z0JBQ2pFLElBQUkyZCxhQUFhM2QsS0FBS3ZELFlBQVksQ0FBQztnQkFDbkMsSUFBSXFSLFNBQVM2UCxlQUFlLE9BQU8sUUFBUUEsZUFBZSxLQUFLLE9BQU9BO2dCQUN0RWhTLFdBQVcsQ0FBQyxTQUFTLEdBQUdtQztnQkFDeEIsT0FBT25DO1lBQ1Q7UUFDRjtJQUNGO0FBQ0Y7QUFFQSxJQUFJaVMsVUFBVTtJQUFDbmI7SUFBVzRVO0lBQWlCUztJQUFRRztJQUFlQztJQUFZb0M7SUFBZ0JHO0lBQW9CTztJQUFpQk87SUFBT2tCO0lBQXNCaUI7Q0FBVztBQUUzS3pTLGdCQUFnQjJTLFNBQVM7SUFDdkJ6UyxXQUFXOEI7QUFDYjtBQUNBLElBQUk0USxXQUFXNVEsSUFBSVosTUFBTTtBQUN6QixJQUFJeVIsV0FBVzdRLElBQUlsUCxNQUFNO0FBQ3pCLElBQUlnZ0IsWUFBWTlRLElBQUliLE9BQU87QUFDM0IsSUFBSTRSLFFBQVEvUSxJQUFJdEssR0FBRztBQUNuQixJQUFJc2IsVUFBVWhSLElBQUlMLEtBQUs7QUFDdkIsSUFBSXNSLHVCQUF1QmpSLElBQUlmLGtCQUFrQjtBQUNqRCxJQUFJaVMsV0FBV2xSLElBQUl0SixNQUFNO0FBQ3pCLElBQUlXLE9BQU8ySSxJQUFJM0ksSUFBSTtBQUNuQixJQUFJeVQsUUFBUTlLLElBQUk4SyxLQUFLO0FBQ3JCLElBQUlJLE9BQU9sTCxJQUFJa0wsSUFBSTtBQUNuQixJQUFJaFQsVUFBVThILElBQUk5SCxPQUFPO0FBRWdMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmlyc3QtbmV4dC1hcHAvLi4vbm9kZV9tb2R1bGVzL0Bmb3J0YXdlc29tZS9mb250YXdlc29tZS1zdmctY29yZS9pbmRleC5tanM/YzI1YiJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7XG4gICAgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgICB9KSksIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTtcbiAgfVxuXG4gIHJldHVybiBrZXlzO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gbnVsbCAhPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0gOiB7fTtcbiAgICBpICUgMiA/IG93bktleXMoT2JqZWN0KHNvdXJjZSksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgIH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpIDogb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgfSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICB9LCBfdHlwZW9mKG9iaik7XG59XG5cbmZ1bmN0aW9uIF93cmFwUmVnRXhwKCkge1xuICBfd3JhcFJlZ0V4cCA9IGZ1bmN0aW9uIChyZSwgZ3JvdXBzKSB7XG4gICAgcmV0dXJuIG5ldyBCYWJlbFJlZ0V4cChyZSwgdm9pZCAwLCBncm91cHMpO1xuICB9O1xuXG4gIHZhciBfc3VwZXIgPSBSZWdFeHAucHJvdG90eXBlLFxuICAgICAgX2dyb3VwcyA9IG5ldyBXZWFrTWFwKCk7XG5cbiAgZnVuY3Rpb24gQmFiZWxSZWdFeHAocmUsIGZsYWdzLCBncm91cHMpIHtcbiAgICB2YXIgX3RoaXMgPSBuZXcgUmVnRXhwKHJlLCBmbGFncyk7XG5cbiAgICByZXR1cm4gX2dyb3Vwcy5zZXQoX3RoaXMsIGdyb3VwcyB8fCBfZ3JvdXBzLmdldChyZSkpLCBfc2V0UHJvdG90eXBlT2YoX3RoaXMsIEJhYmVsUmVnRXhwLnByb3RvdHlwZSk7XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZEdyb3VwcyhyZXN1bHQsIHJlKSB7XG4gICAgdmFyIGcgPSBfZ3JvdXBzLmdldChyZSk7XG5cbiAgICByZXR1cm4gT2JqZWN0LmtleXMoZykucmVkdWNlKGZ1bmN0aW9uIChncm91cHMsIG5hbWUpIHtcbiAgICAgIHJldHVybiBncm91cHNbbmFtZV0gPSByZXN1bHRbZ1tuYW1lXV0sIGdyb3VwcztcbiAgICB9LCBPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgfVxuXG4gIHJldHVybiBfaW5oZXJpdHMoQmFiZWxSZWdFeHAsIFJlZ0V4cCksIEJhYmVsUmVnRXhwLnByb3RvdHlwZS5leGVjID0gZnVuY3Rpb24gKHN0cikge1xuICAgIHZhciByZXN1bHQgPSBfc3VwZXIuZXhlYy5jYWxsKHRoaXMsIHN0cik7XG5cbiAgICByZXR1cm4gcmVzdWx0ICYmIChyZXN1bHQuZ3JvdXBzID0gYnVpbGRHcm91cHMocmVzdWx0LCB0aGlzKSksIHJlc3VsdDtcbiAgfSwgQmFiZWxSZWdFeHAucHJvdG90eXBlW1N5bWJvbC5yZXBsYWNlXSA9IGZ1bmN0aW9uIChzdHIsIHN1YnN0aXR1dGlvbikge1xuICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiBzdWJzdGl0dXRpb24pIHtcbiAgICAgIHZhciBncm91cHMgPSBfZ3JvdXBzLmdldCh0aGlzKTtcblxuICAgICAgcmV0dXJuIF9zdXBlcltTeW1ib2wucmVwbGFjZV0uY2FsbCh0aGlzLCBzdHIsIHN1YnN0aXR1dGlvbi5yZXBsYWNlKC9cXCQ8KFtePl0rKT4vZywgZnVuY3Rpb24gKF8sIG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIFwiJFwiICsgZ3JvdXBzW25hbWVdO1xuICAgICAgfSkpO1xuICAgIH1cblxuICAgIGlmIChcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHN1YnN0aXR1dGlvbikge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgcmV0dXJuIF9zdXBlcltTeW1ib2wucmVwbGFjZV0uY2FsbCh0aGlzLCBzdHIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHJldHVybiBcIm9iamVjdFwiICE9IHR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoIC0gMV0gJiYgKGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3MpKS5wdXNoKGJ1aWxkR3JvdXBzKGFyZ3MsIF90aGlzKSksIHN1YnN0aXR1dGlvbi5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBfc3VwZXJbU3ltYm9sLnJlcGxhY2VdLmNhbGwodGhpcywgc3RyLCBzdWJzdGl0dXRpb24pO1xuICB9LCBfd3JhcFJlZ0V4cC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN1YkNsYXNzLCBcInByb3RvdHlwZVwiLCB7XG4gICAgd3JpdGFibGU6IGZhbHNlXG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkge1xuICByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpO1xufVxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGFycik7XG59XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjtcbn1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGl0ZXJbU3ltYm9sLml0ZXJhdG9yXSAhPSBudWxsIHx8IGl0ZXJbXCJAQGl0ZXJhdG9yXCJdICE9IG51bGwpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7XG4gIHZhciBfaSA9IGFyciA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgYXJyW1N5bWJvbC5pdGVyYXRvcl0gfHwgYXJyW1wiQEBpdGVyYXRvclwiXTtcblxuICBpZiAoX2kgPT0gbnVsbCkgcmV0dXJuO1xuICB2YXIgX2FyciA9IFtdO1xuICB2YXIgX24gPSB0cnVlO1xuICB2YXIgX2QgPSBmYWxzZTtcblxuICB2YXIgX3MsIF9lO1xuXG4gIHRyeSB7XG4gICAgZm9yIChfaSA9IF9pLmNhbGwoYXJyKTsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xuICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcblxuICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2QgPSB0cnVlO1xuICAgIF9lID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9hcnI7XG59XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldO1xuXG4gIHJldHVybiBhcnIyO1xufVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuXG52YXIgbm9vcCA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcblxudmFyIF9XSU5ET1cgPSB7fTtcbnZhciBfRE9DVU1FTlQgPSB7fTtcbnZhciBfTVVUQVRJT05fT0JTRVJWRVIgPSBudWxsO1xudmFyIF9QRVJGT1JNQU5DRSA9IHtcbiAgbWFyazogbm9vcCxcbiAgbWVhc3VyZTogbm9vcFxufTtcblxudHJ5IHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSBfV0lORE9XID0gd2luZG93O1xuICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykgX0RPQ1VNRU5UID0gZG9jdW1lbnQ7XG4gIGlmICh0eXBlb2YgTXV0YXRpb25PYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCcpIF9NVVRBVElPTl9PQlNFUlZFUiA9IE11dGF0aW9uT2JzZXJ2ZXI7XG4gIGlmICh0eXBlb2YgcGVyZm9ybWFuY2UgIT09ICd1bmRlZmluZWQnKSBfUEVSRk9STUFOQ0UgPSBwZXJmb3JtYW5jZTtcbn0gY2F0Y2ggKGUpIHt9XG5cbnZhciBfcmVmID0gX1dJTkRPVy5uYXZpZ2F0b3IgfHwge30sXG4gICAgX3JlZiR1c2VyQWdlbnQgPSBfcmVmLnVzZXJBZ2VudCxcbiAgICB1c2VyQWdlbnQgPSBfcmVmJHVzZXJBZ2VudCA9PT0gdm9pZCAwID8gJycgOiBfcmVmJHVzZXJBZ2VudDtcbnZhciBXSU5ET1cgPSBfV0lORE9XO1xudmFyIERPQ1VNRU5UID0gX0RPQ1VNRU5UO1xudmFyIE1VVEFUSU9OX09CU0VSVkVSID0gX01VVEFUSU9OX09CU0VSVkVSO1xudmFyIFBFUkZPUk1BTkNFID0gX1BFUkZPUk1BTkNFO1xudmFyIElTX0JST1dTRVIgPSAhIVdJTkRPVy5kb2N1bWVudDtcbnZhciBJU19ET00gPSAhIURPQ1VNRU5ULmRvY3VtZW50RWxlbWVudCAmJiAhIURPQ1VNRU5ULmhlYWQgJiYgdHlwZW9mIERPQ1VNRU5ULmFkZEV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIERPQ1VNRU5ULmNyZWF0ZUVsZW1lbnQgPT09ICdmdW5jdGlvbic7XG52YXIgSVNfSUUgPSB+dXNlckFnZW50LmluZGV4T2YoJ01TSUUnKSB8fCB+dXNlckFnZW50LmluZGV4T2YoJ1RyaWRlbnQvJyk7XG5cbnZhciBfZmFtaWx5UHJveHksIF9mYW1pbHlQcm94eTIsIF9mYW1pbHlQcm94eTMsIF9mYW1pbHlQcm94eTQsIF9mYW1pbHlQcm94eTU7XG5cbnZhciBOQU1FU1BBQ0VfSURFTlRJRklFUiA9ICdfX19GT05UX0FXRVNPTUVfX18nO1xudmFyIFVOSVRTX0lOX0dSSUQgPSAxNjtcbnZhciBERUZBVUxUX0NTU19QUkVGSVggPSAnZmEnO1xudmFyIERFRkFVTFRfUkVQTEFDRU1FTlRfQ0xBU1MgPSAnc3ZnLWlubGluZS0tZmEnO1xudmFyIERBVEFfRkFfSTJTVkcgPSAnZGF0YS1mYS1pMnN2Zyc7XG52YXIgREFUQV9GQV9QU0VVRE9fRUxFTUVOVCA9ICdkYXRhLWZhLXBzZXVkby1lbGVtZW50JztcbnZhciBEQVRBX0ZBX1BTRVVET19FTEVNRU5UX1BFTkRJTkcgPSAnZGF0YS1mYS1wc2V1ZG8tZWxlbWVudC1wZW5kaW5nJztcbnZhciBEQVRBX1BSRUZJWCA9ICdkYXRhLXByZWZpeCc7XG52YXIgREFUQV9JQ09OID0gJ2RhdGEtaWNvbic7XG52YXIgSFRNTF9DTEFTU19JMlNWR19CQVNFX0NMQVNTID0gJ2ZvbnRhd2Vzb21lLWkyc3ZnJztcbnZhciBNVVRBVElPTl9BUFBST0FDSF9BU1lOQyA9ICdhc3luYyc7XG52YXIgVEFHTkFNRVNfVE9fU0tJUF9GT1JfUFNFVURPRUxFTUVOVFMgPSBbJ0hUTUwnLCAnSEVBRCcsICdTVFlMRScsICdTQ1JJUFQnXTtcbnZhciBQUk9EVUNUSU9OID0gZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIHJldHVybiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59KCk7XG52YXIgRkFNSUxZX0NMQVNTSUMgPSAnY2xhc3NpYyc7XG52YXIgRkFNSUxZX1NIQVJQID0gJ3NoYXJwJztcbnZhciBGQU1JTElFUyA9IFtGQU1JTFlfQ0xBU1NJQywgRkFNSUxZX1NIQVJQXTtcblxuZnVuY3Rpb24gZmFtaWx5UHJveHkob2JqKSB7XG4gIC8vIERlZmF1bHRzIHRvIHRoZSBjbGFzc2ljIGZhbWlseSBpZiBmYW1pbHkgaXMgbm90IGF2YWlsYWJsZVxuICByZXR1cm4gbmV3IFByb3h5KG9iaiwge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KHRhcmdldCwgcHJvcCkge1xuICAgICAgcmV0dXJuIHByb3AgaW4gdGFyZ2V0ID8gdGFyZ2V0W3Byb3BdIDogdGFyZ2V0W0ZBTUlMWV9DTEFTU0lDXTtcbiAgICB9XG4gIH0pO1xufVxudmFyIFBSRUZJWF9UT19TVFlMRSA9IGZhbWlseVByb3h5KChfZmFtaWx5UHJveHkgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9mYW1pbHlQcm94eSwgRkFNSUxZX0NMQVNTSUMsIHtcbiAgJ2ZhJzogJ3NvbGlkJyxcbiAgJ2Zhcyc6ICdzb2xpZCcsXG4gICdmYS1zb2xpZCc6ICdzb2xpZCcsXG4gICdmYXInOiAncmVndWxhcicsXG4gICdmYS1yZWd1bGFyJzogJ3JlZ3VsYXInLFxuICAnZmFsJzogJ2xpZ2h0JyxcbiAgJ2ZhLWxpZ2h0JzogJ2xpZ2h0JyxcbiAgJ2ZhdCc6ICd0aGluJyxcbiAgJ2ZhLXRoaW4nOiAndGhpbicsXG4gICdmYWQnOiAnZHVvdG9uZScsXG4gICdmYS1kdW90b25lJzogJ2R1b3RvbmUnLFxuICAnZmFiJzogJ2JyYW5kcycsXG4gICdmYS1icmFuZHMnOiAnYnJhbmRzJyxcbiAgJ2Zhayc6ICdraXQnLFxuICAnZmEta2l0JzogJ2tpdCdcbn0pLCBfZGVmaW5lUHJvcGVydHkoX2ZhbWlseVByb3h5LCBGQU1JTFlfU0hBUlAsIHtcbiAgJ2ZhJzogJ3NvbGlkJyxcbiAgJ2Zhc3MnOiAnc29saWQnLFxuICAnZmEtc29saWQnOiAnc29saWQnLFxuICAnZmFzcic6ICdyZWd1bGFyJyxcbiAgJ2ZhLXJlZ3VsYXInOiAncmVndWxhcicsXG4gICdmYXNsJzogJ2xpZ2h0JyxcbiAgJ2ZhLWxpZ2h0JzogJ2xpZ2h0J1xufSksIF9mYW1pbHlQcm94eSkpO1xudmFyIFNUWUxFX1RPX1BSRUZJWCA9IGZhbWlseVByb3h5KChfZmFtaWx5UHJveHkyID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfZmFtaWx5UHJveHkyLCBGQU1JTFlfQ0xBU1NJQywge1xuICAnc29saWQnOiAnZmFzJyxcbiAgJ3JlZ3VsYXInOiAnZmFyJyxcbiAgJ2xpZ2h0JzogJ2ZhbCcsXG4gICd0aGluJzogJ2ZhdCcsXG4gICdkdW90b25lJzogJ2ZhZCcsXG4gICdicmFuZHMnOiAnZmFiJyxcbiAgJ2tpdCc6ICdmYWsnXG59KSwgX2RlZmluZVByb3BlcnR5KF9mYW1pbHlQcm94eTIsIEZBTUlMWV9TSEFSUCwge1xuICAnc29saWQnOiAnZmFzcycsXG4gICdyZWd1bGFyJzogJ2Zhc3InLFxuICAnbGlnaHQnOiAnZmFzbCdcbn0pLCBfZmFtaWx5UHJveHkyKSk7XG52YXIgUFJFRklYX1RPX0xPTkdfU1RZTEUgPSBmYW1pbHlQcm94eSgoX2ZhbWlseVByb3h5MyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2ZhbWlseVByb3h5MywgRkFNSUxZX0NMQVNTSUMsIHtcbiAgJ2ZhYic6ICdmYS1icmFuZHMnLFxuICAnZmFkJzogJ2ZhLWR1b3RvbmUnLFxuICAnZmFrJzogJ2ZhLWtpdCcsXG4gICdmYWwnOiAnZmEtbGlnaHQnLFxuICAnZmFyJzogJ2ZhLXJlZ3VsYXInLFxuICAnZmFzJzogJ2ZhLXNvbGlkJyxcbiAgJ2ZhdCc6ICdmYS10aGluJ1xufSksIF9kZWZpbmVQcm9wZXJ0eShfZmFtaWx5UHJveHkzLCBGQU1JTFlfU0hBUlAsIHtcbiAgJ2Zhc3MnOiAnZmEtc29saWQnLFxuICAnZmFzcic6ICdmYS1yZWd1bGFyJyxcbiAgJ2Zhc2wnOiAnZmEtbGlnaHQnXG59KSwgX2ZhbWlseVByb3h5MykpO1xudmFyIExPTkdfU1RZTEVfVE9fUFJFRklYID0gZmFtaWx5UHJveHkoKF9mYW1pbHlQcm94eTQgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9mYW1pbHlQcm94eTQsIEZBTUlMWV9DTEFTU0lDLCB7XG4gICdmYS1icmFuZHMnOiAnZmFiJyxcbiAgJ2ZhLWR1b3RvbmUnOiAnZmFkJyxcbiAgJ2ZhLWtpdCc6ICdmYWsnLFxuICAnZmEtbGlnaHQnOiAnZmFsJyxcbiAgJ2ZhLXJlZ3VsYXInOiAnZmFyJyxcbiAgJ2ZhLXNvbGlkJzogJ2ZhcycsXG4gICdmYS10aGluJzogJ2ZhdCdcbn0pLCBfZGVmaW5lUHJvcGVydHkoX2ZhbWlseVByb3h5NCwgRkFNSUxZX1NIQVJQLCB7XG4gICdmYS1zb2xpZCc6ICdmYXNzJyxcbiAgJ2ZhLXJlZ3VsYXInOiAnZmFzcicsXG4gICdmYS1saWdodCc6ICdmYXNsJ1xufSksIF9mYW1pbHlQcm94eTQpKTtcbnZhciBJQ09OX1NFTEVDVElPTl9TWU5UQVhfUEFUVEVSTiA9IC9mYShzfHJ8bHx0fGR8YnxrfHNzfHNyfHNsKT9bXFwtXFwgXS87IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdXNlbGVzcy1lc2NhcGVcblxudmFyIExBWUVSU19URVhUX0NMQVNTTkFNRSA9ICdmYS1sYXllcnMtdGV4dCc7XG52YXIgRk9OVF9GQU1JTFlfUEFUVEVSTiA9IC9Gb250ID9Bd2Vzb21lID8oWzU2IF0qKShTb2xpZHxSZWd1bGFyfExpZ2h0fFRoaW58RHVvdG9uZXxCcmFuZHN8RnJlZXxQcm98U2hhcnB8S2l0KT8uKi9pO1xudmFyIEZPTlRfV0VJR0hUX1RPX1BSRUZJWCA9IGZhbWlseVByb3h5KChfZmFtaWx5UHJveHk1ID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfZmFtaWx5UHJveHk1LCBGQU1JTFlfQ0xBU1NJQywge1xuICAnOTAwJzogJ2ZhcycsXG4gICc0MDAnOiAnZmFyJyxcbiAgJ25vcm1hbCc6ICdmYXInLFxuICAnMzAwJzogJ2ZhbCcsXG4gICcxMDAnOiAnZmF0J1xufSksIF9kZWZpbmVQcm9wZXJ0eShfZmFtaWx5UHJveHk1LCBGQU1JTFlfU0hBUlAsIHtcbiAgJzkwMCc6ICdmYXNzJyxcbiAgJzQwMCc6ICdmYXNyJyxcbiAgJzMwMCc6ICdmYXNsJ1xufSksIF9mYW1pbHlQcm94eTUpKTtcbnZhciBvbmVUb1RlbiA9IFsxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMF07XG52YXIgb25lVG9Ud2VudHkgPSBvbmVUb1Rlbi5jb25jYXQoWzExLCAxMiwgMTMsIDE0LCAxNSwgMTYsIDE3LCAxOCwgMTksIDIwXSk7XG52YXIgQVRUUklCVVRFU19XQVRDSEVEX0ZPUl9NVVRBVElPTiA9IFsnY2xhc3MnLCAnZGF0YS1wcmVmaXgnLCAnZGF0YS1pY29uJywgJ2RhdGEtZmEtdHJhbnNmb3JtJywgJ2RhdGEtZmEtbWFzayddO1xudmFyIERVT1RPTkVfQ0xBU1NFUyA9IHtcbiAgR1JPVVA6ICdkdW90b25lLWdyb3VwJyxcbiAgU1dBUF9PUEFDSVRZOiAnc3dhcC1vcGFjaXR5JyxcbiAgUFJJTUFSWTogJ3ByaW1hcnknLFxuICBTRUNPTkRBUlk6ICdzZWNvbmRhcnknXG59O1xudmFyIHByZWZpeGVzID0gbmV3IFNldCgpO1xuT2JqZWN0LmtleXMoU1RZTEVfVE9fUFJFRklYW0ZBTUlMWV9DTEFTU0lDXSkubWFwKHByZWZpeGVzLmFkZC5iaW5kKHByZWZpeGVzKSk7XG5PYmplY3Qua2V5cyhTVFlMRV9UT19QUkVGSVhbRkFNSUxZX1NIQVJQXSkubWFwKHByZWZpeGVzLmFkZC5iaW5kKHByZWZpeGVzKSk7XG52YXIgUkVTRVJWRURfQ0xBU1NFUyA9IFtdLmNvbmNhdChGQU1JTElFUywgX3RvQ29uc3VtYWJsZUFycmF5KHByZWZpeGVzKSwgWycyeHMnLCAneHMnLCAnc20nLCAnbGcnLCAneGwnLCAnMnhsJywgJ2JlYXQnLCAnYm9yZGVyJywgJ2ZhZGUnLCAnYmVhdC1mYWRlJywgJ2JvdW5jZScsICdmbGlwLWJvdGgnLCAnZmxpcC1ob3Jpem9udGFsJywgJ2ZsaXAtdmVydGljYWwnLCAnZmxpcCcsICdmdycsICdpbnZlcnNlJywgJ2xheWVycy1jb3VudGVyJywgJ2xheWVycy10ZXh0JywgJ2xheWVycycsICdsaScsICdwdWxsLWxlZnQnLCAncHVsbC1yaWdodCcsICdwdWxzZScsICdyb3RhdGUtMTgwJywgJ3JvdGF0ZS0yNzAnLCAncm90YXRlLTkwJywgJ3JvdGF0ZS1ieScsICdzaGFrZScsICdzcGluLXB1bHNlJywgJ3NwaW4tcmV2ZXJzZScsICdzcGluJywgJ3N0YWNrLTF4JywgJ3N0YWNrLTJ4JywgJ3N0YWNrJywgJ3VsJywgRFVPVE9ORV9DTEFTU0VTLkdST1VQLCBEVU9UT05FX0NMQVNTRVMuU1dBUF9PUEFDSVRZLCBEVU9UT05FX0NMQVNTRVMuUFJJTUFSWSwgRFVPVE9ORV9DTEFTU0VTLlNFQ09OREFSWV0pLmNvbmNhdChvbmVUb1Rlbi5tYXAoZnVuY3Rpb24gKG4pIHtcbiAgcmV0dXJuIFwiXCIuY29uY2F0KG4sIFwieFwiKTtcbn0pKS5jb25jYXQob25lVG9Ud2VudHkubWFwKGZ1bmN0aW9uIChuKSB7XG4gIHJldHVybiBcInctXCIuY29uY2F0KG4pO1xufSkpO1xuXG52YXIgaW5pdGlhbCA9IFdJTkRPVy5Gb250QXdlc29tZUNvbmZpZyB8fCB7fTtcblxuZnVuY3Rpb24gZ2V0QXR0ckNvbmZpZyhhdHRyKSB7XG4gIHZhciBlbGVtZW50ID0gRE9DVU1FTlQucXVlcnlTZWxlY3Rvcignc2NyaXB0WycgKyBhdHRyICsgJ10nKTtcblxuICBpZiAoZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50LmdldEF0dHJpYnV0ZShhdHRyKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb2VyY2UodmFsKSB7XG4gIC8vIEdldHRpbmcgYW4gZW1wdHkgc3RyaW5nIHdpbGwgb2NjdXIgaWYgdGhlIGF0dHJpYnV0ZSBpcyBzZXQgb24gdGhlIEhUTUwgdGFnIGJ1dCB3aXRob3V0IGEgdmFsdWVcbiAgLy8gV2UnbGwgYXNzdW1lIHRoYXQgdGhpcyBpcyBhbiBpbmRpY2F0aW9uIHRoYXQgaXQgc2hvdWxkIGJlIHRvZ2dsZWQgdG8gdHJ1ZVxuICBpZiAodmFsID09PSAnJykgcmV0dXJuIHRydWU7XG4gIGlmICh2YWwgPT09ICdmYWxzZScpIHJldHVybiBmYWxzZTtcbiAgaWYgKHZhbCA9PT0gJ3RydWUnKSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIHZhbDtcbn1cblxuaWYgKERPQ1VNRU5UICYmIHR5cGVvZiBET0NVTUVOVC5xdWVyeVNlbGVjdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gIHZhciBhdHRycyA9IFtbJ2RhdGEtZmFtaWx5LXByZWZpeCcsICdmYW1pbHlQcmVmaXgnXSwgWydkYXRhLWNzcy1wcmVmaXgnLCAnY3NzUHJlZml4J10sIFsnZGF0YS1mYW1pbHktZGVmYXVsdCcsICdmYW1pbHlEZWZhdWx0J10sIFsnZGF0YS1zdHlsZS1kZWZhdWx0JywgJ3N0eWxlRGVmYXVsdCddLCBbJ2RhdGEtcmVwbGFjZW1lbnQtY2xhc3MnLCAncmVwbGFjZW1lbnRDbGFzcyddLCBbJ2RhdGEtYXV0by1yZXBsYWNlLXN2ZycsICdhdXRvUmVwbGFjZVN2ZyddLCBbJ2RhdGEtYXV0by1hZGQtY3NzJywgJ2F1dG9BZGRDc3MnXSwgWydkYXRhLWF1dG8tYTExeScsICdhdXRvQTExeSddLCBbJ2RhdGEtc2VhcmNoLXBzZXVkby1lbGVtZW50cycsICdzZWFyY2hQc2V1ZG9FbGVtZW50cyddLCBbJ2RhdGEtb2JzZXJ2ZS1tdXRhdGlvbnMnLCAnb2JzZXJ2ZU11dGF0aW9ucyddLCBbJ2RhdGEtbXV0YXRlLWFwcHJvYWNoJywgJ211dGF0ZUFwcHJvYWNoJ10sIFsnZGF0YS1rZWVwLW9yaWdpbmFsLXNvdXJjZScsICdrZWVwT3JpZ2luYWxTb3VyY2UnXSwgWydkYXRhLW1lYXN1cmUtcGVyZm9ybWFuY2UnLCAnbWVhc3VyZVBlcmZvcm1hbmNlJ10sIFsnZGF0YS1zaG93LW1pc3NpbmctaWNvbnMnLCAnc2hvd01pc3NpbmdJY29ucyddXTtcbiAgYXR0cnMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDIpLFxuICAgICAgICBhdHRyID0gX3JlZjJbMF0sXG4gICAgICAgIGtleSA9IF9yZWYyWzFdO1xuXG4gICAgdmFyIHZhbCA9IGNvZXJjZShnZXRBdHRyQ29uZmlnKGF0dHIpKTtcblxuICAgIGlmICh2YWwgIT09IHVuZGVmaW5lZCAmJiB2YWwgIT09IG51bGwpIHtcbiAgICAgIGluaXRpYWxba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xufVxuXG52YXIgX2RlZmF1bHQgPSB7XG4gIHN0eWxlRGVmYXVsdDogJ3NvbGlkJyxcbiAgZmFtaWx5RGVmYXVsdDogJ2NsYXNzaWMnLFxuICBjc3NQcmVmaXg6IERFRkFVTFRfQ1NTX1BSRUZJWCxcbiAgcmVwbGFjZW1lbnRDbGFzczogREVGQVVMVF9SRVBMQUNFTUVOVF9DTEFTUyxcbiAgYXV0b1JlcGxhY2VTdmc6IHRydWUsXG4gIGF1dG9BZGRDc3M6IHRydWUsXG4gIGF1dG9BMTF5OiB0cnVlLFxuICBzZWFyY2hQc2V1ZG9FbGVtZW50czogZmFsc2UsXG4gIG9ic2VydmVNdXRhdGlvbnM6IHRydWUsXG4gIG11dGF0ZUFwcHJvYWNoOiAnYXN5bmMnLFxuICBrZWVwT3JpZ2luYWxTb3VyY2U6IHRydWUsXG4gIG1lYXN1cmVQZXJmb3JtYW5jZTogZmFsc2UsXG4gIHNob3dNaXNzaW5nSWNvbnM6IHRydWVcbn07IC8vIGZhbWlseVByZWZpeCBpcyBkZXByZWNhdGVkIGJ1dCB3ZSBtdXN0IHN0aWxsIHN1cHBvcnQgaXQgaWYgcHJlc2VudFxuXG5pZiAoaW5pdGlhbC5mYW1pbHlQcmVmaXgpIHtcbiAgaW5pdGlhbC5jc3NQcmVmaXggPSBpbml0aWFsLmZhbWlseVByZWZpeDtcbn1cblxudmFyIF9jb25maWcgPSBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgX2RlZmF1bHQpLCBpbml0aWFsKTtcblxuaWYgKCFfY29uZmlnLmF1dG9SZXBsYWNlU3ZnKSBfY29uZmlnLm9ic2VydmVNdXRhdGlvbnMgPSBmYWxzZTtcbnZhciBjb25maWcgPSB7fTtcbk9iamVjdC5rZXlzKF9kZWZhdWx0KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbmZpZywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWwpIHtcbiAgICAgIF9jb25maWdba2V5XSA9IHZhbDtcblxuICAgICAgX29uQ2hhbmdlQ2IuZm9yRWFjaChmdW5jdGlvbiAoY2IpIHtcbiAgICAgICAgcmV0dXJuIGNiKGNvbmZpZyk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9jb25maWdba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7IC8vIGZhbWlseVByZWZpeCBpcyBkZXByZWNhdGVkIGFzIG9mIDYuMi4wIGFuZCBzaG91bGQgYmUgcmVtb3ZlZCBpbiA3LjAuMFxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoY29uZmlnLCAnZmFtaWx5UHJlZml4Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWwpIHtcbiAgICBfY29uZmlnLmNzc1ByZWZpeCA9IHZhbDtcblxuICAgIF9vbkNoYW5nZUNiLmZvckVhY2goZnVuY3Rpb24gKGNiKSB7XG4gICAgICByZXR1cm4gY2IoY29uZmlnKTtcbiAgICB9KTtcbiAgfSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9jb25maWcuY3NzUHJlZml4O1xuICB9XG59KTtcbldJTkRPVy5Gb250QXdlc29tZUNvbmZpZyA9IGNvbmZpZztcbnZhciBfb25DaGFuZ2VDYiA9IFtdO1xuZnVuY3Rpb24gb25DaGFuZ2UoY2IpIHtcbiAgX29uQ2hhbmdlQ2IucHVzaChjYik7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBfb25DaGFuZ2VDYi5zcGxpY2UoX29uQ2hhbmdlQ2IuaW5kZXhPZihjYiksIDEpO1xuICB9O1xufVxuXG52YXIgZCA9IFVOSVRTX0lOX0dSSUQ7XG52YXIgbWVhbmluZ2xlc3NUcmFuc2Zvcm0gPSB7XG4gIHNpemU6IDE2LFxuICB4OiAwLFxuICB5OiAwLFxuICByb3RhdGU6IDAsXG4gIGZsaXBYOiBmYWxzZSxcbiAgZmxpcFk6IGZhbHNlXG59O1xuZnVuY3Rpb24gaW5zZXJ0Q3NzKGNzcykge1xuICBpZiAoIWNzcyB8fCAhSVNfRE9NKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHN0eWxlID0gRE9DVU1FTlQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgc3R5bGUuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQvY3NzJyk7XG4gIHN0eWxlLmlubmVySFRNTCA9IGNzcztcbiAgdmFyIGhlYWRDaGlsZHJlbiA9IERPQ1VNRU5ULmhlYWQuY2hpbGROb2RlcztcbiAgdmFyIGJlZm9yZUNoaWxkID0gbnVsbDtcblxuICBmb3IgKHZhciBpID0gaGVhZENoaWxkcmVuLmxlbmd0aCAtIDE7IGkgPiAtMTsgaS0tKSB7XG4gICAgdmFyIGNoaWxkID0gaGVhZENoaWxkcmVuW2ldO1xuICAgIHZhciB0YWdOYW1lID0gKGNoaWxkLnRhZ05hbWUgfHwgJycpLnRvVXBwZXJDYXNlKCk7XG5cbiAgICBpZiAoWydTVFlMRScsICdMSU5LJ10uaW5kZXhPZih0YWdOYW1lKSA+IC0xKSB7XG4gICAgICBiZWZvcmVDaGlsZCA9IGNoaWxkO1xuICAgIH1cbiAgfVxuXG4gIERPQ1VNRU5ULmhlYWQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBiZWZvcmVDaGlsZCk7XG4gIHJldHVybiBjc3M7XG59XG52YXIgaWRQb29sID0gJzAxMjM0NTY3ODlhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ekFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaJztcbmZ1bmN0aW9uIG5leHRVbmlxdWVJZCgpIHtcbiAgdmFyIHNpemUgPSAxMjtcbiAgdmFyIGlkID0gJyc7XG5cbiAgd2hpbGUgKHNpemUtLSA+IDApIHtcbiAgICBpZCArPSBpZFBvb2xbTWF0aC5yYW5kb20oKSAqIDYyIHwgMF07XG4gIH1cblxuICByZXR1cm4gaWQ7XG59XG5mdW5jdGlvbiB0b0FycmF5KG9iaikge1xuICB2YXIgYXJyYXkgPSBbXTtcblxuICBmb3IgKHZhciBpID0gKG9iaiB8fCBbXSkubGVuZ3RoID4+PiAwOyBpLS07KSB7XG4gICAgYXJyYXlbaV0gPSBvYmpbaV07XG4gIH1cblxuICByZXR1cm4gYXJyYXk7XG59XG5mdW5jdGlvbiBjbGFzc0FycmF5KG5vZGUpIHtcbiAgaWYgKG5vZGUuY2xhc3NMaXN0KSB7XG4gICAgcmV0dXJuIHRvQXJyYXkobm9kZS5jbGFzc0xpc3QpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAobm9kZS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpLnNwbGl0KCcgJykuZmlsdGVyKGZ1bmN0aW9uIChpKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9KTtcbiAgfVxufVxuZnVuY3Rpb24gaHRtbEVzY2FwZShzdHIpIHtcbiAgcmV0dXJuIFwiXCIuY29uY2F0KHN0cikucmVwbGFjZSgvJi9nLCAnJmFtcDsnKS5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7JykucmVwbGFjZSgvJy9nLCAnJiMzOTsnKS5yZXBsYWNlKC88L2csICcmbHQ7JykucmVwbGFjZSgvPi9nLCAnJmd0OycpO1xufVxuZnVuY3Rpb24gam9pbkF0dHJpYnV0ZXMoYXR0cmlidXRlcykge1xuICByZXR1cm4gT2JqZWN0LmtleXMoYXR0cmlidXRlcyB8fCB7fSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGF0dHJpYnV0ZU5hbWUpIHtcbiAgICByZXR1cm4gYWNjICsgXCJcIi5jb25jYXQoYXR0cmlidXRlTmFtZSwgXCI9XFxcIlwiKS5jb25jYXQoaHRtbEVzY2FwZShhdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdKSwgXCJcXFwiIFwiKTtcbiAgfSwgJycpLnRyaW0oKTtcbn1cbmZ1bmN0aW9uIGpvaW5TdHlsZXMoc3R5bGVzKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhzdHlsZXMgfHwge30pLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBzdHlsZU5hbWUpIHtcbiAgICByZXR1cm4gYWNjICsgXCJcIi5jb25jYXQoc3R5bGVOYW1lLCBcIjogXCIpLmNvbmNhdChzdHlsZXNbc3R5bGVOYW1lXS50cmltKCksIFwiO1wiKTtcbiAgfSwgJycpO1xufVxuZnVuY3Rpb24gdHJhbnNmb3JtSXNNZWFuaW5nZnVsKHRyYW5zZm9ybSkge1xuICByZXR1cm4gdHJhbnNmb3JtLnNpemUgIT09IG1lYW5pbmdsZXNzVHJhbnNmb3JtLnNpemUgfHwgdHJhbnNmb3JtLnggIT09IG1lYW5pbmdsZXNzVHJhbnNmb3JtLnggfHwgdHJhbnNmb3JtLnkgIT09IG1lYW5pbmdsZXNzVHJhbnNmb3JtLnkgfHwgdHJhbnNmb3JtLnJvdGF0ZSAhPT0gbWVhbmluZ2xlc3NUcmFuc2Zvcm0ucm90YXRlIHx8IHRyYW5zZm9ybS5mbGlwWCB8fCB0cmFuc2Zvcm0uZmxpcFk7XG59XG5mdW5jdGlvbiB0cmFuc2Zvcm1Gb3JTdmcoX3JlZikge1xuICB2YXIgdHJhbnNmb3JtID0gX3JlZi50cmFuc2Zvcm0sXG4gICAgICBjb250YWluZXJXaWR0aCA9IF9yZWYuY29udGFpbmVyV2lkdGgsXG4gICAgICBpY29uV2lkdGggPSBfcmVmLmljb25XaWR0aDtcbiAgdmFyIG91dGVyID0ge1xuICAgIHRyYW5zZm9ybTogXCJ0cmFuc2xhdGUoXCIuY29uY2F0KGNvbnRhaW5lcldpZHRoIC8gMiwgXCIgMjU2KVwiKVxuICB9O1xuICB2YXIgaW5uZXJUcmFuc2xhdGUgPSBcInRyYW5zbGF0ZShcIi5jb25jYXQodHJhbnNmb3JtLnggKiAzMiwgXCIsIFwiKS5jb25jYXQodHJhbnNmb3JtLnkgKiAzMiwgXCIpIFwiKTtcbiAgdmFyIGlubmVyU2NhbGUgPSBcInNjYWxlKFwiLmNvbmNhdCh0cmFuc2Zvcm0uc2l6ZSAvIDE2ICogKHRyYW5zZm9ybS5mbGlwWCA/IC0xIDogMSksIFwiLCBcIikuY29uY2F0KHRyYW5zZm9ybS5zaXplIC8gMTYgKiAodHJhbnNmb3JtLmZsaXBZID8gLTEgOiAxKSwgXCIpIFwiKTtcbiAgdmFyIGlubmVyUm90YXRlID0gXCJyb3RhdGUoXCIuY29uY2F0KHRyYW5zZm9ybS5yb3RhdGUsIFwiIDAgMClcIik7XG4gIHZhciBpbm5lciA9IHtcbiAgICB0cmFuc2Zvcm06IFwiXCIuY29uY2F0KGlubmVyVHJhbnNsYXRlLCBcIiBcIikuY29uY2F0KGlubmVyU2NhbGUsIFwiIFwiKS5jb25jYXQoaW5uZXJSb3RhdGUpXG4gIH07XG4gIHZhciBwYXRoID0ge1xuICAgIHRyYW5zZm9ybTogXCJ0cmFuc2xhdGUoXCIuY29uY2F0KGljb25XaWR0aCAvIDIgKiAtMSwgXCIgLTI1NilcIilcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBvdXRlcjogb3V0ZXIsXG4gICAgaW5uZXI6IGlubmVyLFxuICAgIHBhdGg6IHBhdGhcbiAgfTtcbn1cbmZ1bmN0aW9uIHRyYW5zZm9ybUZvckNzcyhfcmVmMikge1xuICB2YXIgdHJhbnNmb3JtID0gX3JlZjIudHJhbnNmb3JtLFxuICAgICAgX3JlZjIkd2lkdGggPSBfcmVmMi53aWR0aCxcbiAgICAgIHdpZHRoID0gX3JlZjIkd2lkdGggPT09IHZvaWQgMCA/IFVOSVRTX0lOX0dSSUQgOiBfcmVmMiR3aWR0aCxcbiAgICAgIF9yZWYyJGhlaWdodCA9IF9yZWYyLmhlaWdodCxcbiAgICAgIGhlaWdodCA9IF9yZWYyJGhlaWdodCA9PT0gdm9pZCAwID8gVU5JVFNfSU5fR1JJRCA6IF9yZWYyJGhlaWdodCxcbiAgICAgIF9yZWYyJHN0YXJ0Q2VudGVyZWQgPSBfcmVmMi5zdGFydENlbnRlcmVkLFxuICAgICAgc3RhcnRDZW50ZXJlZCA9IF9yZWYyJHN0YXJ0Q2VudGVyZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjIkc3RhcnRDZW50ZXJlZDtcbiAgdmFyIHZhbCA9ICcnO1xuXG4gIGlmIChzdGFydENlbnRlcmVkICYmIElTX0lFKSB7XG4gICAgdmFsICs9IFwidHJhbnNsYXRlKFwiLmNvbmNhdCh0cmFuc2Zvcm0ueCAvIGQgLSB3aWR0aCAvIDIsIFwiZW0sIFwiKS5jb25jYXQodHJhbnNmb3JtLnkgLyBkIC0gaGVpZ2h0IC8gMiwgXCJlbSkgXCIpO1xuICB9IGVsc2UgaWYgKHN0YXJ0Q2VudGVyZWQpIHtcbiAgICB2YWwgKz0gXCJ0cmFuc2xhdGUoY2FsYygtNTAlICsgXCIuY29uY2F0KHRyYW5zZm9ybS54IC8gZCwgXCJlbSksIGNhbGMoLTUwJSArIFwiKS5jb25jYXQodHJhbnNmb3JtLnkgLyBkLCBcImVtKSkgXCIpO1xuICB9IGVsc2Uge1xuICAgIHZhbCArPSBcInRyYW5zbGF0ZShcIi5jb25jYXQodHJhbnNmb3JtLnggLyBkLCBcImVtLCBcIikuY29uY2F0KHRyYW5zZm9ybS55IC8gZCwgXCJlbSkgXCIpO1xuICB9XG5cbiAgdmFsICs9IFwic2NhbGUoXCIuY29uY2F0KHRyYW5zZm9ybS5zaXplIC8gZCAqICh0cmFuc2Zvcm0uZmxpcFggPyAtMSA6IDEpLCBcIiwgXCIpLmNvbmNhdCh0cmFuc2Zvcm0uc2l6ZSAvIGQgKiAodHJhbnNmb3JtLmZsaXBZID8gLTEgOiAxKSwgXCIpIFwiKTtcbiAgdmFsICs9IFwicm90YXRlKFwiLmNvbmNhdCh0cmFuc2Zvcm0ucm90YXRlLCBcImRlZykgXCIpO1xuICByZXR1cm4gdmFsO1xufVxuXG52YXIgYmFzZVN0eWxlcyA9IFwiOnJvb3QsIDpob3N0IHtcXG4gIC0tZmEtZm9udC1zb2xpZDogbm9ybWFsIDkwMCAxZW0vMSBcXFwiRm9udCBBd2Vzb21lIDYgU29saWRcXFwiO1xcbiAgLS1mYS1mb250LXJlZ3VsYXI6IG5vcm1hbCA0MDAgMWVtLzEgXFxcIkZvbnQgQXdlc29tZSA2IFJlZ3VsYXJcXFwiO1xcbiAgLS1mYS1mb250LWxpZ2h0OiBub3JtYWwgMzAwIDFlbS8xIFxcXCJGb250IEF3ZXNvbWUgNiBMaWdodFxcXCI7XFxuICAtLWZhLWZvbnQtdGhpbjogbm9ybWFsIDEwMCAxZW0vMSBcXFwiRm9udCBBd2Vzb21lIDYgVGhpblxcXCI7XFxuICAtLWZhLWZvbnQtZHVvdG9uZTogbm9ybWFsIDkwMCAxZW0vMSBcXFwiRm9udCBBd2Vzb21lIDYgRHVvdG9uZVxcXCI7XFxuICAtLWZhLWZvbnQtc2hhcnAtc29saWQ6IG5vcm1hbCA5MDAgMWVtLzEgXFxcIkZvbnQgQXdlc29tZSA2IFNoYXJwXFxcIjtcXG4gIC0tZmEtZm9udC1zaGFycC1yZWd1bGFyOiBub3JtYWwgNDAwIDFlbS8xIFxcXCJGb250IEF3ZXNvbWUgNiBTaGFycFxcXCI7XFxuICAtLWZhLWZvbnQtc2hhcnAtbGlnaHQ6IG5vcm1hbCAzMDAgMWVtLzEgXFxcIkZvbnQgQXdlc29tZSA2IFNoYXJwXFxcIjtcXG4gIC0tZmEtZm9udC1icmFuZHM6IG5vcm1hbCA0MDAgMWVtLzEgXFxcIkZvbnQgQXdlc29tZSA2IEJyYW5kc1xcXCI7XFxufVxcblxcbnN2Zzpub3QoOnJvb3QpLnN2Zy1pbmxpbmUtLWZhLCBzdmc6bm90KDpob3N0KS5zdmctaW5saW5lLS1mYSB7XFxuICBvdmVyZmxvdzogdmlzaWJsZTtcXG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xcbn1cXG5cXG4uc3ZnLWlubGluZS0tZmEge1xcbiAgZGlzcGxheTogdmFyKC0tZmEtZGlzcGxheSwgaW5saW5lLWJsb2NrKTtcXG4gIGhlaWdodDogMWVtO1xcbiAgb3ZlcmZsb3c6IHZpc2libGU7XFxuICB2ZXJ0aWNhbC1hbGlnbjogLTAuMTI1ZW07XFxufVxcbi5zdmctaW5saW5lLS1mYS5mYS0yeHMge1xcbiAgdmVydGljYWwtYWxpZ246IDAuMWVtO1xcbn1cXG4uc3ZnLWlubGluZS0tZmEuZmEteHMge1xcbiAgdmVydGljYWwtYWxpZ246IDBlbTtcXG59XFxuLnN2Zy1pbmxpbmUtLWZhLmZhLXNtIHtcXG4gIHZlcnRpY2FsLWFsaWduOiAtMC4wNzE0Mjg1NzA1ZW07XFxufVxcbi5zdmctaW5saW5lLS1mYS5mYS1sZyB7XFxuICB2ZXJ0aWNhbC1hbGlnbjogLTAuMmVtO1xcbn1cXG4uc3ZnLWlubGluZS0tZmEuZmEteGwge1xcbiAgdmVydGljYWwtYWxpZ246IC0wLjI1ZW07XFxufVxcbi5zdmctaW5saW5lLS1mYS5mYS0yeGwge1xcbiAgdmVydGljYWwtYWxpZ246IC0wLjMxMjVlbTtcXG59XFxuLnN2Zy1pbmxpbmUtLWZhLmZhLXB1bGwtbGVmdCB7XFxuICBtYXJnaW4tcmlnaHQ6IHZhcigtLWZhLXB1bGwtbWFyZ2luLCAwLjNlbSk7XFxuICB3aWR0aDogYXV0bztcXG59XFxuLnN2Zy1pbmxpbmUtLWZhLmZhLXB1bGwtcmlnaHQge1xcbiAgbWFyZ2luLWxlZnQ6IHZhcigtLWZhLXB1bGwtbWFyZ2luLCAwLjNlbSk7XFxuICB3aWR0aDogYXV0bztcXG59XFxuLnN2Zy1pbmxpbmUtLWZhLmZhLWxpIHtcXG4gIHdpZHRoOiB2YXIoLS1mYS1saS13aWR0aCwgMmVtKTtcXG4gIHRvcDogMC4yNWVtO1xcbn1cXG4uc3ZnLWlubGluZS0tZmEuZmEtZncge1xcbiAgd2lkdGg6IHZhcigtLWZhLWZ3LXdpZHRoLCAxLjI1ZW0pO1xcbn1cXG5cXG4uZmEtbGF5ZXJzIHN2Zy5zdmctaW5saW5lLS1mYSB7XFxuICBib3R0b206IDA7XFxuICBsZWZ0OiAwO1xcbiAgbWFyZ2luOiBhdXRvO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgcmlnaHQ6IDA7XFxuICB0b3A6IDA7XFxufVxcblxcbi5mYS1sYXllcnMtY291bnRlciwgLmZhLWxheWVycy10ZXh0IHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXFxuLmZhLWxheWVycyB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBoZWlnaHQ6IDFlbTtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHZlcnRpY2FsLWFsaWduOiAtMC4xMjVlbTtcXG4gIHdpZHRoOiAxZW07XFxufVxcbi5mYS1sYXllcnMgc3ZnLnN2Zy1pbmxpbmUtLWZhIHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogY2VudGVyIGNlbnRlcjtcXG4gICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogY2VudGVyIGNlbnRlcjtcXG59XFxuXFxuLmZhLWxheWVycy10ZXh0IHtcXG4gIGxlZnQ6IDUwJTtcXG4gIHRvcDogNTAlO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcXG4gICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XFxuICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IGNlbnRlciBjZW50ZXI7XFxuICAgICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlciBjZW50ZXI7XFxufVxcblxcbi5mYS1sYXllcnMtY291bnRlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1mYS1jb3VudGVyLWJhY2tncm91bmQtY29sb3IsICNmZjI1M2EpO1xcbiAgYm9yZGVyLXJhZGl1czogdmFyKC0tZmEtY291bnRlci1ib3JkZXItcmFkaXVzLCAxZW0pO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGNvbG9yOiB2YXIoLS1mYS1pbnZlcnNlLCAjZmZmKTtcXG4gIGxpbmUtaGVpZ2h0OiB2YXIoLS1mYS1jb3VudGVyLWxpbmUtaGVpZ2h0LCAxKTtcXG4gIG1heC13aWR0aDogdmFyKC0tZmEtY291bnRlci1tYXgtd2lkdGgsIDVlbSk7XFxuICBtaW4td2lkdGg6IHZhcigtLWZhLWNvdW50ZXItbWluLXdpZHRoLCAxLjVlbSk7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgcGFkZGluZzogdmFyKC0tZmEtY291bnRlci1wYWRkaW5nLCAwLjI1ZW0gMC41ZW0pO1xcbiAgcmlnaHQ6IHZhcigtLWZhLXJpZ2h0LCAwKTtcXG4gIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xcbiAgdG9wOiB2YXIoLS1mYS10b3AsIDApO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKHZhcigtLWZhLWNvdW50ZXItc2NhbGUsIDAuMjUpKTtcXG4gICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSh2YXIoLS1mYS1jb3VudGVyLXNjYWxlLCAwLjI1KSk7XFxuICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IHRvcCByaWdodDtcXG4gICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogdG9wIHJpZ2h0O1xcbn1cXG5cXG4uZmEtbGF5ZXJzLWJvdHRvbS1yaWdodCB7XFxuICBib3R0b206IHZhcigtLWZhLWJvdHRvbSwgMCk7XFxuICByaWdodDogdmFyKC0tZmEtcmlnaHQsIDApO1xcbiAgdG9wOiBhdXRvO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKHZhcigtLWZhLWxheWVycy1zY2FsZSwgMC4yNSkpO1xcbiAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKHZhcigtLWZhLWxheWVycy1zY2FsZSwgMC4yNSkpO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiBib3R0b20gcmlnaHQ7XFxuICAgICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGJvdHRvbSByaWdodDtcXG59XFxuXFxuLmZhLWxheWVycy1ib3R0b20tbGVmdCB7XFxuICBib3R0b206IHZhcigtLWZhLWJvdHRvbSwgMCk7XFxuICBsZWZ0OiB2YXIoLS1mYS1sZWZ0LCAwKTtcXG4gIHJpZ2h0OiBhdXRvO1xcbiAgdG9wOiBhdXRvO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKHZhcigtLWZhLWxheWVycy1zY2FsZSwgMC4yNSkpO1xcbiAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKHZhcigtLWZhLWxheWVycy1zY2FsZSwgMC4yNSkpO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiBib3R0b20gbGVmdDtcXG4gICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogYm90dG9tIGxlZnQ7XFxufVxcblxcbi5mYS1sYXllcnMtdG9wLXJpZ2h0IHtcXG4gIHRvcDogdmFyKC0tZmEtdG9wLCAwKTtcXG4gIHJpZ2h0OiB2YXIoLS1mYS1yaWdodCwgMCk7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUodmFyKC0tZmEtbGF5ZXJzLXNjYWxlLCAwLjI1KSk7XFxuICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUodmFyKC0tZmEtbGF5ZXJzLXNjYWxlLCAwLjI1KSk7XFxuICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IHRvcCByaWdodDtcXG4gICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogdG9wIHJpZ2h0O1xcbn1cXG5cXG4uZmEtbGF5ZXJzLXRvcC1sZWZ0IHtcXG4gIGxlZnQ6IHZhcigtLWZhLWxlZnQsIDApO1xcbiAgcmlnaHQ6IGF1dG87XFxuICB0b3A6IHZhcigtLWZhLXRvcCwgMCk7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUodmFyKC0tZmEtbGF5ZXJzLXNjYWxlLCAwLjI1KSk7XFxuICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUodmFyKC0tZmEtbGF5ZXJzLXNjYWxlLCAwLjI1KSk7XFxuICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IHRvcCBsZWZ0O1xcbiAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiB0b3AgbGVmdDtcXG59XFxuXFxuLmZhLTF4IHtcXG4gIGZvbnQtc2l6ZTogMWVtO1xcbn1cXG5cXG4uZmEtMngge1xcbiAgZm9udC1zaXplOiAyZW07XFxufVxcblxcbi5mYS0zeCB7XFxuICBmb250LXNpemU6IDNlbTtcXG59XFxuXFxuLmZhLTR4IHtcXG4gIGZvbnQtc2l6ZTogNGVtO1xcbn1cXG5cXG4uZmEtNXgge1xcbiAgZm9udC1zaXplOiA1ZW07XFxufVxcblxcbi5mYS02eCB7XFxuICBmb250LXNpemU6IDZlbTtcXG59XFxuXFxuLmZhLTd4IHtcXG4gIGZvbnQtc2l6ZTogN2VtO1xcbn1cXG5cXG4uZmEtOHgge1xcbiAgZm9udC1zaXplOiA4ZW07XFxufVxcblxcbi5mYS05eCB7XFxuICBmb250LXNpemU6IDllbTtcXG59XFxuXFxuLmZhLTEweCB7XFxuICBmb250LXNpemU6IDEwZW07XFxufVxcblxcbi5mYS0yeHMge1xcbiAgZm9udC1zaXplOiAwLjYyNWVtO1xcbiAgbGluZS1oZWlnaHQ6IDAuMWVtO1xcbiAgdmVydGljYWwtYWxpZ246IDAuMjI1ZW07XFxufVxcblxcbi5mYS14cyB7XFxuICBmb250LXNpemU6IDAuNzVlbTtcXG4gIGxpbmUtaGVpZ2h0OiAwLjA4MzMzMzMzMzdlbTtcXG4gIHZlcnRpY2FsLWFsaWduOiAwLjEyNWVtO1xcbn1cXG5cXG4uZmEtc20ge1xcbiAgZm9udC1zaXplOiAwLjg3NWVtO1xcbiAgbGluZS1oZWlnaHQ6IDAuMDcxNDI4NTcxOGVtO1xcbiAgdmVydGljYWwtYWxpZ246IDAuMDUzNTcxNDI5NWVtO1xcbn1cXG5cXG4uZmEtbGcge1xcbiAgZm9udC1zaXplOiAxLjI1ZW07XFxuICBsaW5lLWhlaWdodDogMC4wNWVtO1xcbiAgdmVydGljYWwtYWxpZ246IC0wLjA3NWVtO1xcbn1cXG5cXG4uZmEteGwge1xcbiAgZm9udC1zaXplOiAxLjVlbTtcXG4gIGxpbmUtaGVpZ2h0OiAwLjA0MTY2NjY2ODJlbTtcXG4gIHZlcnRpY2FsLWFsaWduOiAtMC4xMjVlbTtcXG59XFxuXFxuLmZhLTJ4bCB7XFxuICBmb250LXNpemU6IDJlbTtcXG4gIGxpbmUtaGVpZ2h0OiAwLjAzMTI1ZW07XFxuICB2ZXJ0aWNhbC1hbGlnbjogLTAuMTg3NWVtO1xcbn1cXG5cXG4uZmEtZncge1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgd2lkdGg6IDEuMjVlbTtcXG59XFxuXFxuLmZhLXVsIHtcXG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcXG4gIG1hcmdpbi1sZWZ0OiB2YXIoLS1mYS1saS1tYXJnaW4sIDIuNWVtKTtcXG4gIHBhZGRpbmctbGVmdDogMDtcXG59XFxuLmZhLXVsID4gbGkge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5cXG4uZmEtbGkge1xcbiAgbGVmdDogY2FsYyh2YXIoLS1mYS1saS13aWR0aCwgMmVtKSAqIC0xKTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHdpZHRoOiB2YXIoLS1mYS1saS13aWR0aCwgMmVtKTtcXG4gIGxpbmUtaGVpZ2h0OiBpbmhlcml0O1xcbn1cXG5cXG4uZmEtYm9yZGVyIHtcXG4gIGJvcmRlci1jb2xvcjogdmFyKC0tZmEtYm9yZGVyLWNvbG9yLCAjZWVlKTtcXG4gIGJvcmRlci1yYWRpdXM6IHZhcigtLWZhLWJvcmRlci1yYWRpdXMsIDAuMWVtKTtcXG4gIGJvcmRlci1zdHlsZTogdmFyKC0tZmEtYm9yZGVyLXN0eWxlLCBzb2xpZCk7XFxuICBib3JkZXItd2lkdGg6IHZhcigtLWZhLWJvcmRlci13aWR0aCwgMC4wOGVtKTtcXG4gIHBhZGRpbmc6IHZhcigtLWZhLWJvcmRlci1wYWRkaW5nLCAwLjJlbSAwLjI1ZW0gMC4xNWVtKTtcXG59XFxuXFxuLmZhLXB1bGwtbGVmdCB7XFxuICBmbG9hdDogbGVmdDtcXG4gIG1hcmdpbi1yaWdodDogdmFyKC0tZmEtcHVsbC1tYXJnaW4sIDAuM2VtKTtcXG59XFxuXFxuLmZhLXB1bGwtcmlnaHQge1xcbiAgZmxvYXQ6IHJpZ2h0O1xcbiAgbWFyZ2luLWxlZnQ6IHZhcigtLWZhLXB1bGwtbWFyZ2luLCAwLjNlbSk7XFxufVxcblxcbi5mYS1iZWF0IHtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IGZhLWJlYXQ7XFxuICAgICAgICAgIGFuaW1hdGlvbi1uYW1lOiBmYS1iZWF0O1xcbiAgLXdlYmtpdC1hbmltYXRpb24tZGVsYXk6IHZhcigtLWZhLWFuaW1hdGlvbi1kZWxheSwgMHMpO1xcbiAgICAgICAgICBhbmltYXRpb24tZGVsYXk6IHZhcigtLWZhLWFuaW1hdGlvbi1kZWxheSwgMHMpO1xcbiAgLXdlYmtpdC1hbmltYXRpb24tZGlyZWN0aW9uOiB2YXIoLS1mYS1hbmltYXRpb24tZGlyZWN0aW9uLCBub3JtYWwpO1xcbiAgICAgICAgICBhbmltYXRpb24tZGlyZWN0aW9uOiB2YXIoLS1mYS1hbmltYXRpb24tZGlyZWN0aW9uLCBub3JtYWwpO1xcbiAgLXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb246IHZhcigtLWZhLWFuaW1hdGlvbi1kdXJhdGlvbiwgMXMpO1xcbiAgICAgICAgICBhbmltYXRpb24tZHVyYXRpb246IHZhcigtLWZhLWFuaW1hdGlvbi1kdXJhdGlvbiwgMXMpO1xcbiAgLXdlYmtpdC1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiB2YXIoLS1mYS1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50LCBpbmZpbml0ZSk7XFxuICAgICAgICAgIGFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IHZhcigtLWZhLWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQsIGluZmluaXRlKTtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogdmFyKC0tZmEtYW5pbWF0aW9uLXRpbWluZywgZWFzZS1pbi1vdXQpO1xcbiAgICAgICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiB2YXIoLS1mYS1hbmltYXRpb24tdGltaW5nLCBlYXNlLWluLW91dCk7XFxufVxcblxcbi5mYS1ib3VuY2Uge1xcbiAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogZmEtYm91bmNlO1xcbiAgICAgICAgICBhbmltYXRpb24tbmFtZTogZmEtYm91bmNlO1xcbiAgLXdlYmtpdC1hbmltYXRpb24tZGVsYXk6IHZhcigtLWZhLWFuaW1hdGlvbi1kZWxheSwgMHMpO1xcbiAgICAgICAgICBhbmltYXRpb24tZGVsYXk6IHZhcigtLWZhLWFuaW1hdGlvbi1kZWxheSwgMHMpO1xcbiAgLXdlYmtpdC1hbmltYXRpb24tZGlyZWN0aW9uOiB2YXIoLS1mYS1hbmltYXRpb24tZGlyZWN0aW9uLCBub3JtYWwpO1xcbiAgICAgICAgICBhbmltYXRpb24tZGlyZWN0aW9uOiB2YXIoLS1mYS1hbmltYXRpb24tZGlyZWN0aW9uLCBub3JtYWwpO1xcbiAgLXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb246IHZhcigtLWZhLWFuaW1hdGlvbi1kdXJhdGlvbiwgMXMpO1xcbiAgICAgICAgICBhbmltYXRpb24tZHVyYXRpb246IHZhcigtLWZhLWFuaW1hdGlvbi1kdXJhdGlvbiwgMXMpO1xcbiAgLXdlYmtpdC1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiB2YXIoLS1mYS1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50LCBpbmZpbml0ZSk7XFxuICAgICAgICAgIGFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IHZhcigtLWZhLWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQsIGluZmluaXRlKTtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogdmFyKC0tZmEtYW5pbWF0aW9uLXRpbWluZywgY3ViaWMtYmV6aWVyKDAuMjgsIDAuODQsIDAuNDIsIDEpKTtcXG4gICAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogdmFyKC0tZmEtYW5pbWF0aW9uLXRpbWluZywgY3ViaWMtYmV6aWVyKDAuMjgsIDAuODQsIDAuNDIsIDEpKTtcXG59XFxuXFxuLmZhLWZhZGUge1xcbiAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogZmEtZmFkZTtcXG4gICAgICAgICAgYW5pbWF0aW9uLW5hbWU6IGZhLWZhZGU7XFxuICAtd2Via2l0LWFuaW1hdGlvbi1kZWxheTogdmFyKC0tZmEtYW5pbWF0aW9uLWRlbGF5LCAwcyk7XFxuICAgICAgICAgIGFuaW1hdGlvbi1kZWxheTogdmFyKC0tZmEtYW5pbWF0aW9uLWRlbGF5LCAwcyk7XFxuICAtd2Via2l0LWFuaW1hdGlvbi1kaXJlY3Rpb246IHZhcigtLWZhLWFuaW1hdGlvbi1kaXJlY3Rpb24sIG5vcm1hbCk7XFxuICAgICAgICAgIGFuaW1hdGlvbi1kaXJlY3Rpb246IHZhcigtLWZhLWFuaW1hdGlvbi1kaXJlY3Rpb24sIG5vcm1hbCk7XFxuICAtd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvbjogdmFyKC0tZmEtYW5pbWF0aW9uLWR1cmF0aW9uLCAxcyk7XFxuICAgICAgICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogdmFyKC0tZmEtYW5pbWF0aW9uLWR1cmF0aW9uLCAxcyk7XFxuICAtd2Via2l0LWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IHZhcigtLWZhLWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQsIGluZmluaXRlKTtcXG4gICAgICAgICAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogdmFyKC0tZmEtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudCwgaW5maW5pdGUpO1xcbiAgLXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiB2YXIoLS1mYS1hbmltYXRpb24tdGltaW5nLCBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjYsIDEpKTtcXG4gICAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogdmFyKC0tZmEtYW5pbWF0aW9uLXRpbWluZywgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC42LCAxKSk7XFxufVxcblxcbi5mYS1iZWF0LWZhZGUge1xcbiAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogZmEtYmVhdC1mYWRlO1xcbiAgICAgICAgICBhbmltYXRpb24tbmFtZTogZmEtYmVhdC1mYWRlO1xcbiAgLXdlYmtpdC1hbmltYXRpb24tZGVsYXk6IHZhcigtLWZhLWFuaW1hdGlvbi1kZWxheSwgMHMpO1xcbiAgICAgICAgICBhbmltYXRpb24tZGVsYXk6IHZhcigtLWZhLWFuaW1hdGlvbi1kZWxheSwgMHMpO1xcbiAgLXdlYmtpdC1hbmltYXRpb24tZGlyZWN0aW9uOiB2YXIoLS1mYS1hbmltYXRpb24tZGlyZWN0aW9uLCBub3JtYWwpO1xcbiAgICAgICAgICBhbmltYXRpb24tZGlyZWN0aW9uOiB2YXIoLS1mYS1hbmltYXRpb24tZGlyZWN0aW9uLCBub3JtYWwpO1xcbiAgLXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb246IHZhcigtLWZhLWFuaW1hdGlvbi1kdXJhdGlvbiwgMXMpO1xcbiAgICAgICAgICBhbmltYXRpb24tZHVyYXRpb246IHZhcigtLWZhLWFuaW1hdGlvbi1kdXJhdGlvbiwgMXMpO1xcbiAgLXdlYmtpdC1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiB2YXIoLS1mYS1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50LCBpbmZpbml0ZSk7XFxuICAgICAgICAgIGFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IHZhcigtLWZhLWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQsIGluZmluaXRlKTtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogdmFyKC0tZmEtYW5pbWF0aW9uLXRpbWluZywgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC42LCAxKSk7XFxuICAgICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IHZhcigtLWZhLWFuaW1hdGlvbi10aW1pbmcsIGN1YmljLWJlemllcigwLjQsIDAsIDAuNiwgMSkpO1xcbn1cXG5cXG4uZmEtZmxpcCB7XFxuICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBmYS1mbGlwO1xcbiAgICAgICAgICBhbmltYXRpb24tbmFtZTogZmEtZmxpcDtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLWRlbGF5OiB2YXIoLS1mYS1hbmltYXRpb24tZGVsYXksIDBzKTtcXG4gICAgICAgICAgYW5pbWF0aW9uLWRlbGF5OiB2YXIoLS1mYS1hbmltYXRpb24tZGVsYXksIDBzKTtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLWRpcmVjdGlvbjogdmFyKC0tZmEtYW5pbWF0aW9uLWRpcmVjdGlvbiwgbm9ybWFsKTtcXG4gICAgICAgICAgYW5pbWF0aW9uLWRpcmVjdGlvbjogdmFyKC0tZmEtYW5pbWF0aW9uLWRpcmVjdGlvbiwgbm9ybWFsKTtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOiB2YXIoLS1mYS1hbmltYXRpb24tZHVyYXRpb24sIDFzKTtcXG4gICAgICAgICAgYW5pbWF0aW9uLWR1cmF0aW9uOiB2YXIoLS1mYS1hbmltYXRpb24tZHVyYXRpb24sIDFzKTtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogdmFyKC0tZmEtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudCwgaW5maW5pdGUpO1xcbiAgICAgICAgICBhbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiB2YXIoLS1mYS1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50LCBpbmZpbml0ZSk7XFxuICAtd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IHZhcigtLWZhLWFuaW1hdGlvbi10aW1pbmcsIGVhc2UtaW4tb3V0KTtcXG4gICAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogdmFyKC0tZmEtYW5pbWF0aW9uLXRpbWluZywgZWFzZS1pbi1vdXQpO1xcbn1cXG5cXG4uZmEtc2hha2Uge1xcbiAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogZmEtc2hha2U7XFxuICAgICAgICAgIGFuaW1hdGlvbi1uYW1lOiBmYS1zaGFrZTtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLWRlbGF5OiB2YXIoLS1mYS1hbmltYXRpb24tZGVsYXksIDBzKTtcXG4gICAgICAgICAgYW5pbWF0aW9uLWRlbGF5OiB2YXIoLS1mYS1hbmltYXRpb24tZGVsYXksIDBzKTtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLWRpcmVjdGlvbjogdmFyKC0tZmEtYW5pbWF0aW9uLWRpcmVjdGlvbiwgbm9ybWFsKTtcXG4gICAgICAgICAgYW5pbWF0aW9uLWRpcmVjdGlvbjogdmFyKC0tZmEtYW5pbWF0aW9uLWRpcmVjdGlvbiwgbm9ybWFsKTtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOiB2YXIoLS1mYS1hbmltYXRpb24tZHVyYXRpb24sIDFzKTtcXG4gICAgICAgICAgYW5pbWF0aW9uLWR1cmF0aW9uOiB2YXIoLS1mYS1hbmltYXRpb24tZHVyYXRpb24sIDFzKTtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogdmFyKC0tZmEtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudCwgaW5maW5pdGUpO1xcbiAgICAgICAgICBhbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiB2YXIoLS1mYS1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50LCBpbmZpbml0ZSk7XFxuICAtd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IHZhcigtLWZhLWFuaW1hdGlvbi10aW1pbmcsIGxpbmVhcik7XFxuICAgICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IHZhcigtLWZhLWFuaW1hdGlvbi10aW1pbmcsIGxpbmVhcik7XFxufVxcblxcbi5mYS1zcGluIHtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IGZhLXNwaW47XFxuICAgICAgICAgIGFuaW1hdGlvbi1uYW1lOiBmYS1zcGluO1xcbiAgLXdlYmtpdC1hbmltYXRpb24tZGVsYXk6IHZhcigtLWZhLWFuaW1hdGlvbi1kZWxheSwgMHMpO1xcbiAgICAgICAgICBhbmltYXRpb24tZGVsYXk6IHZhcigtLWZhLWFuaW1hdGlvbi1kZWxheSwgMHMpO1xcbiAgLXdlYmtpdC1hbmltYXRpb24tZGlyZWN0aW9uOiB2YXIoLS1mYS1hbmltYXRpb24tZGlyZWN0aW9uLCBub3JtYWwpO1xcbiAgICAgICAgICBhbmltYXRpb24tZGlyZWN0aW9uOiB2YXIoLS1mYS1hbmltYXRpb24tZGlyZWN0aW9uLCBub3JtYWwpO1xcbiAgLXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb246IHZhcigtLWZhLWFuaW1hdGlvbi1kdXJhdGlvbiwgMnMpO1xcbiAgICAgICAgICBhbmltYXRpb24tZHVyYXRpb246IHZhcigtLWZhLWFuaW1hdGlvbi1kdXJhdGlvbiwgMnMpO1xcbiAgLXdlYmtpdC1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiB2YXIoLS1mYS1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50LCBpbmZpbml0ZSk7XFxuICAgICAgICAgIGFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IHZhcigtLWZhLWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQsIGluZmluaXRlKTtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogdmFyKC0tZmEtYW5pbWF0aW9uLXRpbWluZywgbGluZWFyKTtcXG4gICAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogdmFyKC0tZmEtYW5pbWF0aW9uLXRpbWluZywgbGluZWFyKTtcXG59XFxuXFxuLmZhLXNwaW4tcmV2ZXJzZSB7XFxuICAtLWZhLWFuaW1hdGlvbi1kaXJlY3Rpb246IHJldmVyc2U7XFxufVxcblxcbi5mYS1wdWxzZSxcXG4uZmEtc3Bpbi1wdWxzZSB7XFxuICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBmYS1zcGluO1xcbiAgICAgICAgICBhbmltYXRpb24tbmFtZTogZmEtc3BpbjtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLWRpcmVjdGlvbjogdmFyKC0tZmEtYW5pbWF0aW9uLWRpcmVjdGlvbiwgbm9ybWFsKTtcXG4gICAgICAgICAgYW5pbWF0aW9uLWRpcmVjdGlvbjogdmFyKC0tZmEtYW5pbWF0aW9uLWRpcmVjdGlvbiwgbm9ybWFsKTtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOiB2YXIoLS1mYS1hbmltYXRpb24tZHVyYXRpb24sIDFzKTtcXG4gICAgICAgICAgYW5pbWF0aW9uLWR1cmF0aW9uOiB2YXIoLS1mYS1hbmltYXRpb24tZHVyYXRpb24sIDFzKTtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogdmFyKC0tZmEtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudCwgaW5maW5pdGUpO1xcbiAgICAgICAgICBhbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiB2YXIoLS1mYS1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50LCBpbmZpbml0ZSk7XFxuICAtd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IHZhcigtLWZhLWFuaW1hdGlvbi10aW1pbmcsIHN0ZXBzKDgpKTtcXG4gICAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogdmFyKC0tZmEtYW5pbWF0aW9uLXRpbWluZywgc3RlcHMoOCkpO1xcbn1cXG5cXG5AbWVkaWEgKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246IHJlZHVjZSkge1xcbiAgLmZhLWJlYXQsXFxuLmZhLWJvdW5jZSxcXG4uZmEtZmFkZSxcXG4uZmEtYmVhdC1mYWRlLFxcbi5mYS1mbGlwLFxcbi5mYS1wdWxzZSxcXG4uZmEtc2hha2UsXFxuLmZhLXNwaW4sXFxuLmZhLXNwaW4tcHVsc2Uge1xcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1kZWxheTogLTFtcztcXG4gICAgICAgICAgICBhbmltYXRpb24tZGVsYXk6IC0xbXM7XFxuICAgIC13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOiAxbXM7XFxuICAgICAgICAgICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAxbXM7XFxuICAgIC13ZWJraXQtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogMTtcXG4gICAgICAgICAgICBhbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiAxO1xcbiAgICAtd2Via2l0LXRyYW5zaXRpb24tZGVsYXk6IDBzO1xcbiAgICAgICAgICAgIHRyYW5zaXRpb24tZGVsYXk6IDBzO1xcbiAgICAtd2Via2l0LXRyYW5zaXRpb24tZHVyYXRpb246IDBzO1xcbiAgICAgICAgICAgIHRyYW5zaXRpb24tZHVyYXRpb246IDBzO1xcbiAgfVxcbn1cXG5ALXdlYmtpdC1rZXlmcmFtZXMgZmEtYmVhdCB7XFxuICAwJSwgOTAlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEpO1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XFxuICB9XFxuICA0NSUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUodmFyKC0tZmEtYmVhdC1zY2FsZSwgMS4yNSkpO1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUodmFyKC0tZmEtYmVhdC1zY2FsZSwgMS4yNSkpO1xcbiAgfVxcbn1cXG5Aa2V5ZnJhbWVzIGZhLWJlYXQge1xcbiAgMCUsIDkwJSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xcbiAgfVxcbiAgNDUlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKHZhcigtLWZhLWJlYXQtc2NhbGUsIDEuMjUpKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKHZhcigtLWZhLWJlYXQtc2NhbGUsIDEuMjUpKTtcXG4gIH1cXG59XFxuQC13ZWJraXQta2V5ZnJhbWVzIGZhLWJvdW5jZSB7XFxuICAwJSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxLCAxKSB0cmFuc2xhdGVZKDApO1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMSwgMSkgdHJhbnNsYXRlWSgwKTtcXG4gIH1cXG4gIDEwJSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSh2YXIoLS1mYS1ib3VuY2Utc3RhcnQtc2NhbGUteCwgMS4xKSwgdmFyKC0tZmEtYm91bmNlLXN0YXJ0LXNjYWxlLXksIDAuOSkpIHRyYW5zbGF0ZVkoMCk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSh2YXIoLS1mYS1ib3VuY2Utc3RhcnQtc2NhbGUteCwgMS4xKSwgdmFyKC0tZmEtYm91bmNlLXN0YXJ0LXNjYWxlLXksIDAuOSkpIHRyYW5zbGF0ZVkoMCk7XFxuICB9XFxuICAzMCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUodmFyKC0tZmEtYm91bmNlLWp1bXAtc2NhbGUteCwgMC45KSwgdmFyKC0tZmEtYm91bmNlLWp1bXAtc2NhbGUteSwgMS4xKSkgdHJhbnNsYXRlWSh2YXIoLS1mYS1ib3VuY2UtaGVpZ2h0LCAtMC41ZW0pKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKHZhcigtLWZhLWJvdW5jZS1qdW1wLXNjYWxlLXgsIDAuOSksIHZhcigtLWZhLWJvdW5jZS1qdW1wLXNjYWxlLXksIDEuMSkpIHRyYW5zbGF0ZVkodmFyKC0tZmEtYm91bmNlLWhlaWdodCwgLTAuNWVtKSk7XFxuICB9XFxuICA1MCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUodmFyKC0tZmEtYm91bmNlLWxhbmQtc2NhbGUteCwgMS4wNSksIHZhcigtLWZhLWJvdW5jZS1sYW5kLXNjYWxlLXksIDAuOTUpKSB0cmFuc2xhdGVZKDApO1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUodmFyKC0tZmEtYm91bmNlLWxhbmQtc2NhbGUteCwgMS4wNSksIHZhcigtLWZhLWJvdW5jZS1sYW5kLXNjYWxlLXksIDAuOTUpKSB0cmFuc2xhdGVZKDApO1xcbiAgfVxcbiAgNTclIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEsIDEpIHRyYW5zbGF0ZVkodmFyKC0tZmEtYm91bmNlLXJlYm91bmQsIC0wLjEyNWVtKSk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxLCAxKSB0cmFuc2xhdGVZKHZhcigtLWZhLWJvdW5jZS1yZWJvdW5kLCAtMC4xMjVlbSkpO1xcbiAgfVxcbiAgNjQlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEsIDEpIHRyYW5zbGF0ZVkoMCk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxLCAxKSB0cmFuc2xhdGVZKDApO1xcbiAgfVxcbiAgMTAwJSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxLCAxKSB0cmFuc2xhdGVZKDApO1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMSwgMSkgdHJhbnNsYXRlWSgwKTtcXG4gIH1cXG59XFxuQGtleWZyYW1lcyBmYS1ib3VuY2Uge1xcbiAgMCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMSwgMSkgdHJhbnNsYXRlWSgwKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEsIDEpIHRyYW5zbGF0ZVkoMCk7XFxuICB9XFxuICAxMCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUodmFyKC0tZmEtYm91bmNlLXN0YXJ0LXNjYWxlLXgsIDEuMSksIHZhcigtLWZhLWJvdW5jZS1zdGFydC1zY2FsZS15LCAwLjkpKSB0cmFuc2xhdGVZKDApO1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUodmFyKC0tZmEtYm91bmNlLXN0YXJ0LXNjYWxlLXgsIDEuMSksIHZhcigtLWZhLWJvdW5jZS1zdGFydC1zY2FsZS15LCAwLjkpKSB0cmFuc2xhdGVZKDApO1xcbiAgfVxcbiAgMzAlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKHZhcigtLWZhLWJvdW5jZS1qdW1wLXNjYWxlLXgsIDAuOSksIHZhcigtLWZhLWJvdW5jZS1qdW1wLXNjYWxlLXksIDEuMSkpIHRyYW5zbGF0ZVkodmFyKC0tZmEtYm91bmNlLWhlaWdodCwgLTAuNWVtKSk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSh2YXIoLS1mYS1ib3VuY2UtanVtcC1zY2FsZS14LCAwLjkpLCB2YXIoLS1mYS1ib3VuY2UtanVtcC1zY2FsZS15LCAxLjEpKSB0cmFuc2xhdGVZKHZhcigtLWZhLWJvdW5jZS1oZWlnaHQsIC0wLjVlbSkpO1xcbiAgfVxcbiAgNTAlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKHZhcigtLWZhLWJvdW5jZS1sYW5kLXNjYWxlLXgsIDEuMDUpLCB2YXIoLS1mYS1ib3VuY2UtbGFuZC1zY2FsZS15LCAwLjk1KSkgdHJhbnNsYXRlWSgwKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKHZhcigtLWZhLWJvdW5jZS1sYW5kLXNjYWxlLXgsIDEuMDUpLCB2YXIoLS1mYS1ib3VuY2UtbGFuZC1zY2FsZS15LCAwLjk1KSkgdHJhbnNsYXRlWSgwKTtcXG4gIH1cXG4gIDU3JSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxLCAxKSB0cmFuc2xhdGVZKHZhcigtLWZhLWJvdW5jZS1yZWJvdW5kLCAtMC4xMjVlbSkpO1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMSwgMSkgdHJhbnNsYXRlWSh2YXIoLS1mYS1ib3VuY2UtcmVib3VuZCwgLTAuMTI1ZW0pKTtcXG4gIH1cXG4gIDY0JSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxLCAxKSB0cmFuc2xhdGVZKDApO1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMSwgMSkgdHJhbnNsYXRlWSgwKTtcXG4gIH1cXG4gIDEwMCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMSwgMSkgdHJhbnNsYXRlWSgwKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEsIDEpIHRyYW5zbGF0ZVkoMCk7XFxuICB9XFxufVxcbkAtd2Via2l0LWtleWZyYW1lcyBmYS1mYWRlIHtcXG4gIDUwJSB7XFxuICAgIG9wYWNpdHk6IHZhcigtLWZhLWZhZGUtb3BhY2l0eSwgMC40KTtcXG4gIH1cXG59XFxuQGtleWZyYW1lcyBmYS1mYWRlIHtcXG4gIDUwJSB7XFxuICAgIG9wYWNpdHk6IHZhcigtLWZhLWZhZGUtb3BhY2l0eSwgMC40KTtcXG4gIH1cXG59XFxuQC13ZWJraXQta2V5ZnJhbWVzIGZhLWJlYXQtZmFkZSB7XFxuICAwJSwgMTAwJSB7XFxuICAgIG9wYWNpdHk6IHZhcigtLWZhLWJlYXQtZmFkZS1vcGFjaXR5LCAwLjQpO1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMSk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcXG4gIH1cXG4gIDUwJSB7XFxuICAgIG9wYWNpdHk6IDE7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSh2YXIoLS1mYS1iZWF0LWZhZGUtc2NhbGUsIDEuMTI1KSk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSh2YXIoLS1mYS1iZWF0LWZhZGUtc2NhbGUsIDEuMTI1KSk7XFxuICB9XFxufVxcbkBrZXlmcmFtZXMgZmEtYmVhdC1mYWRlIHtcXG4gIDAlLCAxMDAlIHtcXG4gICAgb3BhY2l0eTogdmFyKC0tZmEtYmVhdC1mYWRlLW9wYWNpdHksIDAuNCk7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xcbiAgfVxcbiAgNTAlIHtcXG4gICAgb3BhY2l0eTogMTtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKHZhcigtLWZhLWJlYXQtZmFkZS1zY2FsZSwgMS4xMjUpKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKHZhcigtLWZhLWJlYXQtZmFkZS1zY2FsZSwgMS4xMjUpKTtcXG4gIH1cXG59XFxuQC13ZWJraXQta2V5ZnJhbWVzIGZhLWZsaXAge1xcbiAgNTAlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZTNkKHZhcigtLWZhLWZsaXAteCwgMCksIHZhcigtLWZhLWZsaXAteSwgMSksIHZhcigtLWZhLWZsaXAteiwgMCksIHZhcigtLWZhLWZsaXAtYW5nbGUsIC0xODBkZWcpKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZTNkKHZhcigtLWZhLWZsaXAteCwgMCksIHZhcigtLWZhLWZsaXAteSwgMSksIHZhcigtLWZhLWZsaXAteiwgMCksIHZhcigtLWZhLWZsaXAtYW5nbGUsIC0xODBkZWcpKTtcXG4gIH1cXG59XFxuQGtleWZyYW1lcyBmYS1mbGlwIHtcXG4gIDUwJSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUzZCh2YXIoLS1mYS1mbGlwLXgsIDApLCB2YXIoLS1mYS1mbGlwLXksIDEpLCB2YXIoLS1mYS1mbGlwLXosIDApLCB2YXIoLS1mYS1mbGlwLWFuZ2xlLCAtMTgwZGVnKSk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUzZCh2YXIoLS1mYS1mbGlwLXgsIDApLCB2YXIoLS1mYS1mbGlwLXksIDEpLCB2YXIoLS1mYS1mbGlwLXosIDApLCB2YXIoLS1mYS1mbGlwLWFuZ2xlLCAtMTgwZGVnKSk7XFxuICB9XFxufVxcbkAtd2Via2l0LWtleWZyYW1lcyBmYS1zaGFrZSB7XFxuICAwJSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoLTE1ZGVnKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgtMTVkZWcpO1xcbiAgfVxcbiAgNCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDE1ZGVnKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgxNWRlZyk7XFxuICB9XFxuICA4JSwgMjQlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgtMThkZWcpO1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKC0xOGRlZyk7XFxuICB9XFxuICAxMiUsIDI4JSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMThkZWcpO1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDE4ZGVnKTtcXG4gIH1cXG4gIDE2JSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoLTIyZGVnKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgtMjJkZWcpO1xcbiAgfVxcbiAgMjAlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgyMmRlZyk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMjJkZWcpO1xcbiAgfVxcbiAgMzIlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgtMTJkZWcpO1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKC0xMmRlZyk7XFxuICB9XFxuICAzNiUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDEyZGVnKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgxMmRlZyk7XFxuICB9XFxuICA0MCUsIDEwMCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xcbiAgfVxcbn1cXG5Aa2V5ZnJhbWVzIGZhLXNoYWtlIHtcXG4gIDAlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgtMTVkZWcpO1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKC0xNWRlZyk7XFxuICB9XFxuICA0JSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMTVkZWcpO1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDE1ZGVnKTtcXG4gIH1cXG4gIDglLCAyNCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKC0xOGRlZyk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoLTE4ZGVnKTtcXG4gIH1cXG4gIDEyJSwgMjglIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgxOGRlZyk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMThkZWcpO1xcbiAgfVxcbiAgMTYlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgtMjJkZWcpO1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKC0yMmRlZyk7XFxuICB9XFxuICAyMCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDIyZGVnKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgyMmRlZyk7XFxuICB9XFxuICAzMiUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKC0xMmRlZyk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoLTEyZGVnKTtcXG4gIH1cXG4gIDM2JSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMTJkZWcpO1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDEyZGVnKTtcXG4gIH1cXG4gIDQwJSwgMTAwJSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XFxuICB9XFxufVxcbkAtd2Via2l0LWtleWZyYW1lcyBmYS1zcGluIHtcXG4gIDAlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcXG4gIH1cXG4gIDEwMCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcXG4gIH1cXG59XFxuQGtleWZyYW1lcyBmYS1zcGluIHtcXG4gIDAlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcXG4gIH1cXG4gIDEwMCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcXG4gIH1cXG59XFxuLmZhLXJvdGF0ZS05MCB7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDkwZGVnKTtcXG4gICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoOTBkZWcpO1xcbn1cXG5cXG4uZmEtcm90YXRlLTE4MCB7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDE4MGRlZyk7XFxuICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDE4MGRlZyk7XFxufVxcblxcbi5mYS1yb3RhdGUtMjcwIHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMjcwZGVnKTtcXG4gICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMjcwZGVnKTtcXG59XFxuXFxuLmZhLWZsaXAtaG9yaXpvbnRhbCB7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoLTEsIDEpO1xcbiAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKC0xLCAxKTtcXG59XFxuXFxuLmZhLWZsaXAtdmVydGljYWwge1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEsIC0xKTtcXG4gICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxLCAtMSk7XFxufVxcblxcbi5mYS1mbGlwLWJvdGgsXFxuLmZhLWZsaXAtaG9yaXpvbnRhbC5mYS1mbGlwLXZlcnRpY2FsIHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgtMSwgLTEpO1xcbiAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKC0xLCAtMSk7XFxufVxcblxcbi5mYS1yb3RhdGUtYnkge1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSh2YXIoLS1mYS1yb3RhdGUtYW5nbGUsIG5vbmUpKTtcXG4gICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUodmFyKC0tZmEtcm90YXRlLWFuZ2xlLCBub25lKSk7XFxufVxcblxcbi5mYS1zdGFjayB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbiAgaGVpZ2h0OiAyZW07XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB3aWR0aDogMi41ZW07XFxufVxcblxcbi5mYS1zdGFjay0xeCxcXG4uZmEtc3RhY2stMngge1xcbiAgYm90dG9tOiAwO1xcbiAgbGVmdDogMDtcXG4gIG1hcmdpbjogYXV0bztcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHJpZ2h0OiAwO1xcbiAgdG9wOiAwO1xcbiAgei1pbmRleDogdmFyKC0tZmEtc3RhY2stei1pbmRleCwgYXV0byk7XFxufVxcblxcbi5zdmctaW5saW5lLS1mYS5mYS1zdGFjay0xeCB7XFxuICBoZWlnaHQ6IDFlbTtcXG4gIHdpZHRoOiAxLjI1ZW07XFxufVxcbi5zdmctaW5saW5lLS1mYS5mYS1zdGFjay0yeCB7XFxuICBoZWlnaHQ6IDJlbTtcXG4gIHdpZHRoOiAyLjVlbTtcXG59XFxuXFxuLmZhLWludmVyc2Uge1xcbiAgY29sb3I6IHZhcigtLWZhLWludmVyc2UsICNmZmYpO1xcbn1cXG5cXG4uc3Itb25seSxcXG4uZmEtc3Itb25seSB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB3aWR0aDogMXB4O1xcbiAgaGVpZ2h0OiAxcHg7XFxuICBwYWRkaW5nOiAwO1xcbiAgbWFyZ2luOiAtMXB4O1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIGNsaXA6IHJlY3QoMCwgMCwgMCwgMCk7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgYm9yZGVyLXdpZHRoOiAwO1xcbn1cXG5cXG4uc3Itb25seS1mb2N1c2FibGU6bm90KDpmb2N1cyksXFxuLmZhLXNyLW9ubHktZm9jdXNhYmxlOm5vdCg6Zm9jdXMpIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHdpZHRoOiAxcHg7XFxuICBoZWlnaHQ6IDFweDtcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW46IC0xcHg7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgY2xpcDogcmVjdCgwLCAwLCAwLCAwKTtcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICBib3JkZXItd2lkdGg6IDA7XFxufVxcblxcbi5zdmctaW5saW5lLS1mYSAuZmEtcHJpbWFyeSB7XFxuICBmaWxsOiB2YXIoLS1mYS1wcmltYXJ5LWNvbG9yLCBjdXJyZW50Q29sb3IpO1xcbiAgb3BhY2l0eTogdmFyKC0tZmEtcHJpbWFyeS1vcGFjaXR5LCAxKTtcXG59XFxuXFxuLnN2Zy1pbmxpbmUtLWZhIC5mYS1zZWNvbmRhcnkge1xcbiAgZmlsbDogdmFyKC0tZmEtc2Vjb25kYXJ5LWNvbG9yLCBjdXJyZW50Q29sb3IpO1xcbiAgb3BhY2l0eTogdmFyKC0tZmEtc2Vjb25kYXJ5LW9wYWNpdHksIDAuNCk7XFxufVxcblxcbi5zdmctaW5saW5lLS1mYS5mYS1zd2FwLW9wYWNpdHkgLmZhLXByaW1hcnkge1xcbiAgb3BhY2l0eTogdmFyKC0tZmEtc2Vjb25kYXJ5LW9wYWNpdHksIDAuNCk7XFxufVxcblxcbi5zdmctaW5saW5lLS1mYS5mYS1zd2FwLW9wYWNpdHkgLmZhLXNlY29uZGFyeSB7XFxuICBvcGFjaXR5OiB2YXIoLS1mYS1wcmltYXJ5LW9wYWNpdHksIDEpO1xcbn1cXG5cXG4uc3ZnLWlubGluZS0tZmEgbWFzayAuZmEtcHJpbWFyeSxcXG4uc3ZnLWlubGluZS0tZmEgbWFzayAuZmEtc2Vjb25kYXJ5IHtcXG4gIGZpbGw6IGJsYWNrO1xcbn1cXG5cXG4uZmFkLmZhLWludmVyc2UsXFxuLmZhLWR1b3RvbmUuZmEtaW52ZXJzZSB7XFxuICBjb2xvcjogdmFyKC0tZmEtaW52ZXJzZSwgI2ZmZik7XFxufVwiO1xuXG5mdW5jdGlvbiBjc3MoKSB7XG4gIHZhciBkY3AgPSBERUZBVUxUX0NTU19QUkVGSVg7XG4gIHZhciBkcmMgPSBERUZBVUxUX1JFUExBQ0VNRU5UX0NMQVNTO1xuICB2YXIgZnAgPSBjb25maWcuY3NzUHJlZml4O1xuICB2YXIgcmMgPSBjb25maWcucmVwbGFjZW1lbnRDbGFzcztcbiAgdmFyIHMgPSBiYXNlU3R5bGVzO1xuXG4gIGlmIChmcCAhPT0gZGNwIHx8IHJjICE9PSBkcmMpIHtcbiAgICB2YXIgZFBhdHQgPSBuZXcgUmVnRXhwKFwiXFxcXC5cIi5jb25jYXQoZGNwLCBcIlxcXFwtXCIpLCAnZycpO1xuICAgIHZhciBjdXN0b21Qcm9wUGF0dCA9IG5ldyBSZWdFeHAoXCJcXFxcLS1cIi5jb25jYXQoZGNwLCBcIlxcXFwtXCIpLCAnZycpO1xuICAgIHZhciByUGF0dCA9IG5ldyBSZWdFeHAoXCJcXFxcLlwiLmNvbmNhdChkcmMpLCAnZycpO1xuICAgIHMgPSBzLnJlcGxhY2UoZFBhdHQsIFwiLlwiLmNvbmNhdChmcCwgXCItXCIpKS5yZXBsYWNlKGN1c3RvbVByb3BQYXR0LCBcIi0tXCIuY29uY2F0KGZwLCBcIi1cIikpLnJlcGxhY2UoclBhdHQsIFwiLlwiLmNvbmNhdChyYykpO1xuICB9XG5cbiAgcmV0dXJuIHM7XG59XG5cbnZhciBfY3NzSW5zZXJ0ZWQgPSBmYWxzZTtcblxuZnVuY3Rpb24gZW5zdXJlQ3NzKCkge1xuICBpZiAoY29uZmlnLmF1dG9BZGRDc3MgJiYgIV9jc3NJbnNlcnRlZCkge1xuICAgIGluc2VydENzcyhjc3MoKSk7XG4gICAgX2Nzc0luc2VydGVkID0gdHJ1ZTtcbiAgfVxufVxuXG52YXIgSW5qZWN0Q1NTID0ge1xuICBtaXhvdXQ6IGZ1bmN0aW9uIG1peG91dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZG9tOiB7XG4gICAgICAgIGNzczogY3NzLFxuICAgICAgICBpbnNlcnRDc3M6IGVuc3VyZUNzc1xuICAgICAgfVxuICAgIH07XG4gIH0sXG4gIGhvb2tzOiBmdW5jdGlvbiBob29rcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYmVmb3JlRE9NRWxlbWVudENyZWF0aW9uOiBmdW5jdGlvbiBiZWZvcmVET01FbGVtZW50Q3JlYXRpb24oKSB7XG4gICAgICAgIGVuc3VyZUNzcygpO1xuICAgICAgfSxcbiAgICAgIGJlZm9yZUkyc3ZnOiBmdW5jdGlvbiBiZWZvcmVJMnN2ZygpIHtcbiAgICAgICAgZW5zdXJlQ3NzKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufTtcblxudmFyIHcgPSBXSU5ET1cgfHwge307XG5pZiAoIXdbTkFNRVNQQUNFX0lERU5USUZJRVJdKSB3W05BTUVTUEFDRV9JREVOVElGSUVSXSA9IHt9O1xuaWYgKCF3W05BTUVTUEFDRV9JREVOVElGSUVSXS5zdHlsZXMpIHdbTkFNRVNQQUNFX0lERU5USUZJRVJdLnN0eWxlcyA9IHt9O1xuaWYgKCF3W05BTUVTUEFDRV9JREVOVElGSUVSXS5ob29rcykgd1tOQU1FU1BBQ0VfSURFTlRJRklFUl0uaG9va3MgPSB7fTtcbmlmICghd1tOQU1FU1BBQ0VfSURFTlRJRklFUl0uc2hpbXMpIHdbTkFNRVNQQUNFX0lERU5USUZJRVJdLnNoaW1zID0gW107XG52YXIgbmFtZXNwYWNlID0gd1tOQU1FU1BBQ0VfSURFTlRJRklFUl07XG5cbnZhciBmdW5jdGlvbnMgPSBbXTtcblxudmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gbGlzdGVuZXIoKSB7XG4gIERPQ1VNRU5ULnJlbW92ZUV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBsaXN0ZW5lcik7XG4gIGxvYWRlZCA9IDE7XG4gIGZ1bmN0aW9ucy5tYXAoZnVuY3Rpb24gKGZuKSB7XG4gICAgcmV0dXJuIGZuKCk7XG4gIH0pO1xufTtcblxudmFyIGxvYWRlZCA9IGZhbHNlO1xuXG5pZiAoSVNfRE9NKSB7XG4gIGxvYWRlZCA9IChET0NVTUVOVC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgPyAvXmxvYWRlZHxeYy8gOiAvXmxvYWRlZHxeaXxeYy8pLnRlc3QoRE9DVU1FTlQucmVhZHlTdGF0ZSk7XG4gIGlmICghbG9hZGVkKSBET0NVTUVOVC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgbGlzdGVuZXIpO1xufVxuXG5mdW5jdGlvbiBkb21yZWFkeSAoZm4pIHtcbiAgaWYgKCFJU19ET00pIHJldHVybjtcbiAgbG9hZGVkID8gc2V0VGltZW91dChmbiwgMCkgOiBmdW5jdGlvbnMucHVzaChmbik7XG59XG5cbmZ1bmN0aW9uIHRvSHRtbChhYnN0cmFjdE5vZGVzKSB7XG4gIHZhciB0YWcgPSBhYnN0cmFjdE5vZGVzLnRhZyxcbiAgICAgIF9hYnN0cmFjdE5vZGVzJGF0dHJpYiA9IGFic3RyYWN0Tm9kZXMuYXR0cmlidXRlcyxcbiAgICAgIGF0dHJpYnV0ZXMgPSBfYWJzdHJhY3ROb2RlcyRhdHRyaWIgPT09IHZvaWQgMCA/IHt9IDogX2Fic3RyYWN0Tm9kZXMkYXR0cmliLFxuICAgICAgX2Fic3RyYWN0Tm9kZXMkY2hpbGRyID0gYWJzdHJhY3ROb2Rlcy5jaGlsZHJlbixcbiAgICAgIGNoaWxkcmVuID0gX2Fic3RyYWN0Tm9kZXMkY2hpbGRyID09PSB2b2lkIDAgPyBbXSA6IF9hYnN0cmFjdE5vZGVzJGNoaWxkcjtcblxuICBpZiAodHlwZW9mIGFic3RyYWN0Tm9kZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGh0bWxFc2NhcGUoYWJzdHJhY3ROb2Rlcyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiPFwiLmNvbmNhdCh0YWcsIFwiIFwiKS5jb25jYXQoam9pbkF0dHJpYnV0ZXMoYXR0cmlidXRlcyksIFwiPlwiKS5jb25jYXQoY2hpbGRyZW4ubWFwKHRvSHRtbCkuam9pbignJyksIFwiPC9cIikuY29uY2F0KHRhZywgXCI+XCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGljb25Gcm9tTWFwcGluZyhtYXBwaW5nLCBwcmVmaXgsIGljb25OYW1lKSB7XG4gIGlmIChtYXBwaW5nICYmIG1hcHBpbmdbcHJlZml4XSAmJiBtYXBwaW5nW3ByZWZpeF1baWNvbk5hbWVdKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByZWZpeDogcHJlZml4LFxuICAgICAgaWNvbk5hbWU6IGljb25OYW1lLFxuICAgICAgaWNvbjogbWFwcGluZ1twcmVmaXhdW2ljb25OYW1lXVxuICAgIH07XG4gIH1cbn1cblxuLyoqXG4gKiBJbnRlcm5hbCBoZWxwZXIgdG8gYmluZCBhIGZ1bmN0aW9uIGtub3duIHRvIGhhdmUgNCBhcmd1bWVudHNcbiAqIHRvIGEgZ2l2ZW4gY29udGV4dC5cbiAqL1xuXG52YXIgYmluZEludGVybmFsNCA9IGZ1bmN0aW9uIGJpbmRJbnRlcm5hbDQoZnVuYywgdGhpc0NvbnRleHQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7XG4gICAgcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQ29udGV4dCwgYSwgYiwgYywgZCk7XG4gIH07XG59O1xuXG4vKipcbiAqICMgUmVkdWNlXG4gKlxuICogQSBmYXN0IG9iamVjdCBgLnJlZHVjZSgpYCBpbXBsZW1lbnRhdGlvbi5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9ICAgc3ViamVjdCAgICAgIFRoZSBvYmplY3QgdG8gcmVkdWNlIG92ZXIuXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gZm4gICAgICAgICAgIFRoZSByZWR1Y2VyIGZ1bmN0aW9uLlxuICogQHBhcmFtICB7bWl4ZWR9ICAgIGluaXRpYWxWYWx1ZSBUaGUgaW5pdGlhbCB2YWx1ZSBmb3IgdGhlIHJlZHVjZXIsIGRlZmF1bHRzIHRvIHN1YmplY3RbMF0uXG4gKiBAcGFyYW0gIHtPYmplY3R9ICAgdGhpc0NvbnRleHQgIFRoZSBjb250ZXh0IGZvciB0aGUgcmVkdWNlci5cbiAqIEByZXR1cm4ge21peGVkfSAgICAgICAgICAgICAgICAgVGhlIGZpbmFsIHJlc3VsdC5cbiAqL1xuXG5cbnZhciByZWR1Y2UgPSBmdW5jdGlvbiBmYXN0UmVkdWNlT2JqZWN0KHN1YmplY3QsIGZuLCBpbml0aWFsVmFsdWUsIHRoaXNDb250ZXh0KSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoc3ViamVjdCksXG4gICAgICBsZW5ndGggPSBrZXlzLmxlbmd0aCxcbiAgICAgIGl0ZXJhdG9yID0gdGhpc0NvbnRleHQgIT09IHVuZGVmaW5lZCA/IGJpbmRJbnRlcm5hbDQoZm4sIHRoaXNDb250ZXh0KSA6IGZuLFxuICAgICAgaSxcbiAgICAgIGtleSxcbiAgICAgIHJlc3VsdDtcblxuICBpZiAoaW5pdGlhbFZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICBpID0gMTtcbiAgICByZXN1bHQgPSBzdWJqZWN0W2tleXNbMF1dO1xuICB9IGVsc2Uge1xuICAgIGkgPSAwO1xuICAgIHJlc3VsdCA9IGluaXRpYWxWYWx1ZTtcbiAgfVxuXG4gIGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIHJlc3VsdCA9IGl0ZXJhdG9yKHJlc3VsdCwgc3ViamVjdFtrZXldLCBrZXksIHN1YmplY3QpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8qKlxuICogdWNzMmRlY29kZSgpIGFuZCBjb2RlUG9pbnRBdCgpIGFyZSBib3RoIHdvcmtzIG9mIE1hdGhpYXMgQnluZW5zIGFuZCBsaWNlbnNlZCB1bmRlciBNSVRcbiAqXG4gKiBDb3B5cmlnaHQgTWF0aGlhcyBCeW5lbnMgPGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS8+XG5cbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZ1xuICogYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4gKiBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbiAqIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbiAqIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0b1xuICogcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvXG4gKiB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG4gKiBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbiAqIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuICogTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkRcbiAqIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkVcbiAqIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT05cbiAqIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTlxuICogV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKi9cbmZ1bmN0aW9uIHVjczJkZWNvZGUoc3RyaW5nKSB7XG4gIHZhciBvdXRwdXQgPSBbXTtcbiAgdmFyIGNvdW50ZXIgPSAwO1xuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcblxuICB3aGlsZSAoY291bnRlciA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cbiAgICBpZiAodmFsdWUgPj0gMHhEODAwICYmIHZhbHVlIDw9IDB4REJGRiAmJiBjb3VudGVyIDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgZXh0cmEgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspO1xuXG4gICAgICBpZiAoKGV4dHJhICYgMHhGQzAwKSA9PSAweERDMDApIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICAgICAgb3V0cHV0LnB1c2goKCh2YWx1ZSAmIDB4M0ZGKSA8PCAxMCkgKyAoZXh0cmEgJiAweDNGRikgKyAweDEwMDAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dHB1dC5wdXNoKHZhbHVlKTtcbiAgICAgICAgY291bnRlci0tO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBvdXRwdXQucHVzaCh2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuZnVuY3Rpb24gdG9IZXgodW5pY29kZSkge1xuICB2YXIgZGVjb2RlZCA9IHVjczJkZWNvZGUodW5pY29kZSk7XG4gIHJldHVybiBkZWNvZGVkLmxlbmd0aCA9PT0gMSA/IGRlY29kZWRbMF0udG9TdHJpbmcoMTYpIDogbnVsbDtcbn1cbmZ1bmN0aW9uIGNvZGVQb2ludEF0KHN0cmluZywgaW5kZXgpIHtcbiAgdmFyIHNpemUgPSBzdHJpbmcubGVuZ3RoO1xuICB2YXIgZmlyc3QgPSBzdHJpbmcuY2hhckNvZGVBdChpbmRleCk7XG4gIHZhciBzZWNvbmQ7XG5cbiAgaWYgKGZpcnN0ID49IDB4RDgwMCAmJiBmaXJzdCA8PSAweERCRkYgJiYgc2l6ZSA+IGluZGV4ICsgMSkge1xuICAgIHNlY29uZCA9IHN0cmluZy5jaGFyQ29kZUF0KGluZGV4ICsgMSk7XG5cbiAgICBpZiAoc2Vjb25kID49IDB4REMwMCAmJiBzZWNvbmQgPD0gMHhERkZGKSB7XG4gICAgICByZXR1cm4gKGZpcnN0IC0gMHhEODAwKSAqIDB4NDAwICsgc2Vjb25kIC0gMHhEQzAwICsgMHgxMDAwMDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmlyc3Q7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUljb25zKGljb25zKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhpY29ucykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGljb25OYW1lKSB7XG4gICAgdmFyIGljb24gPSBpY29uc1tpY29uTmFtZV07XG4gICAgdmFyIGV4cGFuZGVkID0gISFpY29uLmljb247XG5cbiAgICBpZiAoZXhwYW5kZWQpIHtcbiAgICAgIGFjY1tpY29uLmljb25OYW1lXSA9IGljb24uaWNvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgYWNjW2ljb25OYW1lXSA9IGljb247XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufVxuXG5mdW5jdGlvbiBkZWZpbmVJY29ucyhwcmVmaXgsIGljb25zKSB7XG4gIHZhciBwYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICB2YXIgX3BhcmFtcyRza2lwSG9va3MgPSBwYXJhbXMuc2tpcEhvb2tzLFxuICAgICAgc2tpcEhvb2tzID0gX3BhcmFtcyRza2lwSG9va3MgPT09IHZvaWQgMCA/IGZhbHNlIDogX3BhcmFtcyRza2lwSG9va3M7XG4gIHZhciBub3JtYWxpemVkID0gbm9ybWFsaXplSWNvbnMoaWNvbnMpO1xuXG4gIGlmICh0eXBlb2YgbmFtZXNwYWNlLmhvb2tzLmFkZFBhY2sgPT09ICdmdW5jdGlvbicgJiYgIXNraXBIb29rcykge1xuICAgIG5hbWVzcGFjZS5ob29rcy5hZGRQYWNrKHByZWZpeCwgbm9ybWFsaXplSWNvbnMoaWNvbnMpKTtcbiAgfSBlbHNlIHtcbiAgICBuYW1lc3BhY2Uuc3R5bGVzW3ByZWZpeF0gPSBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgbmFtZXNwYWNlLnN0eWxlc1twcmVmaXhdIHx8IHt9KSwgbm9ybWFsaXplZCk7XG4gIH1cbiAgLyoqXG4gICAqIEZvbnQgQXdlc29tZSA0IHVzZWQgdGhlIHByZWZpeCBvZiBgZmFgIGZvciBhbGwgaWNvbnMuIFdpdGggdGhlIGludHJvZHVjdGlvblxuICAgKiBvZiBuZXcgc3R5bGVzIHdlIG5lZWRlZCB0byBkaWZmZXJlbnRpYXRlIGJldHdlZW4gdGhlbS4gUHJlZml4IGBmYWAgaXMgbm93IGFuIGFsaWFzXG4gICAqIGZvciBgZmFzYCBzbyB3ZSdsbCBlYXNlIHRoZSB1cGdyYWRlIHByb2Nlc3MgZm9yIG91ciB1c2VycyBieSBhdXRvbWF0aWNhbGx5IGRlZmluaW5nXG4gICAqIHRoaXMgYXMgd2VsbC5cbiAgICovXG5cblxuICBpZiAocHJlZml4ID09PSAnZmFzJykge1xuICAgIGRlZmluZUljb25zKCdmYScsIGljb25zKTtcbiAgfVxufVxuXG52YXIgZHVvdG9uZVBhdGhSZSA9IFsvKiNfX1BVUkVfXyovX3dyYXBSZWdFeHAoL3BhdGggZD1cIigoPzooPyFcIilbXFxzXFxTXSkrKVwiLipwYXRoIGQ9XCIoKD86KD8hXCIpW1xcc1xcU10pKylcIi8sIHtcbiAgZDE6IDEsXG4gIGQyOiAyXG59KSwgLyojX19QVVJFX18qL193cmFwUmVnRXhwKC9wYXRoIGNsYXNzPVwiKCg/Oig/IVwiKVtcXHNcXFNdKSspXCIuKmQ9XCIoKD86KD8hXCIpW1xcc1xcU10pKylcIi4qcGF0aCBjbGFzcz1cIigoPzooPyFcIilbXFxzXFxTXSkrKVwiLipkPVwiKCg/Oig/IVwiKVtcXHNcXFNdKSspXCIvLCB7XG4gIGNsczE6IDEsXG4gIGQxOiAyLFxuICBjbHMyOiAzLFxuICBkMjogNFxufSksIC8qI19fUFVSRV9fKi9fd3JhcFJlZ0V4cCgvcGF0aCBjbGFzcz1cIigoPzooPyFcIilbXFxzXFxTXSkrKVwiLipkPVwiKCg/Oig/IVwiKVtcXHNcXFNdKSspXCIvLCB7XG4gIGNsczE6IDEsXG4gIGQxOiAyXG59KV07XG5cbnZhciBfTE9OR19TVFlMRSwgX1BSRUZJWEVTLCBfUFJFRklYRVNfRk9SX0ZBTUlMWTtcbnZhciBzdHlsZXMgPSBuYW1lc3BhY2Uuc3R5bGVzLFxuICAgIHNoaW1zID0gbmFtZXNwYWNlLnNoaW1zO1xudmFyIExPTkdfU1RZTEUgPSAoX0xPTkdfU1RZTEUgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9MT05HX1NUWUxFLCBGQU1JTFlfQ0xBU1NJQywgT2JqZWN0LnZhbHVlcyhQUkVGSVhfVE9fTE9OR19TVFlMRVtGQU1JTFlfQ0xBU1NJQ10pKSwgX2RlZmluZVByb3BlcnR5KF9MT05HX1NUWUxFLCBGQU1JTFlfU0hBUlAsIE9iamVjdC52YWx1ZXMoUFJFRklYX1RPX0xPTkdfU1RZTEVbRkFNSUxZX1NIQVJQXSkpLCBfTE9OR19TVFlMRSk7XG52YXIgX2RlZmF1bHRVc2FibGVQcmVmaXggPSBudWxsO1xudmFyIF9ieVVuaWNvZGUgPSB7fTtcbnZhciBfYnlMaWdhdHVyZSA9IHt9O1xudmFyIF9ieU9sZE5hbWUgPSB7fTtcbnZhciBfYnlPbGRVbmljb2RlID0ge307XG52YXIgX2J5QWxpYXMgPSB7fTtcbnZhciBQUkVGSVhFUyA9IChfUFJFRklYRVMgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9QUkVGSVhFUywgRkFNSUxZX0NMQVNTSUMsIE9iamVjdC5rZXlzKFBSRUZJWF9UT19TVFlMRVtGQU1JTFlfQ0xBU1NJQ10pKSwgX2RlZmluZVByb3BlcnR5KF9QUkVGSVhFUywgRkFNSUxZX1NIQVJQLCBPYmplY3Qua2V5cyhQUkVGSVhfVE9fU1RZTEVbRkFNSUxZX1NIQVJQXSkpLCBfUFJFRklYRVMpO1xuXG5mdW5jdGlvbiBpc1Jlc2VydmVkKG5hbWUpIHtcbiAgcmV0dXJuIH5SRVNFUlZFRF9DTEFTU0VTLmluZGV4T2YobmFtZSk7XG59XG5cbmZ1bmN0aW9uIGdldEljb25OYW1lKGNzc1ByZWZpeCwgY2xzKSB7XG4gIHZhciBwYXJ0cyA9IGNscy5zcGxpdCgnLScpO1xuICB2YXIgcHJlZml4ID0gcGFydHNbMF07XG4gIHZhciBpY29uTmFtZSA9IHBhcnRzLnNsaWNlKDEpLmpvaW4oJy0nKTtcblxuICBpZiAocHJlZml4ID09PSBjc3NQcmVmaXggJiYgaWNvbk5hbWUgIT09ICcnICYmICFpc1Jlc2VydmVkKGljb25OYW1lKSkge1xuICAgIHJldHVybiBpY29uTmFtZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxudmFyIGJ1aWxkID0gZnVuY3Rpb24gYnVpbGQoKSB7XG4gIHZhciBsb29rdXAgPSBmdW5jdGlvbiBsb29rdXAocmVkdWNlcikge1xuICAgIHJldHVybiByZWR1Y2Uoc3R5bGVzLCBmdW5jdGlvbiAobywgc3R5bGUsIHByZWZpeCkge1xuICAgICAgb1twcmVmaXhdID0gcmVkdWNlKHN0eWxlLCByZWR1Y2VyLCB7fSk7XG4gICAgICByZXR1cm4gbztcbiAgICB9LCB7fSk7XG4gIH07XG5cbiAgX2J5VW5pY29kZSA9IGxvb2t1cChmdW5jdGlvbiAoYWNjLCBpY29uLCBpY29uTmFtZSkge1xuICAgIGlmIChpY29uWzNdKSB7XG4gICAgICBhY2NbaWNvblszXV0gPSBpY29uTmFtZTtcbiAgICB9XG5cbiAgICBpZiAoaWNvblsyXSkge1xuICAgICAgdmFyIGFsaWFzZXMgPSBpY29uWzJdLmZpbHRlcihmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGEgPT09ICdudW1iZXInO1xuICAgICAgfSk7XG4gICAgICBhbGlhc2VzLmZvckVhY2goZnVuY3Rpb24gKGFsaWFzKSB7XG4gICAgICAgIGFjY1thbGlhcy50b1N0cmluZygxNildID0gaWNvbk5hbWU7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9KTtcbiAgX2J5TGlnYXR1cmUgPSBsb29rdXAoZnVuY3Rpb24gKGFjYywgaWNvbiwgaWNvbk5hbWUpIHtcbiAgICBhY2NbaWNvbk5hbWVdID0gaWNvbk5hbWU7XG5cbiAgICBpZiAoaWNvblsyXSkge1xuICAgICAgdmFyIGFsaWFzZXMgPSBpY29uWzJdLmZpbHRlcihmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGEgPT09ICdzdHJpbmcnO1xuICAgICAgfSk7XG4gICAgICBhbGlhc2VzLmZvckVhY2goZnVuY3Rpb24gKGFsaWFzKSB7XG4gICAgICAgIGFjY1thbGlhc10gPSBpY29uTmFtZTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhY2M7XG4gIH0pO1xuICBfYnlBbGlhcyA9IGxvb2t1cChmdW5jdGlvbiAoYWNjLCBpY29uLCBpY29uTmFtZSkge1xuICAgIHZhciBhbGlhc2VzID0gaWNvblsyXTtcbiAgICBhY2NbaWNvbk5hbWVdID0gaWNvbk5hbWU7XG4gICAgYWxpYXNlcy5mb3JFYWNoKGZ1bmN0aW9uIChhbGlhcykge1xuICAgICAgYWNjW2FsaWFzXSA9IGljb25OYW1lO1xuICAgIH0pO1xuICAgIHJldHVybiBhY2M7XG4gIH0pOyAvLyBJZiB3ZSBoYXZlIGEgS2l0LCB3ZSBjYW4ndCBkZXRlcm1pbmUgaWYgcmVndWxhciBpcyBhdmFpbGFibGUgc2luY2Ugd2VcbiAgLy8gY291bGQgYmUgYXV0by1mZXRjaGluZyBpdC4gV2UnbGwgaGF2ZSB0byBhc3N1bWUgdGhhdCBpdCBpcyBhdmFpbGFibGUuXG5cbiAgdmFyIGhhc1JlZ3VsYXIgPSAnZmFyJyBpbiBzdHlsZXMgfHwgY29uZmlnLmF1dG9GZXRjaFN2ZztcbiAgdmFyIHNoaW1Mb29rdXBzID0gcmVkdWNlKHNoaW1zLCBmdW5jdGlvbiAoYWNjLCBzaGltKSB7XG4gICAgdmFyIG1heWJlTmFtZU1heWJlVW5pY29kZSA9IHNoaW1bMF07XG4gICAgdmFyIHByZWZpeCA9IHNoaW1bMV07XG4gICAgdmFyIGljb25OYW1lID0gc2hpbVsyXTtcblxuICAgIGlmIChwcmVmaXggPT09ICdmYXInICYmICFoYXNSZWd1bGFyKSB7XG4gICAgICBwcmVmaXggPSAnZmFzJztcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG1heWJlTmFtZU1heWJlVW5pY29kZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGFjYy5uYW1lc1ttYXliZU5hbWVNYXliZVVuaWNvZGVdID0ge1xuICAgICAgICBwcmVmaXg6IHByZWZpeCxcbiAgICAgICAgaWNvbk5hbWU6IGljb25OYW1lXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbWF5YmVOYW1lTWF5YmVVbmljb2RlID09PSAnbnVtYmVyJykge1xuICAgICAgYWNjLnVuaWNvZGVzW21heWJlTmFtZU1heWJlVW5pY29kZS50b1N0cmluZygxNildID0ge1xuICAgICAgICBwcmVmaXg6IHByZWZpeCxcbiAgICAgICAgaWNvbk5hbWU6IGljb25OYW1lXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBhY2M7XG4gIH0sIHtcbiAgICBuYW1lczoge30sXG4gICAgdW5pY29kZXM6IHt9XG4gIH0pO1xuICBfYnlPbGROYW1lID0gc2hpbUxvb2t1cHMubmFtZXM7XG4gIF9ieU9sZFVuaWNvZGUgPSBzaGltTG9va3Vwcy51bmljb2RlcztcbiAgX2RlZmF1bHRVc2FibGVQcmVmaXggPSBnZXRDYW5vbmljYWxQcmVmaXgoY29uZmlnLnN0eWxlRGVmYXVsdCwge1xuICAgIGZhbWlseTogY29uZmlnLmZhbWlseURlZmF1bHRcbiAgfSk7XG59O1xub25DaGFuZ2UoZnVuY3Rpb24gKGMpIHtcbiAgX2RlZmF1bHRVc2FibGVQcmVmaXggPSBnZXRDYW5vbmljYWxQcmVmaXgoYy5zdHlsZURlZmF1bHQsIHtcbiAgICBmYW1pbHk6IGNvbmZpZy5mYW1pbHlEZWZhdWx0XG4gIH0pO1xufSk7XG5idWlsZCgpO1xuZnVuY3Rpb24gYnlVbmljb2RlKHByZWZpeCwgdW5pY29kZSkge1xuICByZXR1cm4gKF9ieVVuaWNvZGVbcHJlZml4XSB8fCB7fSlbdW5pY29kZV07XG59XG5mdW5jdGlvbiBieUxpZ2F0dXJlKHByZWZpeCwgbGlnYXR1cmUpIHtcbiAgcmV0dXJuIChfYnlMaWdhdHVyZVtwcmVmaXhdIHx8IHt9KVtsaWdhdHVyZV07XG59XG5mdW5jdGlvbiBieUFsaWFzKHByZWZpeCwgYWxpYXMpIHtcbiAgcmV0dXJuIChfYnlBbGlhc1twcmVmaXhdIHx8IHt9KVthbGlhc107XG59XG5mdW5jdGlvbiBieU9sZE5hbWUobmFtZSkge1xuICByZXR1cm4gX2J5T2xkTmFtZVtuYW1lXSB8fCB7XG4gICAgcHJlZml4OiBudWxsLFxuICAgIGljb25OYW1lOiBudWxsXG4gIH07XG59XG5mdW5jdGlvbiBieU9sZFVuaWNvZGUodW5pY29kZSkge1xuICB2YXIgb2xkVW5pY29kZSA9IF9ieU9sZFVuaWNvZGVbdW5pY29kZV07XG4gIHZhciBuZXdVbmljb2RlID0gYnlVbmljb2RlKCdmYXMnLCB1bmljb2RlKTtcbiAgcmV0dXJuIG9sZFVuaWNvZGUgfHwgKG5ld1VuaWNvZGUgPyB7XG4gICAgcHJlZml4OiAnZmFzJyxcbiAgICBpY29uTmFtZTogbmV3VW5pY29kZVxuICB9IDogbnVsbCkgfHwge1xuICAgIHByZWZpeDogbnVsbCxcbiAgICBpY29uTmFtZTogbnVsbFxuICB9O1xufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdFVzYWJsZVByZWZpeCgpIHtcbiAgcmV0dXJuIF9kZWZhdWx0VXNhYmxlUHJlZml4O1xufVxudmFyIGVtcHR5Q2Fub25pY2FsSWNvbiA9IGZ1bmN0aW9uIGVtcHR5Q2Fub25pY2FsSWNvbigpIHtcbiAgcmV0dXJuIHtcbiAgICBwcmVmaXg6IG51bGwsXG4gICAgaWNvbk5hbWU6IG51bGwsXG4gICAgcmVzdDogW11cbiAgfTtcbn07XG5mdW5jdGlvbiBnZXRDYW5vbmljYWxQcmVmaXgoc3R5bGVPclByZWZpeCkge1xuICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgdmFyIF9wYXJhbXMkZmFtaWx5ID0gcGFyYW1zLmZhbWlseSxcbiAgICAgIGZhbWlseSA9IF9wYXJhbXMkZmFtaWx5ID09PSB2b2lkIDAgPyBGQU1JTFlfQ0xBU1NJQyA6IF9wYXJhbXMkZmFtaWx5O1xuICB2YXIgc3R5bGUgPSBQUkVGSVhfVE9fU1RZTEVbZmFtaWx5XVtzdHlsZU9yUHJlZml4XTtcbiAgdmFyIHByZWZpeCA9IFNUWUxFX1RPX1BSRUZJWFtmYW1pbHldW3N0eWxlT3JQcmVmaXhdIHx8IFNUWUxFX1RPX1BSRUZJWFtmYW1pbHldW3N0eWxlXTtcbiAgdmFyIGRlZmluZWQgPSBzdHlsZU9yUHJlZml4IGluIG5hbWVzcGFjZS5zdHlsZXMgPyBzdHlsZU9yUHJlZml4IDogbnVsbDtcbiAgcmV0dXJuIHByZWZpeCB8fCBkZWZpbmVkIHx8IG51bGw7XG59XG52YXIgUFJFRklYRVNfRk9SX0ZBTUlMWSA9IChfUFJFRklYRVNfRk9SX0ZBTUlMWSA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX1BSRUZJWEVTX0ZPUl9GQU1JTFksIEZBTUlMWV9DTEFTU0lDLCBPYmplY3Qua2V5cyhQUkVGSVhfVE9fTE9OR19TVFlMRVtGQU1JTFlfQ0xBU1NJQ10pKSwgX2RlZmluZVByb3BlcnR5KF9QUkVGSVhFU19GT1JfRkFNSUxZLCBGQU1JTFlfU0hBUlAsIE9iamVjdC5rZXlzKFBSRUZJWF9UT19MT05HX1NUWUxFW0ZBTUlMWV9TSEFSUF0pKSwgX1BSRUZJWEVTX0ZPUl9GQU1JTFkpO1xuZnVuY3Rpb24gZ2V0Q2Fub25pY2FsSWNvbih2YWx1ZXMpIHtcbiAgdmFyIF9mYW1Qcm9wcztcblxuICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgdmFyIF9wYXJhbXMkc2tpcExvb2t1cHMgPSBwYXJhbXMuc2tpcExvb2t1cHMsXG4gICAgICBza2lwTG9va3VwcyA9IF9wYXJhbXMkc2tpcExvb2t1cHMgPT09IHZvaWQgMCA/IGZhbHNlIDogX3BhcmFtcyRza2lwTG9va3VwcztcbiAgdmFyIGZhbVByb3BzID0gKF9mYW1Qcm9wcyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2ZhbVByb3BzLCBGQU1JTFlfQ0xBU1NJQywgXCJcIi5jb25jYXQoY29uZmlnLmNzc1ByZWZpeCwgXCItXCIpLmNvbmNhdChGQU1JTFlfQ0xBU1NJQykpLCBfZGVmaW5lUHJvcGVydHkoX2ZhbVByb3BzLCBGQU1JTFlfU0hBUlAsIFwiXCIuY29uY2F0KGNvbmZpZy5jc3NQcmVmaXgsIFwiLVwiKS5jb25jYXQoRkFNSUxZX1NIQVJQKSksIF9mYW1Qcm9wcyk7XG4gIHZhciBnaXZlblByZWZpeCA9IG51bGw7XG4gIHZhciBmYW1pbHkgPSBGQU1JTFlfQ0xBU1NJQztcblxuICBpZiAodmFsdWVzLmluY2x1ZGVzKGZhbVByb3BzW0ZBTUlMWV9DTEFTU0lDXSkgfHwgdmFsdWVzLnNvbWUoZnVuY3Rpb24gKHYpIHtcbiAgICByZXR1cm4gUFJFRklYRVNfRk9SX0ZBTUlMWVtGQU1JTFlfQ0xBU1NJQ10uaW5jbHVkZXModik7XG4gIH0pKSB7XG4gICAgZmFtaWx5ID0gRkFNSUxZX0NMQVNTSUM7XG4gIH1cblxuICBpZiAodmFsdWVzLmluY2x1ZGVzKGZhbVByb3BzW0ZBTUlMWV9TSEFSUF0pIHx8IHZhbHVlcy5zb21lKGZ1bmN0aW9uICh2KSB7XG4gICAgcmV0dXJuIFBSRUZJWEVTX0ZPUl9GQU1JTFlbRkFNSUxZX1NIQVJQXS5pbmNsdWRlcyh2KTtcbiAgfSkpIHtcbiAgICBmYW1pbHkgPSBGQU1JTFlfU0hBUlA7XG4gIH1cblxuICB2YXIgY2Fub25pY2FsID0gdmFsdWVzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBjbHMpIHtcbiAgICB2YXIgaWNvbk5hbWUgPSBnZXRJY29uTmFtZShjb25maWcuY3NzUHJlZml4LCBjbHMpO1xuXG4gICAgaWYgKHN0eWxlc1tjbHNdKSB7XG4gICAgICBjbHMgPSBMT05HX1NUWUxFW2ZhbWlseV0uaW5jbHVkZXMoY2xzKSA/IExPTkdfU1RZTEVfVE9fUFJFRklYW2ZhbWlseV1bY2xzXSA6IGNscztcbiAgICAgIGdpdmVuUHJlZml4ID0gY2xzO1xuICAgICAgYWNjLnByZWZpeCA9IGNscztcbiAgICB9IGVsc2UgaWYgKFBSRUZJWEVTW2ZhbWlseV0uaW5kZXhPZihjbHMpID4gLTEpIHtcbiAgICAgIGdpdmVuUHJlZml4ID0gY2xzO1xuICAgICAgYWNjLnByZWZpeCA9IGdldENhbm9uaWNhbFByZWZpeChjbHMsIHtcbiAgICAgICAgZmFtaWx5OiBmYW1pbHlcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoaWNvbk5hbWUpIHtcbiAgICAgIGFjYy5pY29uTmFtZSA9IGljb25OYW1lO1xuICAgIH0gZWxzZSBpZiAoY2xzICE9PSBjb25maWcucmVwbGFjZW1lbnRDbGFzcyAmJiBjbHMgIT09IGZhbVByb3BzW0ZBTUlMWV9DTEFTU0lDXSAmJiBjbHMgIT09IGZhbVByb3BzW0ZBTUlMWV9TSEFSUF0pIHtcbiAgICAgIGFjYy5yZXN0LnB1c2goY2xzKTtcbiAgICB9XG5cbiAgICBpZiAoIXNraXBMb29rdXBzICYmIGFjYy5wcmVmaXggJiYgYWNjLmljb25OYW1lKSB7XG4gICAgICB2YXIgc2hpbSA9IGdpdmVuUHJlZml4ID09PSAnZmEnID8gYnlPbGROYW1lKGFjYy5pY29uTmFtZSkgOiB7fTtcbiAgICAgIHZhciBhbGlhc0ljb25OYW1lID0gYnlBbGlhcyhhY2MucHJlZml4LCBhY2MuaWNvbk5hbWUpO1xuXG4gICAgICBpZiAoc2hpbS5wcmVmaXgpIHtcbiAgICAgICAgZ2l2ZW5QcmVmaXggPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBhY2MuaWNvbk5hbWUgPSBzaGltLmljb25OYW1lIHx8IGFsaWFzSWNvbk5hbWUgfHwgYWNjLmljb25OYW1lO1xuICAgICAgYWNjLnByZWZpeCA9IHNoaW0ucHJlZml4IHx8IGFjYy5wcmVmaXg7XG5cbiAgICAgIGlmIChhY2MucHJlZml4ID09PSAnZmFyJyAmJiAhc3R5bGVzWydmYXInXSAmJiBzdHlsZXNbJ2ZhcyddICYmICFjb25maWcuYXV0b0ZldGNoU3ZnKSB7XG4gICAgICAgIC8vIEFsbG93IGEgZmFsbGJhY2sgZnJvbSB0aGUgcmVndWxhciBzdHlsZSB0byBzb2xpZCBpZiByZWd1bGFyIGlzIG5vdCBhdmFpbGFibGVcbiAgICAgICAgLy8gYnV0IG9ubHkgaWYgd2UgYXJlbid0IGF1dG8tZmV0Y2hpbmcgU1ZHc1xuICAgICAgICBhY2MucHJlZml4ID0gJ2Zhcyc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfSwgZW1wdHlDYW5vbmljYWxJY29uKCkpO1xuXG4gIGlmICh2YWx1ZXMuaW5jbHVkZXMoJ2ZhLWJyYW5kcycpIHx8IHZhbHVlcy5pbmNsdWRlcygnZmFiJykpIHtcbiAgICBjYW5vbmljYWwucHJlZml4ID0gJ2ZhYic7XG4gIH1cblxuICBpZiAodmFsdWVzLmluY2x1ZGVzKCdmYS1kdW90b25lJykgfHwgdmFsdWVzLmluY2x1ZGVzKCdmYWQnKSkge1xuICAgIGNhbm9uaWNhbC5wcmVmaXggPSAnZmFkJztcbiAgfVxuXG4gIGlmICghY2Fub25pY2FsLnByZWZpeCAmJiBmYW1pbHkgPT09IEZBTUlMWV9TSEFSUCAmJiAoc3R5bGVzWydmYXNzJ10gfHwgY29uZmlnLmF1dG9GZXRjaFN2ZykpIHtcbiAgICBjYW5vbmljYWwucHJlZml4ID0gJ2Zhc3MnO1xuICAgIGNhbm9uaWNhbC5pY29uTmFtZSA9IGJ5QWxpYXMoY2Fub25pY2FsLnByZWZpeCwgY2Fub25pY2FsLmljb25OYW1lKSB8fCBjYW5vbmljYWwuaWNvbk5hbWU7XG4gIH1cblxuICBpZiAoY2Fub25pY2FsLnByZWZpeCA9PT0gJ2ZhJyB8fCBnaXZlblByZWZpeCA9PT0gJ2ZhJykge1xuICAgIC8vIFRoZSBmYSBwcmVmaXggaXMgbm90IGNhbm9uaWNhbC4gU28gaWYgaXQgaGFzIG1hZGUgaXQgdGhyb3VnaCB1bnRpbCB0aGlzIHBvaW50XG4gICAgLy8gd2Ugd2lsbCBzaGlmdCBpdCB0byB0aGUgY29ycmVjdCBwcmVmaXguXG4gICAgY2Fub25pY2FsLnByZWZpeCA9IGdldERlZmF1bHRVc2FibGVQcmVmaXgoKSB8fCAnZmFzJztcbiAgfVxuXG4gIHJldHVybiBjYW5vbmljYWw7XG59XG5cbnZhciBMaWJyYXJ5ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTGlicmFyeSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTGlicmFyeSk7XG5cbiAgICB0aGlzLmRlZmluaXRpb25zID0ge307XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTGlicmFyeSwgW3tcbiAgICBrZXk6IFwiYWRkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZCgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBkZWZpbml0aW9ucyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgZGVmaW5pdGlvbnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHZhciBhZGRpdGlvbnMgPSBkZWZpbml0aW9ucy5yZWR1Y2UodGhpcy5fcHVsbERlZmluaXRpb25zLCB7fSk7XG4gICAgICBPYmplY3Qua2V5cyhhZGRpdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBfdGhpcy5kZWZpbml0aW9uc1trZXldID0gX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIF90aGlzLmRlZmluaXRpb25zW2tleV0gfHwge30pLCBhZGRpdGlvbnNba2V5XSk7XG4gICAgICAgIGRlZmluZUljb25zKGtleSwgYWRkaXRpb25zW2tleV0pOyAvLyBUT0RPIGNhbiB3ZSBzdG9wIGRvaW5nIHRoaXM/IFdlIGNhbid0IGdldCB0aGUgaWNvbnMgYnkgJ2ZhLXNvbGlkJyBhbnkgbG9uZ2VyIHNvIHRoaXMgcHJvYmFibHkgbmVlZHMgdG8gY2hhbmdlXG5cbiAgICAgICAgdmFyIGxvbmdQcmVmaXggPSBQUkVGSVhfVE9fTE9OR19TVFlMRVtGQU1JTFlfQ0xBU1NJQ11ba2V5XTtcbiAgICAgICAgaWYgKGxvbmdQcmVmaXgpIGRlZmluZUljb25zKGxvbmdQcmVmaXgsIGFkZGl0aW9uc1trZXldKTtcbiAgICAgICAgYnVpbGQoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZXNldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAgIHRoaXMuZGVmaW5pdGlvbnMgPSB7fTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX3B1bGxEZWZpbml0aW9uc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcHVsbERlZmluaXRpb25zKGFkZGl0aW9ucywgZGVmaW5pdGlvbikge1xuICAgICAgdmFyIG5vcm1hbGl6ZWQgPSBkZWZpbml0aW9uLnByZWZpeCAmJiBkZWZpbml0aW9uLmljb25OYW1lICYmIGRlZmluaXRpb24uaWNvbiA/IHtcbiAgICAgICAgMDogZGVmaW5pdGlvblxuICAgICAgfSA6IGRlZmluaXRpb247XG4gICAgICBPYmplY3Qua2V5cyhub3JtYWxpemVkKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgX25vcm1hbGl6ZWQka2V5ID0gbm9ybWFsaXplZFtrZXldLFxuICAgICAgICAgICAgcHJlZml4ID0gX25vcm1hbGl6ZWQka2V5LnByZWZpeCxcbiAgICAgICAgICAgIGljb25OYW1lID0gX25vcm1hbGl6ZWQka2V5Lmljb25OYW1lLFxuICAgICAgICAgICAgaWNvbiA9IF9ub3JtYWxpemVkJGtleS5pY29uO1xuICAgICAgICB2YXIgYWxpYXNlcyA9IGljb25bMl07XG4gICAgICAgIGlmICghYWRkaXRpb25zW3ByZWZpeF0pIGFkZGl0aW9uc1twcmVmaXhdID0ge307XG5cbiAgICAgICAgaWYgKGFsaWFzZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGFsaWFzZXMuZm9yRWFjaChmdW5jdGlvbiAoYWxpYXMpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYWxpYXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGFkZGl0aW9uc1twcmVmaXhdW2FsaWFzXSA9IGljb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBhZGRpdGlvbnNbcHJlZml4XVtpY29uTmFtZV0gPSBpY29uO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWRkaXRpb25zO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBMaWJyYXJ5O1xufSgpO1xuXG52YXIgX3BsdWdpbnMgPSBbXTtcbnZhciBfaG9va3MgPSB7fTtcbnZhciBwcm92aWRlcnMgPSB7fTtcbnZhciBkZWZhdWx0UHJvdmlkZXJLZXlzID0gT2JqZWN0LmtleXMocHJvdmlkZXJzKTtcbmZ1bmN0aW9uIHJlZ2lzdGVyUGx1Z2lucyhuZXh0UGx1Z2lucywgX3JlZikge1xuICB2YXIgb2JqID0gX3JlZi5taXhvdXRzVG87XG4gIF9wbHVnaW5zID0gbmV4dFBsdWdpbnM7XG4gIF9ob29rcyA9IHt9O1xuICBPYmplY3Qua2V5cyhwcm92aWRlcnMpLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICBpZiAoZGVmYXVsdFByb3ZpZGVyS2V5cy5pbmRleE9mKGspID09PSAtMSkge1xuICAgICAgZGVsZXRlIHByb3ZpZGVyc1trXTtcbiAgICB9XG4gIH0pO1xuXG4gIF9wbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikge1xuICAgIHZhciBtaXhvdXQgPSBwbHVnaW4ubWl4b3V0ID8gcGx1Z2luLm1peG91dCgpIDoge307XG4gICAgT2JqZWN0LmtleXMobWl4b3V0KS5mb3JFYWNoKGZ1bmN0aW9uICh0aykge1xuICAgICAgaWYgKHR5cGVvZiBtaXhvdXRbdGtdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG9ialt0a10gPSBtaXhvdXRbdGtdO1xuICAgICAgfVxuXG4gICAgICBpZiAoX3R5cGVvZihtaXhvdXRbdGtdKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgT2JqZWN0LmtleXMobWl4b3V0W3RrXSkuZm9yRWFjaChmdW5jdGlvbiAoc2spIHtcbiAgICAgICAgICBpZiAoIW9ialt0a10pIHtcbiAgICAgICAgICAgIG9ialt0a10gPSB7fTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBvYmpbdGtdW3NrXSA9IG1peG91dFt0a11bc2tdO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChwbHVnaW4uaG9va3MpIHtcbiAgICAgIHZhciBob29rcyA9IHBsdWdpbi5ob29rcygpO1xuICAgICAgT2JqZWN0LmtleXMoaG9va3MpLmZvckVhY2goZnVuY3Rpb24gKGhvb2spIHtcbiAgICAgICAgaWYgKCFfaG9va3NbaG9va10pIHtcbiAgICAgICAgICBfaG9va3NbaG9va10gPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9ob29rc1tob29rXS5wdXNoKGhvb2tzW2hvb2tdKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChwbHVnaW4ucHJvdmlkZXMpIHtcbiAgICAgIHBsdWdpbi5wcm92aWRlcyhwcm92aWRlcnMpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIG9iajtcbn1cbmZ1bmN0aW9uIGNoYWluSG9va3MoaG9vaywgYWNjdW11bGF0b3IpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDIgPyBfbGVuIC0gMiA6IDApLCBfa2V5ID0gMjsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDJdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIGhvb2tGbnMgPSBfaG9va3NbaG9va10gfHwgW107XG4gIGhvb2tGbnMuZm9yRWFjaChmdW5jdGlvbiAoaG9va0ZuKSB7XG4gICAgYWNjdW11bGF0b3IgPSBob29rRm4uYXBwbHkobnVsbCwgW2FjY3VtdWxhdG9yXS5jb25jYXQoYXJncykpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVzZWxlc3MtY2FsbFxuICB9KTtcbiAgcmV0dXJuIGFjY3VtdWxhdG9yO1xufVxuZnVuY3Rpb24gY2FsbEhvb2tzKGhvb2spIHtcbiAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yID4gMSA/IF9sZW4yIC0gMSA6IDApLCBfa2V5MiA9IDE7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICBhcmdzW19rZXkyIC0gMV0gPSBhcmd1bWVudHNbX2tleTJdO1xuICB9XG5cbiAgdmFyIGhvb2tGbnMgPSBfaG9va3NbaG9va10gfHwgW107XG4gIGhvb2tGbnMuZm9yRWFjaChmdW5jdGlvbiAoaG9va0ZuKSB7XG4gICAgaG9va0ZuLmFwcGx5KG51bGwsIGFyZ3MpO1xuICB9KTtcbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIGNhbGxQcm92aWRlZCgpIHtcbiAgdmFyIGhvb2sgPSBhcmd1bWVudHNbMF07XG4gIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgcmV0dXJuIHByb3ZpZGVyc1tob29rXSA/IHByb3ZpZGVyc1tob29rXS5hcHBseShudWxsLCBhcmdzKSA6IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gZmluZEljb25EZWZpbml0aW9uKGljb25Mb29rdXApIHtcbiAgaWYgKGljb25Mb29rdXAucHJlZml4ID09PSAnZmEnKSB7XG4gICAgaWNvbkxvb2t1cC5wcmVmaXggPSAnZmFzJztcbiAgfVxuXG4gIHZhciBpY29uTmFtZSA9IGljb25Mb29rdXAuaWNvbk5hbWU7XG4gIHZhciBwcmVmaXggPSBpY29uTG9va3VwLnByZWZpeCB8fCBnZXREZWZhdWx0VXNhYmxlUHJlZml4KCk7XG4gIGlmICghaWNvbk5hbWUpIHJldHVybjtcbiAgaWNvbk5hbWUgPSBieUFsaWFzKHByZWZpeCwgaWNvbk5hbWUpIHx8IGljb25OYW1lO1xuICByZXR1cm4gaWNvbkZyb21NYXBwaW5nKGxpYnJhcnkuZGVmaW5pdGlvbnMsIHByZWZpeCwgaWNvbk5hbWUpIHx8IGljb25Gcm9tTWFwcGluZyhuYW1lc3BhY2Uuc3R5bGVzLCBwcmVmaXgsIGljb25OYW1lKTtcbn1cbnZhciBsaWJyYXJ5ID0gbmV3IExpYnJhcnkoKTtcbnZhciBub0F1dG8gPSBmdW5jdGlvbiBub0F1dG8oKSB7XG4gIGNvbmZpZy5hdXRvUmVwbGFjZVN2ZyA9IGZhbHNlO1xuICBjb25maWcub2JzZXJ2ZU11dGF0aW9ucyA9IGZhbHNlO1xuICBjYWxsSG9va3MoJ25vQXV0bycpO1xufTtcbnZhciBkb20gPSB7XG4gIGkyc3ZnOiBmdW5jdGlvbiBpMnN2ZygpIHtcbiAgICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgIGlmIChJU19ET00pIHtcbiAgICAgIGNhbGxIb29rcygnYmVmb3JlSTJzdmcnLCBwYXJhbXMpO1xuICAgICAgY2FsbFByb3ZpZGVkKCdwc2V1ZG9FbGVtZW50czJzdmcnLCBwYXJhbXMpO1xuICAgICAgcmV0dXJuIGNhbGxQcm92aWRlZCgnaTJzdmcnLCBwYXJhbXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ09wZXJhdGlvbiByZXF1aXJlcyBhIERPTSBvZiBzb21lIGtpbmQuJyk7XG4gICAgfVxuICB9LFxuICB3YXRjaDogZnVuY3Rpb24gd2F0Y2goKSB7XG4gICAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgdmFyIGF1dG9SZXBsYWNlU3ZnUm9vdCA9IHBhcmFtcy5hdXRvUmVwbGFjZVN2Z1Jvb3Q7XG5cbiAgICBpZiAoY29uZmlnLmF1dG9SZXBsYWNlU3ZnID09PSBmYWxzZSkge1xuICAgICAgY29uZmlnLmF1dG9SZXBsYWNlU3ZnID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25maWcub2JzZXJ2ZU11dGF0aW9ucyA9IHRydWU7XG4gICAgZG9tcmVhZHkoZnVuY3Rpb24gKCkge1xuICAgICAgYXV0b1JlcGxhY2Uoe1xuICAgICAgICBhdXRvUmVwbGFjZVN2Z1Jvb3Q6IGF1dG9SZXBsYWNlU3ZnUm9vdFxuICAgICAgfSk7XG4gICAgICBjYWxsSG9va3MoJ3dhdGNoJywgcGFyYW1zKTtcbiAgICB9KTtcbiAgfVxufTtcbnZhciBwYXJzZSA9IHtcbiAgaWNvbjogZnVuY3Rpb24gaWNvbihfaWNvbikge1xuICAgIGlmIChfaWNvbiA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKF90eXBlb2YoX2ljb24pID09PSAnb2JqZWN0JyAmJiBfaWNvbi5wcmVmaXggJiYgX2ljb24uaWNvbk5hbWUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHByZWZpeDogX2ljb24ucHJlZml4LFxuICAgICAgICBpY29uTmFtZTogYnlBbGlhcyhfaWNvbi5wcmVmaXgsIF9pY29uLmljb25OYW1lKSB8fCBfaWNvbi5pY29uTmFtZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShfaWNvbikgJiYgX2ljb24ubGVuZ3RoID09PSAyKSB7XG4gICAgICB2YXIgaWNvbk5hbWUgPSBfaWNvblsxXS5pbmRleE9mKCdmYS0nKSA9PT0gMCA/IF9pY29uWzFdLnNsaWNlKDMpIDogX2ljb25bMV07XG4gICAgICB2YXIgcHJlZml4ID0gZ2V0Q2Fub25pY2FsUHJlZml4KF9pY29uWzBdKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHByZWZpeDogcHJlZml4LFxuICAgICAgICBpY29uTmFtZTogYnlBbGlhcyhwcmVmaXgsIGljb25OYW1lKSB8fCBpY29uTmFtZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIF9pY29uID09PSAnc3RyaW5nJyAmJiAoX2ljb24uaW5kZXhPZihcIlwiLmNvbmNhdChjb25maWcuY3NzUHJlZml4LCBcIi1cIikpID4gLTEgfHwgX2ljb24ubWF0Y2goSUNPTl9TRUxFQ1RJT05fU1lOVEFYX1BBVFRFUk4pKSkge1xuICAgICAgdmFyIGNhbm9uaWNhbEljb24gPSBnZXRDYW5vbmljYWxJY29uKF9pY29uLnNwbGl0KCcgJyksIHtcbiAgICAgICAgc2tpcExvb2t1cHM6IHRydWVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcHJlZml4OiBjYW5vbmljYWxJY29uLnByZWZpeCB8fCBnZXREZWZhdWx0VXNhYmxlUHJlZml4KCksXG4gICAgICAgIGljb25OYW1lOiBieUFsaWFzKGNhbm9uaWNhbEljb24ucHJlZml4LCBjYW5vbmljYWxJY29uLmljb25OYW1lKSB8fCBjYW5vbmljYWxJY29uLmljb25OYW1lXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgX2ljb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICB2YXIgX3ByZWZpeCA9IGdldERlZmF1bHRVc2FibGVQcmVmaXgoKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcHJlZml4OiBfcHJlZml4LFxuICAgICAgICBpY29uTmFtZTogYnlBbGlhcyhfcHJlZml4LCBfaWNvbikgfHwgX2ljb25cbiAgICAgIH07XG4gICAgfVxuICB9XG59O1xudmFyIGFwaSA9IHtcbiAgbm9BdXRvOiBub0F1dG8sXG4gIGNvbmZpZzogY29uZmlnLFxuICBkb206IGRvbSxcbiAgcGFyc2U6IHBhcnNlLFxuICBsaWJyYXJ5OiBsaWJyYXJ5LFxuICBmaW5kSWNvbkRlZmluaXRpb246IGZpbmRJY29uRGVmaW5pdGlvbixcbiAgdG9IdG1sOiB0b0h0bWxcbn07XG5cbnZhciBhdXRvUmVwbGFjZSA9IGZ1bmN0aW9uIGF1dG9SZXBsYWNlKCkge1xuICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIF9wYXJhbXMkYXV0b1JlcGxhY2VTdiA9IHBhcmFtcy5hdXRvUmVwbGFjZVN2Z1Jvb3QsXG4gICAgICBhdXRvUmVwbGFjZVN2Z1Jvb3QgPSBfcGFyYW1zJGF1dG9SZXBsYWNlU3YgPT09IHZvaWQgMCA/IERPQ1VNRU5UIDogX3BhcmFtcyRhdXRvUmVwbGFjZVN2O1xuICBpZiAoKE9iamVjdC5rZXlzKG5hbWVzcGFjZS5zdHlsZXMpLmxlbmd0aCA+IDAgfHwgY29uZmlnLmF1dG9GZXRjaFN2ZykgJiYgSVNfRE9NICYmIGNvbmZpZy5hdXRvUmVwbGFjZVN2ZykgYXBpLmRvbS5pMnN2Zyh7XG4gICAgbm9kZTogYXV0b1JlcGxhY2VTdmdSb290XG4gIH0pO1xufTtcblxuZnVuY3Rpb24gZG9tVmFyaWFudHModmFsLCBhYnN0cmFjdENyZWF0b3IpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHZhbCwgJ2Fic3RyYWN0Jywge1xuICAgIGdldDogYWJzdHJhY3RDcmVhdG9yXG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodmFsLCAnaHRtbCcsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB2YWwuYWJzdHJhY3QubWFwKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHJldHVybiB0b0h0bWwoYSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodmFsLCAnbm9kZScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIGlmICghSVNfRE9NKSByZXR1cm47XG4gICAgICB2YXIgY29udGFpbmVyID0gRE9DVU1FTlQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBjb250YWluZXIuaW5uZXJIVE1MID0gdmFsLmh0bWw7XG4gICAgICByZXR1cm4gY29udGFpbmVyLmNoaWxkcmVuO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiB2YWw7XG59XG5cbmZ1bmN0aW9uIGFzSWNvbiAoX3JlZikge1xuICB2YXIgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgbWFpbiA9IF9yZWYubWFpbixcbiAgICAgIG1hc2sgPSBfcmVmLm1hc2ssXG4gICAgICBhdHRyaWJ1dGVzID0gX3JlZi5hdHRyaWJ1dGVzLFxuICAgICAgc3R5bGVzID0gX3JlZi5zdHlsZXMsXG4gICAgICB0cmFuc2Zvcm0gPSBfcmVmLnRyYW5zZm9ybTtcblxuICBpZiAodHJhbnNmb3JtSXNNZWFuaW5nZnVsKHRyYW5zZm9ybSkgJiYgbWFpbi5mb3VuZCAmJiAhbWFzay5mb3VuZCkge1xuICAgIHZhciB3aWR0aCA9IG1haW4ud2lkdGgsXG4gICAgICAgIGhlaWdodCA9IG1haW4uaGVpZ2h0O1xuICAgIHZhciBvZmZzZXQgPSB7XG4gICAgICB4OiB3aWR0aCAvIGhlaWdodCAvIDIsXG4gICAgICB5OiAwLjVcbiAgICB9O1xuICAgIGF0dHJpYnV0ZXNbJ3N0eWxlJ10gPSBqb2luU3R5bGVzKF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBzdHlsZXMpLCB7fSwge1xuICAgICAgJ3RyYW5zZm9ybS1vcmlnaW4nOiBcIlwiLmNvbmNhdChvZmZzZXQueCArIHRyYW5zZm9ybS54IC8gMTYsIFwiZW0gXCIpLmNvbmNhdChvZmZzZXQueSArIHRyYW5zZm9ybS55IC8gMTYsIFwiZW1cIilcbiAgICB9KSk7XG4gIH1cblxuICByZXR1cm4gW3tcbiAgICB0YWc6ICdzdmcnLFxuICAgIGF0dHJpYnV0ZXM6IGF0dHJpYnV0ZXMsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gIH1dO1xufVxuXG5mdW5jdGlvbiBhc1N5bWJvbCAoX3JlZikge1xuICB2YXIgcHJlZml4ID0gX3JlZi5wcmVmaXgsXG4gICAgICBpY29uTmFtZSA9IF9yZWYuaWNvbk5hbWUsXG4gICAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW4sXG4gICAgICBhdHRyaWJ1dGVzID0gX3JlZi5hdHRyaWJ1dGVzLFxuICAgICAgc3ltYm9sID0gX3JlZi5zeW1ib2w7XG4gIHZhciBpZCA9IHN5bWJvbCA9PT0gdHJ1ZSA/IFwiXCIuY29uY2F0KHByZWZpeCwgXCItXCIpLmNvbmNhdChjb25maWcuY3NzUHJlZml4LCBcIi1cIikuY29uY2F0KGljb25OYW1lKSA6IHN5bWJvbDtcbiAgcmV0dXJuIFt7XG4gICAgdGFnOiAnc3ZnJyxcbiAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICBzdHlsZTogJ2Rpc3BsYXk6IG5vbmU7J1xuICAgIH0sXG4gICAgY2hpbGRyZW46IFt7XG4gICAgICB0YWc6ICdzeW1ib2wnLFxuICAgICAgYXR0cmlidXRlczogX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIGF0dHJpYnV0ZXMpLCB7fSwge1xuICAgICAgICBpZDogaWRcbiAgICAgIH0pLFxuICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgfV1cbiAgfV07XG59XG5cbmZ1bmN0aW9uIG1ha2VJbmxpbmVTdmdBYnN0cmFjdChwYXJhbXMpIHtcbiAgdmFyIF9wYXJhbXMkaWNvbnMgPSBwYXJhbXMuaWNvbnMsXG4gICAgICBtYWluID0gX3BhcmFtcyRpY29ucy5tYWluLFxuICAgICAgbWFzayA9IF9wYXJhbXMkaWNvbnMubWFzayxcbiAgICAgIHByZWZpeCA9IHBhcmFtcy5wcmVmaXgsXG4gICAgICBpY29uTmFtZSA9IHBhcmFtcy5pY29uTmFtZSxcbiAgICAgIHRyYW5zZm9ybSA9IHBhcmFtcy50cmFuc2Zvcm0sXG4gICAgICBzeW1ib2wgPSBwYXJhbXMuc3ltYm9sLFxuICAgICAgdGl0bGUgPSBwYXJhbXMudGl0bGUsXG4gICAgICBtYXNrSWQgPSBwYXJhbXMubWFza0lkLFxuICAgICAgdGl0bGVJZCA9IHBhcmFtcy50aXRsZUlkLFxuICAgICAgZXh0cmEgPSBwYXJhbXMuZXh0cmEsXG4gICAgICBfcGFyYW1zJHdhdGNoYWJsZSA9IHBhcmFtcy53YXRjaGFibGUsXG4gICAgICB3YXRjaGFibGUgPSBfcGFyYW1zJHdhdGNoYWJsZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcGFyYW1zJHdhdGNoYWJsZTtcblxuICB2YXIgX3JlZiA9IG1hc2suZm91bmQgPyBtYXNrIDogbWFpbixcbiAgICAgIHdpZHRoID0gX3JlZi53aWR0aCxcbiAgICAgIGhlaWdodCA9IF9yZWYuaGVpZ2h0O1xuXG4gIHZhciBpc1VwbG9hZGVkSWNvbiA9IHByZWZpeCA9PT0gJ2Zhayc7XG4gIHZhciBhdHRyQ2xhc3MgPSBbY29uZmlnLnJlcGxhY2VtZW50Q2xhc3MsIGljb25OYW1lID8gXCJcIi5jb25jYXQoY29uZmlnLmNzc1ByZWZpeCwgXCItXCIpLmNvbmNhdChpY29uTmFtZSkgOiAnJ10uZmlsdGVyKGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIGV4dHJhLmNsYXNzZXMuaW5kZXhPZihjKSA9PT0gLTE7XG4gIH0pLmZpbHRlcihmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiBjICE9PSAnJyB8fCAhIWM7XG4gIH0pLmNvbmNhdChleHRyYS5jbGFzc2VzKS5qb2luKCcgJyk7XG4gIHZhciBjb250ZW50ID0ge1xuICAgIGNoaWxkcmVuOiBbXSxcbiAgICBhdHRyaWJ1dGVzOiBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgZXh0cmEuYXR0cmlidXRlcyksIHt9LCB7XG4gICAgICAnZGF0YS1wcmVmaXgnOiBwcmVmaXgsXG4gICAgICAnZGF0YS1pY29uJzogaWNvbk5hbWUsXG4gICAgICAnY2xhc3MnOiBhdHRyQ2xhc3MsXG4gICAgICAncm9sZSc6IGV4dHJhLmF0dHJpYnV0ZXMucm9sZSB8fCAnaW1nJyxcbiAgICAgICd4bWxucyc6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsXG4gICAgICAndmlld0JveCc6IFwiMCAwIFwiLmNvbmNhdCh3aWR0aCwgXCIgXCIpLmNvbmNhdChoZWlnaHQpXG4gICAgfSlcbiAgfTtcbiAgdmFyIHVwbG9hZGVkSWNvbldpZHRoU3R5bGUgPSBpc1VwbG9hZGVkSWNvbiAmJiAhfmV4dHJhLmNsYXNzZXMuaW5kZXhPZignZmEtZncnKSA/IHtcbiAgICB3aWR0aDogXCJcIi5jb25jYXQod2lkdGggLyBoZWlnaHQgKiAxNiAqIDAuMDYyNSwgXCJlbVwiKVxuICB9IDoge307XG5cbiAgaWYgKHdhdGNoYWJsZSkge1xuICAgIGNvbnRlbnQuYXR0cmlidXRlc1tEQVRBX0ZBX0kyU1ZHXSA9ICcnO1xuICB9XG5cbiAgaWYgKHRpdGxlKSB7XG4gICAgY29udGVudC5jaGlsZHJlbi5wdXNoKHtcbiAgICAgIHRhZzogJ3RpdGxlJyxcbiAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgaWQ6IGNvbnRlbnQuYXR0cmlidXRlc1snYXJpYS1sYWJlbGxlZGJ5J10gfHwgXCJ0aXRsZS1cIi5jb25jYXQodGl0bGVJZCB8fCBuZXh0VW5pcXVlSWQoKSlcbiAgICAgIH0sXG4gICAgICBjaGlsZHJlbjogW3RpdGxlXVxuICAgIH0pO1xuICAgIGRlbGV0ZSBjb250ZW50LmF0dHJpYnV0ZXMudGl0bGU7XG4gIH1cblxuICB2YXIgYXJncyA9IF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBjb250ZW50KSwge30sIHtcbiAgICBwcmVmaXg6IHByZWZpeCxcbiAgICBpY29uTmFtZTogaWNvbk5hbWUsXG4gICAgbWFpbjogbWFpbixcbiAgICBtYXNrOiBtYXNrLFxuICAgIG1hc2tJZDogbWFza0lkLFxuICAgIHRyYW5zZm9ybTogdHJhbnNmb3JtLFxuICAgIHN5bWJvbDogc3ltYm9sLFxuICAgIHN0eWxlczogX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIHVwbG9hZGVkSWNvbldpZHRoU3R5bGUpLCBleHRyYS5zdHlsZXMpXG4gIH0pO1xuXG4gIHZhciBfcmVmMiA9IG1hc2suZm91bmQgJiYgbWFpbi5mb3VuZCA/IGNhbGxQcm92aWRlZCgnZ2VuZXJhdGVBYnN0cmFjdE1hc2snLCBhcmdzKSB8fCB7XG4gICAgY2hpbGRyZW46IFtdLFxuICAgIGF0dHJpYnV0ZXM6IHt9XG4gIH0gOiBjYWxsUHJvdmlkZWQoJ2dlbmVyYXRlQWJzdHJhY3RJY29uJywgYXJncykgfHwge1xuICAgIGNoaWxkcmVuOiBbXSxcbiAgICBhdHRyaWJ1dGVzOiB7fVxuICB9LFxuICAgICAgY2hpbGRyZW4gPSBfcmVmMi5jaGlsZHJlbixcbiAgICAgIGF0dHJpYnV0ZXMgPSBfcmVmMi5hdHRyaWJ1dGVzO1xuXG4gIGFyZ3MuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgYXJncy5hdHRyaWJ1dGVzID0gYXR0cmlidXRlcztcblxuICBpZiAoc3ltYm9sKSB7XG4gICAgcmV0dXJuIGFzU3ltYm9sKGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBhc0ljb24oYXJncyk7XG4gIH1cbn1cbmZ1bmN0aW9uIG1ha2VMYXllcnNUZXh0QWJzdHJhY3QocGFyYW1zKSB7XG4gIHZhciBjb250ZW50ID0gcGFyYW1zLmNvbnRlbnQsXG4gICAgICB3aWR0aCA9IHBhcmFtcy53aWR0aCxcbiAgICAgIGhlaWdodCA9IHBhcmFtcy5oZWlnaHQsXG4gICAgICB0cmFuc2Zvcm0gPSBwYXJhbXMudHJhbnNmb3JtLFxuICAgICAgdGl0bGUgPSBwYXJhbXMudGl0bGUsXG4gICAgICBleHRyYSA9IHBhcmFtcy5leHRyYSxcbiAgICAgIF9wYXJhbXMkd2F0Y2hhYmxlMiA9IHBhcmFtcy53YXRjaGFibGUsXG4gICAgICB3YXRjaGFibGUgPSBfcGFyYW1zJHdhdGNoYWJsZTIgPT09IHZvaWQgMCA/IGZhbHNlIDogX3BhcmFtcyR3YXRjaGFibGUyO1xuXG4gIHZhciBhdHRyaWJ1dGVzID0gX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIGV4dHJhLmF0dHJpYnV0ZXMpLCB0aXRsZSA/IHtcbiAgICAndGl0bGUnOiB0aXRsZVxuICB9IDoge30pLCB7fSwge1xuICAgICdjbGFzcyc6IGV4dHJhLmNsYXNzZXMuam9pbignICcpXG4gIH0pO1xuXG4gIGlmICh3YXRjaGFibGUpIHtcbiAgICBhdHRyaWJ1dGVzW0RBVEFfRkFfSTJTVkddID0gJyc7XG4gIH1cblxuICB2YXIgc3R5bGVzID0gX29iamVjdFNwcmVhZDIoe30sIGV4dHJhLnN0eWxlcyk7XG5cbiAgaWYgKHRyYW5zZm9ybUlzTWVhbmluZ2Z1bCh0cmFuc2Zvcm0pKSB7XG4gICAgc3R5bGVzWyd0cmFuc2Zvcm0nXSA9IHRyYW5zZm9ybUZvckNzcyh7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zZm9ybSxcbiAgICAgIHN0YXJ0Q2VudGVyZWQ6IHRydWUsXG4gICAgICB3aWR0aDogd2lkdGgsXG4gICAgICBoZWlnaHQ6IGhlaWdodFxuICAgIH0pO1xuICAgIHN0eWxlc1snLXdlYmtpdC10cmFuc2Zvcm0nXSA9IHN0eWxlc1sndHJhbnNmb3JtJ107XG4gIH1cblxuICB2YXIgc3R5bGVTdHJpbmcgPSBqb2luU3R5bGVzKHN0eWxlcyk7XG5cbiAgaWYgKHN0eWxlU3RyaW5nLmxlbmd0aCA+IDApIHtcbiAgICBhdHRyaWJ1dGVzWydzdHlsZSddID0gc3R5bGVTdHJpbmc7XG4gIH1cblxuICB2YXIgdmFsID0gW107XG4gIHZhbC5wdXNoKHtcbiAgICB0YWc6ICdzcGFuJyxcbiAgICBhdHRyaWJ1dGVzOiBhdHRyaWJ1dGVzLFxuICAgIGNoaWxkcmVuOiBbY29udGVudF1cbiAgfSk7XG5cbiAgaWYgKHRpdGxlKSB7XG4gICAgdmFsLnB1c2goe1xuICAgICAgdGFnOiAnc3BhbicsXG4gICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgIGNsYXNzOiAnc3Itb25seSdcbiAgICAgIH0sXG4gICAgICBjaGlsZHJlbjogW3RpdGxlXVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHZhbDtcbn1cbmZ1bmN0aW9uIG1ha2VMYXllcnNDb3VudGVyQWJzdHJhY3QocGFyYW1zKSB7XG4gIHZhciBjb250ZW50ID0gcGFyYW1zLmNvbnRlbnQsXG4gICAgICB0aXRsZSA9IHBhcmFtcy50aXRsZSxcbiAgICAgIGV4dHJhID0gcGFyYW1zLmV4dHJhO1xuXG4gIHZhciBhdHRyaWJ1dGVzID0gX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIGV4dHJhLmF0dHJpYnV0ZXMpLCB0aXRsZSA/IHtcbiAgICAndGl0bGUnOiB0aXRsZVxuICB9IDoge30pLCB7fSwge1xuICAgICdjbGFzcyc6IGV4dHJhLmNsYXNzZXMuam9pbignICcpXG4gIH0pO1xuXG4gIHZhciBzdHlsZVN0cmluZyA9IGpvaW5TdHlsZXMoZXh0cmEuc3R5bGVzKTtcblxuICBpZiAoc3R5bGVTdHJpbmcubGVuZ3RoID4gMCkge1xuICAgIGF0dHJpYnV0ZXNbJ3N0eWxlJ10gPSBzdHlsZVN0cmluZztcbiAgfVxuXG4gIHZhciB2YWwgPSBbXTtcbiAgdmFsLnB1c2goe1xuICAgIHRhZzogJ3NwYW4nLFxuICAgIGF0dHJpYnV0ZXM6IGF0dHJpYnV0ZXMsXG4gICAgY2hpbGRyZW46IFtjb250ZW50XVxuICB9KTtcblxuICBpZiAodGl0bGUpIHtcbiAgICB2YWwucHVzaCh7XG4gICAgICB0YWc6ICdzcGFuJyxcbiAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgY2xhc3M6ICdzci1vbmx5J1xuICAgICAgfSxcbiAgICAgIGNoaWxkcmVuOiBbdGl0bGVdXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gdmFsO1xufVxuXG52YXIgc3R5bGVzJDEgPSBuYW1lc3BhY2Uuc3R5bGVzO1xuZnVuY3Rpb24gYXNGb3VuZEljb24oaWNvbikge1xuICB2YXIgd2lkdGggPSBpY29uWzBdO1xuICB2YXIgaGVpZ2h0ID0gaWNvblsxXTtcblxuICB2YXIgX2ljb24kc2xpY2UgPSBpY29uLnNsaWNlKDQpLFxuICAgICAgX2ljb24kc2xpY2UyID0gX3NsaWNlZFRvQXJyYXkoX2ljb24kc2xpY2UsIDEpLFxuICAgICAgdmVjdG9yRGF0YSA9IF9pY29uJHNsaWNlMlswXTtcblxuICB2YXIgZWxlbWVudCA9IG51bGw7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmVjdG9yRGF0YSkpIHtcbiAgICBlbGVtZW50ID0ge1xuICAgICAgdGFnOiAnZycsXG4gICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgIGNsYXNzOiBcIlwiLmNvbmNhdChjb25maWcuY3NzUHJlZml4LCBcIi1cIikuY29uY2F0KERVT1RPTkVfQ0xBU1NFUy5HUk9VUClcbiAgICAgIH0sXG4gICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgdGFnOiAncGF0aCcsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICBjbGFzczogXCJcIi5jb25jYXQoY29uZmlnLmNzc1ByZWZpeCwgXCItXCIpLmNvbmNhdChEVU9UT05FX0NMQVNTRVMuU0VDT05EQVJZKSxcbiAgICAgICAgICBmaWxsOiAnY3VycmVudENvbG9yJyxcbiAgICAgICAgICBkOiB2ZWN0b3JEYXRhWzBdXG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgdGFnOiAncGF0aCcsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICBjbGFzczogXCJcIi5jb25jYXQoY29uZmlnLmNzc1ByZWZpeCwgXCItXCIpLmNvbmNhdChEVU9UT05FX0NMQVNTRVMuUFJJTUFSWSksXG4gICAgICAgICAgZmlsbDogJ2N1cnJlbnRDb2xvcicsXG4gICAgICAgICAgZDogdmVjdG9yRGF0YVsxXVxuICAgICAgICB9XG4gICAgICB9XVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgZWxlbWVudCA9IHtcbiAgICAgIHRhZzogJ3BhdGgnLFxuICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICBmaWxsOiAnY3VycmVudENvbG9yJyxcbiAgICAgICAgZDogdmVjdG9yRGF0YVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZvdW5kOiB0cnVlLFxuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICBpY29uOiBlbGVtZW50XG4gIH07XG59XG52YXIgbWlzc2luZ0ljb25SZXNvbHV0aW9uTWl4aW4gPSB7XG4gIGZvdW5kOiBmYWxzZSxcbiAgd2lkdGg6IDUxMixcbiAgaGVpZ2h0OiA1MTJcbn07XG5cbmZ1bmN0aW9uIG1heWJlTm90aWZ5TWlzc2luZyhpY29uTmFtZSwgcHJlZml4KSB7XG4gIGlmICghUFJPRFVDVElPTiAmJiAhY29uZmlnLnNob3dNaXNzaW5nSWNvbnMgJiYgaWNvbk5hbWUpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiSWNvbiB3aXRoIG5hbWUgXFxcIlwiLmNvbmNhdChpY29uTmFtZSwgXCJcXFwiIGFuZCBwcmVmaXggXFxcIlwiKS5jb25jYXQocHJlZml4LCBcIlxcXCIgaXMgbWlzc2luZy5cIikpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRJY29uKGljb25OYW1lLCBwcmVmaXgpIHtcbiAgdmFyIGdpdmVuUHJlZml4ID0gcHJlZml4O1xuXG4gIGlmIChwcmVmaXggPT09ICdmYScgJiYgY29uZmlnLnN0eWxlRGVmYXVsdCAhPT0gbnVsbCkge1xuICAgIHByZWZpeCA9IGdldERlZmF1bHRVc2FibGVQcmVmaXgoKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHZhbCA9IHtcbiAgICAgIGZvdW5kOiBmYWxzZSxcbiAgICAgIHdpZHRoOiA1MTIsXG4gICAgICBoZWlnaHQ6IDUxMixcbiAgICAgIGljb246IGNhbGxQcm92aWRlZCgnbWlzc2luZ0ljb25BYnN0cmFjdCcpIHx8IHt9XG4gICAgfTtcblxuICAgIGlmIChnaXZlblByZWZpeCA9PT0gJ2ZhJykge1xuICAgICAgdmFyIHNoaW0gPSBieU9sZE5hbWUoaWNvbk5hbWUpIHx8IHt9O1xuICAgICAgaWNvbk5hbWUgPSBzaGltLmljb25OYW1lIHx8IGljb25OYW1lO1xuICAgICAgcHJlZml4ID0gc2hpbS5wcmVmaXggfHwgcHJlZml4O1xuICAgIH1cblxuICAgIGlmIChpY29uTmFtZSAmJiBwcmVmaXggJiYgc3R5bGVzJDFbcHJlZml4XSAmJiBzdHlsZXMkMVtwcmVmaXhdW2ljb25OYW1lXSkge1xuICAgICAgdmFyIGljb24gPSBzdHlsZXMkMVtwcmVmaXhdW2ljb25OYW1lXTtcbiAgICAgIHJldHVybiByZXNvbHZlKGFzRm91bmRJY29uKGljb24pKTtcbiAgICB9XG5cbiAgICBtYXliZU5vdGlmeU1pc3NpbmcoaWNvbk5hbWUsIHByZWZpeCk7XG4gICAgcmVzb2x2ZShfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgbWlzc2luZ0ljb25SZXNvbHV0aW9uTWl4aW4pLCB7fSwge1xuICAgICAgaWNvbjogY29uZmlnLnNob3dNaXNzaW5nSWNvbnMgJiYgaWNvbk5hbWUgPyBjYWxsUHJvdmlkZWQoJ21pc3NpbmdJY29uQWJzdHJhY3QnKSB8fCB7fSA6IHt9XG4gICAgfSkpO1xuICB9KTtcbn1cblxudmFyIG5vb3AkMSA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcblxudmFyIHAgPSBjb25maWcubWVhc3VyZVBlcmZvcm1hbmNlICYmIFBFUkZPUk1BTkNFICYmIFBFUkZPUk1BTkNFLm1hcmsgJiYgUEVSRk9STUFOQ0UubWVhc3VyZSA/IFBFUkZPUk1BTkNFIDoge1xuICBtYXJrOiBub29wJDEsXG4gIG1lYXN1cmU6IG5vb3AkMVxufTtcbnZhciBwcmVhbWJsZSA9IFwiRkEgXFxcIjYuNC4yXFxcIlwiO1xuXG52YXIgYmVnaW4gPSBmdW5jdGlvbiBiZWdpbihuYW1lKSB7XG4gIHAubWFyayhcIlwiLmNvbmNhdChwcmVhbWJsZSwgXCIgXCIpLmNvbmNhdChuYW1lLCBcIiBiZWdpbnNcIikpO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBlbmQobmFtZSk7XG4gIH07XG59O1xuXG52YXIgZW5kID0gZnVuY3Rpb24gZW5kKG5hbWUpIHtcbiAgcC5tYXJrKFwiXCIuY29uY2F0KHByZWFtYmxlLCBcIiBcIikuY29uY2F0KG5hbWUsIFwiIGVuZHNcIikpO1xuICBwLm1lYXN1cmUoXCJcIi5jb25jYXQocHJlYW1ibGUsIFwiIFwiKS5jb25jYXQobmFtZSksIFwiXCIuY29uY2F0KHByZWFtYmxlLCBcIiBcIikuY29uY2F0KG5hbWUsIFwiIGJlZ2luc1wiKSwgXCJcIi5jb25jYXQocHJlYW1ibGUsIFwiIFwiKS5jb25jYXQobmFtZSwgXCIgZW5kc1wiKSk7XG59O1xuXG52YXIgcGVyZiA9IHtcbiAgYmVnaW46IGJlZ2luLFxuICBlbmQ6IGVuZFxufTtcblxudmFyIG5vb3AkMiA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcblxuZnVuY3Rpb24gaXNXYXRjaGVkKG5vZGUpIHtcbiAgdmFyIGkyc3ZnID0gbm9kZS5nZXRBdHRyaWJ1dGUgPyBub2RlLmdldEF0dHJpYnV0ZShEQVRBX0ZBX0kyU1ZHKSA6IG51bGw7XG4gIHJldHVybiB0eXBlb2YgaTJzdmcgPT09ICdzdHJpbmcnO1xufVxuXG5mdW5jdGlvbiBoYXNQcmVmaXhBbmRJY29uKG5vZGUpIHtcbiAgdmFyIHByZWZpeCA9IG5vZGUuZ2V0QXR0cmlidXRlID8gbm9kZS5nZXRBdHRyaWJ1dGUoREFUQV9QUkVGSVgpIDogbnVsbDtcbiAgdmFyIGljb24gPSBub2RlLmdldEF0dHJpYnV0ZSA/IG5vZGUuZ2V0QXR0cmlidXRlKERBVEFfSUNPTikgOiBudWxsO1xuICByZXR1cm4gcHJlZml4ICYmIGljb247XG59XG5cbmZ1bmN0aW9uIGhhc0JlZW5SZXBsYWNlZChub2RlKSB7XG4gIHJldHVybiBub2RlICYmIG5vZGUuY2xhc3NMaXN0ICYmIG5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zICYmIG5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKGNvbmZpZy5yZXBsYWNlbWVudENsYXNzKTtcbn1cblxuZnVuY3Rpb24gZ2V0TXV0YXRvcigpIHtcbiAgaWYgKGNvbmZpZy5hdXRvUmVwbGFjZVN2ZyA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiBtdXRhdG9ycy5yZXBsYWNlO1xuICB9XG5cbiAgdmFyIG11dGF0b3IgPSBtdXRhdG9yc1tjb25maWcuYXV0b1JlcGxhY2VTdmddO1xuICByZXR1cm4gbXV0YXRvciB8fCBtdXRhdG9ycy5yZXBsYWNlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50TlModGFnKSB7XG4gIHJldHVybiBET0NVTUVOVC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgdGFnKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCh0YWcpIHtcbiAgcmV0dXJuIERPQ1VNRU5ULmNyZWF0ZUVsZW1lbnQodGFnKTtcbn1cblxuZnVuY3Rpb24gY29udmVydFNWRyhhYnN0cmFjdE9iaikge1xuICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgdmFyIF9wYXJhbXMkY2VGbiA9IHBhcmFtcy5jZUZuLFxuICAgICAgY2VGbiA9IF9wYXJhbXMkY2VGbiA9PT0gdm9pZCAwID8gYWJzdHJhY3RPYmoudGFnID09PSAnc3ZnJyA/IGNyZWF0ZUVsZW1lbnROUyA6IGNyZWF0ZUVsZW1lbnQgOiBfcGFyYW1zJGNlRm47XG5cbiAgaWYgKHR5cGVvZiBhYnN0cmFjdE9iaiA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gRE9DVU1FTlQuY3JlYXRlVGV4dE5vZGUoYWJzdHJhY3RPYmopO1xuICB9XG5cbiAgdmFyIHRhZyA9IGNlRm4oYWJzdHJhY3RPYmoudGFnKTtcbiAgT2JqZWN0LmtleXMoYWJzdHJhY3RPYmouYXR0cmlidXRlcyB8fCBbXSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdGFnLnNldEF0dHJpYnV0ZShrZXksIGFic3RyYWN0T2JqLmF0dHJpYnV0ZXNba2V5XSk7XG4gIH0pO1xuICB2YXIgY2hpbGRyZW4gPSBhYnN0cmFjdE9iai5jaGlsZHJlbiB8fCBbXTtcbiAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICB0YWcuYXBwZW5kQ2hpbGQoY29udmVydFNWRyhjaGlsZCwge1xuICAgICAgY2VGbjogY2VGblxuICAgIH0pKTtcbiAgfSk7XG4gIHJldHVybiB0YWc7XG59XG5cbmZ1bmN0aW9uIG5vZGVBc0NvbW1lbnQobm9kZSkge1xuICB2YXIgY29tbWVudCA9IFwiIFwiLmNvbmNhdChub2RlLm91dGVySFRNTCwgXCIgXCIpO1xuICAvKiBCRUdJTi5BVFRSSUJVVElPTiAqL1xuXG4gIGNvbW1lbnQgPSBcIlwiLmNvbmNhdChjb21tZW50LCBcIkZvbnQgQXdlc29tZSBmb250YXdlc29tZS5jb20gXCIpO1xuICAvKiBFTkQuQVRUUklCVVRJT04gKi9cblxuICByZXR1cm4gY29tbWVudDtcbn1cblxudmFyIG11dGF0b3JzID0ge1xuICByZXBsYWNlOiBmdW5jdGlvbiByZXBsYWNlKG11dGF0aW9uKSB7XG4gICAgdmFyIG5vZGUgPSBtdXRhdGlvblswXTtcblxuICAgIGlmIChub2RlLnBhcmVudE5vZGUpIHtcbiAgICAgIG11dGF0aW9uWzFdLmZvckVhY2goZnVuY3Rpb24gKF9hYnN0cmFjdCkge1xuICAgICAgICBub2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGNvbnZlcnRTVkcoX2Fic3RyYWN0KSwgbm9kZSk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKG5vZGUuZ2V0QXR0cmlidXRlKERBVEFfRkFfSTJTVkcpID09PSBudWxsICYmIGNvbmZpZy5rZWVwT3JpZ2luYWxTb3VyY2UpIHtcbiAgICAgICAgdmFyIGNvbW1lbnQgPSBET0NVTUVOVC5jcmVhdGVDb21tZW50KG5vZGVBc0NvbW1lbnQobm9kZSkpO1xuICAgICAgICBub2RlLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKGNvbW1lbnQsIG5vZGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZS5yZW1vdmUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIG5lc3Q6IGZ1bmN0aW9uIG5lc3QobXV0YXRpb24pIHtcbiAgICB2YXIgbm9kZSA9IG11dGF0aW9uWzBdO1xuICAgIHZhciBfYWJzdHJhY3QyID0gbXV0YXRpb25bMV07IC8vIElmIHdlIGFscmVhZHkgaGF2ZSBhIHJlcGxhY2VkIG5vZGUgd2UgZG8gbm90IHdhbnQgdG8gY29udGludWUgbmVzdGluZyB3aXRoaW4gaXQuXG4gICAgLy8gU2hvcnQtY2lyY3VpdCB0byB0aGUgc3RhbmRhcmQgcmVwbGFjZW1lbnRcblxuICAgIGlmICh+Y2xhc3NBcnJheShub2RlKS5pbmRleE9mKGNvbmZpZy5yZXBsYWNlbWVudENsYXNzKSkge1xuICAgICAgcmV0dXJuIG11dGF0b3JzLnJlcGxhY2UobXV0YXRpb24pO1xuICAgIH1cblxuICAgIHZhciBmb3JTdmcgPSBuZXcgUmVnRXhwKFwiXCIuY29uY2F0KGNvbmZpZy5jc3NQcmVmaXgsIFwiLS4qXCIpKTtcbiAgICBkZWxldGUgX2Fic3RyYWN0MlswXS5hdHRyaWJ1dGVzLmlkO1xuXG4gICAgaWYgKF9hYnN0cmFjdDJbMF0uYXR0cmlidXRlcy5jbGFzcykge1xuICAgICAgdmFyIHNwbGl0Q2xhc3NlcyA9IF9hYnN0cmFjdDJbMF0uYXR0cmlidXRlcy5jbGFzcy5zcGxpdCgnICcpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBjbHMpIHtcbiAgICAgICAgaWYgKGNscyA9PT0gY29uZmlnLnJlcGxhY2VtZW50Q2xhc3MgfHwgY2xzLm1hdGNoKGZvclN2ZykpIHtcbiAgICAgICAgICBhY2MudG9TdmcucHVzaChjbHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFjYy50b05vZGUucHVzaChjbHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH0sIHtcbiAgICAgICAgdG9Ob2RlOiBbXSxcbiAgICAgICAgdG9Tdmc6IFtdXG4gICAgICB9KTtcblxuICAgICAgX2Fic3RyYWN0MlswXS5hdHRyaWJ1dGVzLmNsYXNzID0gc3BsaXRDbGFzc2VzLnRvU3ZnLmpvaW4oJyAnKTtcblxuICAgICAgaWYgKHNwbGl0Q2xhc3Nlcy50b05vZGUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgc3BsaXRDbGFzc2VzLnRvTm9kZS5qb2luKCcgJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBuZXdJbm5lckhUTUwgPSBfYWJzdHJhY3QyLm1hcChmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIHRvSHRtbChhKTtcbiAgICB9KS5qb2luKCdcXG4nKTtcblxuICAgIG5vZGUuc2V0QXR0cmlidXRlKERBVEFfRkFfSTJTVkcsICcnKTtcbiAgICBub2RlLmlubmVySFRNTCA9IG5ld0lubmVySFRNTDtcbiAgfVxufTtcblxuZnVuY3Rpb24gcGVyZm9ybU9wZXJhdGlvblN5bmMob3ApIHtcbiAgb3AoKTtcbn1cblxuZnVuY3Rpb24gcGVyZm9ybShtdXRhdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHZhciBjYWxsYmFja0Z1bmN0aW9uID0gdHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nID8gY2FsbGJhY2sgOiBub29wJDI7XG5cbiAgaWYgKG11dGF0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICBjYWxsYmFja0Z1bmN0aW9uKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGZyYW1lID0gcGVyZm9ybU9wZXJhdGlvblN5bmM7XG5cbiAgICBpZiAoY29uZmlnLm11dGF0ZUFwcHJvYWNoID09PSBNVVRBVElPTl9BUFBST0FDSF9BU1lOQykge1xuICAgICAgZnJhbWUgPSBXSU5ET1cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IHBlcmZvcm1PcGVyYXRpb25TeW5jO1xuICAgIH1cblxuICAgIGZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBtdXRhdG9yID0gZ2V0TXV0YXRvcigpO1xuICAgICAgdmFyIG1hcmsgPSBwZXJmLmJlZ2luKCdtdXRhdGUnKTtcbiAgICAgIG11dGF0aW9ucy5tYXAobXV0YXRvcik7XG4gICAgICBtYXJrKCk7XG4gICAgICBjYWxsYmFja0Z1bmN0aW9uKCk7XG4gICAgfSk7XG4gIH1cbn1cbnZhciBkaXNhYmxlZCA9IGZhbHNlO1xuZnVuY3Rpb24gZGlzYWJsZU9ic2VydmF0aW9uKCkge1xuICBkaXNhYmxlZCA9IHRydWU7XG59XG5mdW5jdGlvbiBlbmFibGVPYnNlcnZhdGlvbigpIHtcbiAgZGlzYWJsZWQgPSBmYWxzZTtcbn1cbnZhciBtbyA9IG51bGw7XG5mdW5jdGlvbiBvYnNlcnZlKG9wdGlvbnMpIHtcbiAgaWYgKCFNVVRBVElPTl9PQlNFUlZFUikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghY29uZmlnLm9ic2VydmVNdXRhdGlvbnMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgX29wdGlvbnMkdHJlZUNhbGxiYWNrID0gb3B0aW9ucy50cmVlQ2FsbGJhY2ssXG4gICAgICB0cmVlQ2FsbGJhY2sgPSBfb3B0aW9ucyR0cmVlQ2FsbGJhY2sgPT09IHZvaWQgMCA/IG5vb3AkMiA6IF9vcHRpb25zJHRyZWVDYWxsYmFjayxcbiAgICAgIF9vcHRpb25zJG5vZGVDYWxsYmFjayA9IG9wdGlvbnMubm9kZUNhbGxiYWNrLFxuICAgICAgbm9kZUNhbGxiYWNrID0gX29wdGlvbnMkbm9kZUNhbGxiYWNrID09PSB2b2lkIDAgPyBub29wJDIgOiBfb3B0aW9ucyRub2RlQ2FsbGJhY2ssXG4gICAgICBfb3B0aW9ucyRwc2V1ZG9FbGVtZW4gPSBvcHRpb25zLnBzZXVkb0VsZW1lbnRzQ2FsbGJhY2ssXG4gICAgICBwc2V1ZG9FbGVtZW50c0NhbGxiYWNrID0gX29wdGlvbnMkcHNldWRvRWxlbWVuID09PSB2b2lkIDAgPyBub29wJDIgOiBfb3B0aW9ucyRwc2V1ZG9FbGVtZW4sXG4gICAgICBfb3B0aW9ucyRvYnNlcnZlTXV0YXQgPSBvcHRpb25zLm9ic2VydmVNdXRhdGlvbnNSb290LFxuICAgICAgb2JzZXJ2ZU11dGF0aW9uc1Jvb3QgPSBfb3B0aW9ucyRvYnNlcnZlTXV0YXQgPT09IHZvaWQgMCA/IERPQ1VNRU5UIDogX29wdGlvbnMkb2JzZXJ2ZU11dGF0O1xuICBtbyA9IG5ldyBNVVRBVElPTl9PQlNFUlZFUihmdW5jdGlvbiAob2JqZWN0cykge1xuICAgIGlmIChkaXNhYmxlZCkgcmV0dXJuO1xuICAgIHZhciBkZWZhdWx0UHJlZml4ID0gZ2V0RGVmYXVsdFVzYWJsZVByZWZpeCgpO1xuICAgIHRvQXJyYXkob2JqZWN0cykuZm9yRWFjaChmdW5jdGlvbiAobXV0YXRpb25SZWNvcmQpIHtcbiAgICAgIGlmIChtdXRhdGlvblJlY29yZC50eXBlID09PSAnY2hpbGRMaXN0JyAmJiBtdXRhdGlvblJlY29yZC5hZGRlZE5vZGVzLmxlbmd0aCA+IDAgJiYgIWlzV2F0Y2hlZChtdXRhdGlvblJlY29yZC5hZGRlZE5vZGVzWzBdKSkge1xuICAgICAgICBpZiAoY29uZmlnLnNlYXJjaFBzZXVkb0VsZW1lbnRzKSB7XG4gICAgICAgICAgcHNldWRvRWxlbWVudHNDYWxsYmFjayhtdXRhdGlvblJlY29yZC50YXJnZXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJlZUNhbGxiYWNrKG11dGF0aW9uUmVjb3JkLnRhcmdldCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChtdXRhdGlvblJlY29yZC50eXBlID09PSAnYXR0cmlidXRlcycgJiYgbXV0YXRpb25SZWNvcmQudGFyZ2V0LnBhcmVudE5vZGUgJiYgY29uZmlnLnNlYXJjaFBzZXVkb0VsZW1lbnRzKSB7XG4gICAgICAgIHBzZXVkb0VsZW1lbnRzQ2FsbGJhY2sobXV0YXRpb25SZWNvcmQudGFyZ2V0LnBhcmVudE5vZGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAobXV0YXRpb25SZWNvcmQudHlwZSA9PT0gJ2F0dHJpYnV0ZXMnICYmIGlzV2F0Y2hlZChtdXRhdGlvblJlY29yZC50YXJnZXQpICYmIH5BVFRSSUJVVEVTX1dBVENIRURfRk9SX01VVEFUSU9OLmluZGV4T2YobXV0YXRpb25SZWNvcmQuYXR0cmlidXRlTmFtZSkpIHtcbiAgICAgICAgaWYgKG11dGF0aW9uUmVjb3JkLmF0dHJpYnV0ZU5hbWUgPT09ICdjbGFzcycgJiYgaGFzUHJlZml4QW5kSWNvbihtdXRhdGlvblJlY29yZC50YXJnZXQpKSB7XG4gICAgICAgICAgdmFyIF9nZXRDYW5vbmljYWxJY29uID0gZ2V0Q2Fub25pY2FsSWNvbihjbGFzc0FycmF5KG11dGF0aW9uUmVjb3JkLnRhcmdldCkpLFxuICAgICAgICAgICAgICBwcmVmaXggPSBfZ2V0Q2Fub25pY2FsSWNvbi5wcmVmaXgsXG4gICAgICAgICAgICAgIGljb25OYW1lID0gX2dldENhbm9uaWNhbEljb24uaWNvbk5hbWU7XG5cbiAgICAgICAgICBtdXRhdGlvblJlY29yZC50YXJnZXQuc2V0QXR0cmlidXRlKERBVEFfUFJFRklYLCBwcmVmaXggfHwgZGVmYXVsdFByZWZpeCk7XG4gICAgICAgICAgaWYgKGljb25OYW1lKSBtdXRhdGlvblJlY29yZC50YXJnZXQuc2V0QXR0cmlidXRlKERBVEFfSUNPTiwgaWNvbk5hbWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGhhc0JlZW5SZXBsYWNlZChtdXRhdGlvblJlY29yZC50YXJnZXQpKSB7XG4gICAgICAgICAgbm9kZUNhbGxiYWNrKG11dGF0aW9uUmVjb3JkLnRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIGlmICghSVNfRE9NKSByZXR1cm47XG4gIG1vLm9ic2VydmUob2JzZXJ2ZU11dGF0aW9uc1Jvb3QsIHtcbiAgICBjaGlsZExpc3Q6IHRydWUsXG4gICAgYXR0cmlidXRlczogdHJ1ZSxcbiAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlLFxuICAgIHN1YnRyZWU6IHRydWVcbiAgfSk7XG59XG5mdW5jdGlvbiBkaXNjb25uZWN0KCkge1xuICBpZiAoIW1vKSByZXR1cm47XG4gIG1vLmRpc2Nvbm5lY3QoKTtcbn1cblxuZnVuY3Rpb24gc3R5bGVQYXJzZXIgKG5vZGUpIHtcbiAgdmFyIHN0eWxlID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gIHZhciB2YWwgPSBbXTtcblxuICBpZiAoc3R5bGUpIHtcbiAgICB2YWwgPSBzdHlsZS5zcGxpdCgnOycpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBzdHlsZSkge1xuICAgICAgdmFyIHN0eWxlcyA9IHN0eWxlLnNwbGl0KCc6Jyk7XG4gICAgICB2YXIgcHJvcCA9IHN0eWxlc1swXTtcbiAgICAgIHZhciB2YWx1ZSA9IHN0eWxlcy5zbGljZSgxKTtcblxuICAgICAgaWYgKHByb3AgJiYgdmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgICBhY2NbcHJvcF0gPSB2YWx1ZS5qb2luKCc6JykudHJpbSgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfVxuXG4gIHJldHVybiB2YWw7XG59XG5cbmZ1bmN0aW9uIGNsYXNzUGFyc2VyIChub2RlKSB7XG4gIHZhciBleGlzdGluZ1ByZWZpeCA9IG5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLXByZWZpeCcpO1xuICB2YXIgZXhpc3RpbmdJY29uTmFtZSA9IG5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLWljb24nKTtcbiAgdmFyIGlubmVyVGV4dCA9IG5vZGUuaW5uZXJUZXh0ICE9PSB1bmRlZmluZWQgPyBub2RlLmlubmVyVGV4dC50cmltKCkgOiAnJztcbiAgdmFyIHZhbCA9IGdldENhbm9uaWNhbEljb24oY2xhc3NBcnJheShub2RlKSk7XG5cbiAgaWYgKCF2YWwucHJlZml4KSB7XG4gICAgdmFsLnByZWZpeCA9IGdldERlZmF1bHRVc2FibGVQcmVmaXgoKTtcbiAgfVxuXG4gIGlmIChleGlzdGluZ1ByZWZpeCAmJiBleGlzdGluZ0ljb25OYW1lKSB7XG4gICAgdmFsLnByZWZpeCA9IGV4aXN0aW5nUHJlZml4O1xuICAgIHZhbC5pY29uTmFtZSA9IGV4aXN0aW5nSWNvbk5hbWU7XG4gIH1cblxuICBpZiAodmFsLmljb25OYW1lICYmIHZhbC5wcmVmaXgpIHtcbiAgICByZXR1cm4gdmFsO1xuICB9XG5cbiAgaWYgKHZhbC5wcmVmaXggJiYgaW5uZXJUZXh0Lmxlbmd0aCA+IDApIHtcbiAgICB2YWwuaWNvbk5hbWUgPSBieUxpZ2F0dXJlKHZhbC5wcmVmaXgsIG5vZGUuaW5uZXJUZXh0KSB8fCBieVVuaWNvZGUodmFsLnByZWZpeCwgdG9IZXgobm9kZS5pbm5lclRleHQpKTtcbiAgfVxuXG4gIGlmICghdmFsLmljb25OYW1lICYmIGNvbmZpZy5hdXRvRmV0Y2hTdmcgJiYgbm9kZS5maXJzdENoaWxkICYmIG5vZGUuZmlyc3RDaGlsZC5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUpIHtcbiAgICB2YWwuaWNvbk5hbWUgPSBub2RlLmZpcnN0Q2hpbGQuZGF0YTtcbiAgfVxuXG4gIHJldHVybiB2YWw7XG59XG5cbmZ1bmN0aW9uIGF0dHJpYnV0ZXNQYXJzZXIgKG5vZGUpIHtcbiAgdmFyIGV4dHJhQXR0cmlidXRlcyA9IHRvQXJyYXkobm9kZS5hdHRyaWJ1dGVzKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgYXR0cikge1xuICAgIGlmIChhY2MubmFtZSAhPT0gJ2NsYXNzJyAmJiBhY2MubmFtZSAhPT0gJ3N0eWxlJykge1xuICAgICAgYWNjW2F0dHIubmFtZV0gPSBhdHRyLnZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbiAgdmFyIHRpdGxlID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ3RpdGxlJyk7XG4gIHZhciB0aXRsZUlkID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtZmEtdGl0bGUtaWQnKTtcblxuICBpZiAoY29uZmlnLmF1dG9BMTF5KSB7XG4gICAgaWYgKHRpdGxlKSB7XG4gICAgICBleHRyYUF0dHJpYnV0ZXNbJ2FyaWEtbGFiZWxsZWRieSddID0gXCJcIi5jb25jYXQoY29uZmlnLnJlcGxhY2VtZW50Q2xhc3MsIFwiLXRpdGxlLVwiKS5jb25jYXQodGl0bGVJZCB8fCBuZXh0VW5pcXVlSWQoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4dHJhQXR0cmlidXRlc1snYXJpYS1oaWRkZW4nXSA9ICd0cnVlJztcbiAgICAgIGV4dHJhQXR0cmlidXRlc1snZm9jdXNhYmxlJ10gPSAnZmFsc2UnO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBleHRyYUF0dHJpYnV0ZXM7XG59XG5cbmZ1bmN0aW9uIGJsYW5rTWV0YSgpIHtcbiAgcmV0dXJuIHtcbiAgICBpY29uTmFtZTogbnVsbCxcbiAgICB0aXRsZTogbnVsbCxcbiAgICB0aXRsZUlkOiBudWxsLFxuICAgIHByZWZpeDogbnVsbCxcbiAgICB0cmFuc2Zvcm06IG1lYW5pbmdsZXNzVHJhbnNmb3JtLFxuICAgIHN5bWJvbDogZmFsc2UsXG4gICAgbWFzazoge1xuICAgICAgaWNvbk5hbWU6IG51bGwsXG4gICAgICBwcmVmaXg6IG51bGwsXG4gICAgICByZXN0OiBbXVxuICAgIH0sXG4gICAgbWFza0lkOiBudWxsLFxuICAgIGV4dHJhOiB7XG4gICAgICBjbGFzc2VzOiBbXSxcbiAgICAgIHN0eWxlczoge30sXG4gICAgICBhdHRyaWJ1dGVzOiB7fVxuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIHBhcnNlTWV0YShub2RlKSB7XG4gIHZhciBwYXJzZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHtcbiAgICBzdHlsZVBhcnNlcjogdHJ1ZVxuICB9O1xuXG4gIHZhciBfY2xhc3NQYXJzZXIgPSBjbGFzc1BhcnNlcihub2RlKSxcbiAgICAgIGljb25OYW1lID0gX2NsYXNzUGFyc2VyLmljb25OYW1lLFxuICAgICAgcHJlZml4ID0gX2NsYXNzUGFyc2VyLnByZWZpeCxcbiAgICAgIGV4dHJhQ2xhc3NlcyA9IF9jbGFzc1BhcnNlci5yZXN0O1xuXG4gIHZhciBleHRyYUF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzUGFyc2VyKG5vZGUpO1xuICB2YXIgcGx1Z2luTWV0YSA9IGNoYWluSG9va3MoJ3BhcnNlTm9kZUF0dHJpYnV0ZXMnLCB7fSwgbm9kZSk7XG4gIHZhciBleHRyYVN0eWxlcyA9IHBhcnNlci5zdHlsZVBhcnNlciA/IHN0eWxlUGFyc2VyKG5vZGUpIDogW107XG4gIHJldHVybiBfb2JqZWN0U3ByZWFkMih7XG4gICAgaWNvbk5hbWU6IGljb25OYW1lLFxuICAgIHRpdGxlOiBub2RlLmdldEF0dHJpYnV0ZSgndGl0bGUnKSxcbiAgICB0aXRsZUlkOiBub2RlLmdldEF0dHJpYnV0ZSgnZGF0YS1mYS10aXRsZS1pZCcpLFxuICAgIHByZWZpeDogcHJlZml4LFxuICAgIHRyYW5zZm9ybTogbWVhbmluZ2xlc3NUcmFuc2Zvcm0sXG4gICAgbWFzazoge1xuICAgICAgaWNvbk5hbWU6IG51bGwsXG4gICAgICBwcmVmaXg6IG51bGwsXG4gICAgICByZXN0OiBbXVxuICAgIH0sXG4gICAgbWFza0lkOiBudWxsLFxuICAgIHN5bWJvbDogZmFsc2UsXG4gICAgZXh0cmE6IHtcbiAgICAgIGNsYXNzZXM6IGV4dHJhQ2xhc3NlcyxcbiAgICAgIHN0eWxlczogZXh0cmFTdHlsZXMsXG4gICAgICBhdHRyaWJ1dGVzOiBleHRyYUF0dHJpYnV0ZXNcbiAgICB9XG4gIH0sIHBsdWdpbk1ldGEpO1xufVxuXG52YXIgc3R5bGVzJDIgPSBuYW1lc3BhY2Uuc3R5bGVzO1xuXG5mdW5jdGlvbiBnZW5lcmF0ZU11dGF0aW9uKG5vZGUpIHtcbiAgdmFyIG5vZGVNZXRhID0gY29uZmlnLmF1dG9SZXBsYWNlU3ZnID09PSAnbmVzdCcgPyBwYXJzZU1ldGEobm9kZSwge1xuICAgIHN0eWxlUGFyc2VyOiBmYWxzZVxuICB9KSA6IHBhcnNlTWV0YShub2RlKTtcblxuICBpZiAofm5vZGVNZXRhLmV4dHJhLmNsYXNzZXMuaW5kZXhPZihMQVlFUlNfVEVYVF9DTEFTU05BTUUpKSB7XG4gICAgcmV0dXJuIGNhbGxQcm92aWRlZCgnZ2VuZXJhdGVMYXllcnNUZXh0Jywgbm9kZSwgbm9kZU1ldGEpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjYWxsUHJvdmlkZWQoJ2dlbmVyYXRlU3ZnUmVwbGFjZW1lbnRNdXRhdGlvbicsIG5vZGUsIG5vZGVNZXRhKTtcbiAgfVxufVxuXG52YXIga25vd25QcmVmaXhlcyA9IG5ldyBTZXQoKTtcbkZBTUlMSUVTLm1hcChmdW5jdGlvbiAoZmFtaWx5KSB7XG4gIGtub3duUHJlZml4ZXMuYWRkKFwiZmEtXCIuY29uY2F0KGZhbWlseSkpO1xufSk7XG5PYmplY3Qua2V5cyhQUkVGSVhfVE9fU1RZTEVbRkFNSUxZX0NMQVNTSUNdKS5tYXAoa25vd25QcmVmaXhlcy5hZGQuYmluZChrbm93blByZWZpeGVzKSk7XG5PYmplY3Qua2V5cyhQUkVGSVhfVE9fU1RZTEVbRkFNSUxZX1NIQVJQXSkubWFwKGtub3duUHJlZml4ZXMuYWRkLmJpbmQoa25vd25QcmVmaXhlcykpO1xua25vd25QcmVmaXhlcyA9IF90b0NvbnN1bWFibGVBcnJheShrbm93blByZWZpeGVzKTtcblxuZnVuY3Rpb24gb25UcmVlKHJvb3QpIHtcbiAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBudWxsO1xuICBpZiAoIUlTX0RPTSkgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB2YXIgaHRtbENsYXNzTGlzdCA9IERPQ1VNRU5ULmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3Q7XG5cbiAgdmFyIGhjbEFkZCA9IGZ1bmN0aW9uIGhjbEFkZChzdWZmaXgpIHtcbiAgICByZXR1cm4gaHRtbENsYXNzTGlzdC5hZGQoXCJcIi5jb25jYXQoSFRNTF9DTEFTU19JMlNWR19CQVNFX0NMQVNTLCBcIi1cIikuY29uY2F0KHN1ZmZpeCkpO1xuICB9O1xuXG4gIHZhciBoY2xSZW1vdmUgPSBmdW5jdGlvbiBoY2xSZW1vdmUoc3VmZml4KSB7XG4gICAgcmV0dXJuIGh0bWxDbGFzc0xpc3QucmVtb3ZlKFwiXCIuY29uY2F0KEhUTUxfQ0xBU1NfSTJTVkdfQkFTRV9DTEFTUywgXCItXCIpLmNvbmNhdChzdWZmaXgpKTtcbiAgfTtcblxuICB2YXIgcHJlZml4ZXMgPSBjb25maWcuYXV0b0ZldGNoU3ZnID8ga25vd25QcmVmaXhlcyA6IEZBTUlMSUVTLm1hcChmdW5jdGlvbiAoZikge1xuICAgIHJldHVybiBcImZhLVwiLmNvbmNhdChmKTtcbiAgfSkuY29uY2F0KE9iamVjdC5rZXlzKHN0eWxlcyQyKSk7XG5cbiAgaWYgKCFwcmVmaXhlcy5pbmNsdWRlcygnZmEnKSkge1xuICAgIHByZWZpeGVzLnB1c2goJ2ZhJyk7XG4gIH1cblxuICB2YXIgcHJlZml4ZXNEb21RdWVyeSA9IFtcIi5cIi5jb25jYXQoTEFZRVJTX1RFWFRfQ0xBU1NOQU1FLCBcIjpub3QoW1wiKS5jb25jYXQoREFUQV9GQV9JMlNWRywgXCJdKVwiKV0uY29uY2F0KHByZWZpeGVzLm1hcChmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBcIi5cIi5jb25jYXQocCwgXCI6bm90KFtcIikuY29uY2F0KERBVEFfRkFfSTJTVkcsIFwiXSlcIik7XG4gIH0pKS5qb2luKCcsICcpO1xuXG4gIGlmIChwcmVmaXhlc0RvbVF1ZXJ5Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxuXG4gIHZhciBjYW5kaWRhdGVzID0gW107XG5cbiAgdHJ5IHtcbiAgICBjYW5kaWRhdGVzID0gdG9BcnJheShyb290LnF1ZXJ5U2VsZWN0b3JBbGwocHJlZml4ZXNEb21RdWVyeSkpO1xuICB9IGNhdGNoIChlKSB7Ly8gbm9vcFxuICB9XG5cbiAgaWYgKGNhbmRpZGF0ZXMubGVuZ3RoID4gMCkge1xuICAgIGhjbEFkZCgncGVuZGluZycpO1xuICAgIGhjbFJlbW92ZSgnY29tcGxldGUnKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cblxuICB2YXIgbWFyayA9IHBlcmYuYmVnaW4oJ29uVHJlZScpO1xuICB2YXIgbXV0YXRpb25zID0gY2FuZGlkYXRlcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgbm9kZSkge1xuICAgIHRyeSB7XG4gICAgICB2YXIgbXV0YXRpb24gPSBnZW5lcmF0ZU11dGF0aW9uKG5vZGUpO1xuXG4gICAgICBpZiAobXV0YXRpb24pIHtcbiAgICAgICAgYWNjLnB1c2gobXV0YXRpb24pO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmICghUFJPRFVDVElPTikge1xuICAgICAgICBpZiAoZS5uYW1lID09PSAnTWlzc2luZ0ljb24nKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhY2M7XG4gIH0sIFtdKTtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBQcm9taXNlLmFsbChtdXRhdGlvbnMpLnRoZW4oZnVuY3Rpb24gKHJlc29sdmVkTXV0YXRpb25zKSB7XG4gICAgICBwZXJmb3JtKHJlc29sdmVkTXV0YXRpb25zLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGhjbEFkZCgnYWN0aXZlJyk7XG4gICAgICAgIGhjbEFkZCgnY29tcGxldGUnKTtcbiAgICAgICAgaGNsUmVtb3ZlKCdwZW5kaW5nJyk7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrKCk7XG4gICAgICAgIG1hcmsoKTtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfSk7XG4gICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHtcbiAgICAgIG1hcmsoKTtcbiAgICAgIHJlamVjdChlKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG9uTm9kZShub2RlKSB7XG4gIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogbnVsbDtcbiAgZ2VuZXJhdGVNdXRhdGlvbihub2RlKS50aGVuKGZ1bmN0aW9uIChtdXRhdGlvbikge1xuICAgIGlmIChtdXRhdGlvbikge1xuICAgICAgcGVyZm9ybShbbXV0YXRpb25dLCBjYWxsYmFjayk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUljb25zKG5leHQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChtYXliZUljb25EZWZpbml0aW9uKSB7XG4gICAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdmFyIGljb25EZWZpbml0aW9uID0gKG1heWJlSWNvbkRlZmluaXRpb24gfHwge30pLmljb24gPyBtYXliZUljb25EZWZpbml0aW9uIDogZmluZEljb25EZWZpbml0aW9uKG1heWJlSWNvbkRlZmluaXRpb24gfHwge30pO1xuICAgIHZhciBtYXNrID0gcGFyYW1zLm1hc2s7XG5cbiAgICBpZiAobWFzaykge1xuICAgICAgbWFzayA9IChtYXNrIHx8IHt9KS5pY29uID8gbWFzayA6IGZpbmRJY29uRGVmaW5pdGlvbihtYXNrIHx8IHt9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV4dChpY29uRGVmaW5pdGlvbiwgX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIHBhcmFtcyksIHt9LCB7XG4gICAgICBtYXNrOiBtYXNrXG4gICAgfSkpO1xuICB9O1xufVxuXG52YXIgcmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKGljb25EZWZpbml0aW9uKSB7XG4gIHZhciBwYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICB2YXIgX3BhcmFtcyR0cmFuc2Zvcm0gPSBwYXJhbXMudHJhbnNmb3JtLFxuICAgICAgdHJhbnNmb3JtID0gX3BhcmFtcyR0cmFuc2Zvcm0gPT09IHZvaWQgMCA/IG1lYW5pbmdsZXNzVHJhbnNmb3JtIDogX3BhcmFtcyR0cmFuc2Zvcm0sXG4gICAgICBfcGFyYW1zJHN5bWJvbCA9IHBhcmFtcy5zeW1ib2wsXG4gICAgICBzeW1ib2wgPSBfcGFyYW1zJHN5bWJvbCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcGFyYW1zJHN5bWJvbCxcbiAgICAgIF9wYXJhbXMkbWFzayA9IHBhcmFtcy5tYXNrLFxuICAgICAgbWFzayA9IF9wYXJhbXMkbWFzayA9PT0gdm9pZCAwID8gbnVsbCA6IF9wYXJhbXMkbWFzayxcbiAgICAgIF9wYXJhbXMkbWFza0lkID0gcGFyYW1zLm1hc2tJZCxcbiAgICAgIG1hc2tJZCA9IF9wYXJhbXMkbWFza0lkID09PSB2b2lkIDAgPyBudWxsIDogX3BhcmFtcyRtYXNrSWQsXG4gICAgICBfcGFyYW1zJHRpdGxlID0gcGFyYW1zLnRpdGxlLFxuICAgICAgdGl0bGUgPSBfcGFyYW1zJHRpdGxlID09PSB2b2lkIDAgPyBudWxsIDogX3BhcmFtcyR0aXRsZSxcbiAgICAgIF9wYXJhbXMkdGl0bGVJZCA9IHBhcmFtcy50aXRsZUlkLFxuICAgICAgdGl0bGVJZCA9IF9wYXJhbXMkdGl0bGVJZCA9PT0gdm9pZCAwID8gbnVsbCA6IF9wYXJhbXMkdGl0bGVJZCxcbiAgICAgIF9wYXJhbXMkY2xhc3NlcyA9IHBhcmFtcy5jbGFzc2VzLFxuICAgICAgY2xhc3NlcyA9IF9wYXJhbXMkY2xhc3NlcyA9PT0gdm9pZCAwID8gW10gOiBfcGFyYW1zJGNsYXNzZXMsXG4gICAgICBfcGFyYW1zJGF0dHJpYnV0ZXMgPSBwYXJhbXMuYXR0cmlidXRlcyxcbiAgICAgIGF0dHJpYnV0ZXMgPSBfcGFyYW1zJGF0dHJpYnV0ZXMgPT09IHZvaWQgMCA/IHt9IDogX3BhcmFtcyRhdHRyaWJ1dGVzLFxuICAgICAgX3BhcmFtcyRzdHlsZXMgPSBwYXJhbXMuc3R5bGVzLFxuICAgICAgc3R5bGVzID0gX3BhcmFtcyRzdHlsZXMgPT09IHZvaWQgMCA/IHt9IDogX3BhcmFtcyRzdHlsZXM7XG4gIGlmICghaWNvbkRlZmluaXRpb24pIHJldHVybjtcbiAgdmFyIHByZWZpeCA9IGljb25EZWZpbml0aW9uLnByZWZpeCxcbiAgICAgIGljb25OYW1lID0gaWNvbkRlZmluaXRpb24uaWNvbk5hbWUsXG4gICAgICBpY29uID0gaWNvbkRlZmluaXRpb24uaWNvbjtcbiAgcmV0dXJuIGRvbVZhcmlhbnRzKF9vYmplY3RTcHJlYWQyKHtcbiAgICB0eXBlOiAnaWNvbidcbiAgfSwgaWNvbkRlZmluaXRpb24pLCBmdW5jdGlvbiAoKSB7XG4gICAgY2FsbEhvb2tzKCdiZWZvcmVET01FbGVtZW50Q3JlYXRpb24nLCB7XG4gICAgICBpY29uRGVmaW5pdGlvbjogaWNvbkRlZmluaXRpb24sXG4gICAgICBwYXJhbXM6IHBhcmFtc1xuICAgIH0pO1xuXG4gICAgaWYgKGNvbmZpZy5hdXRvQTExeSkge1xuICAgICAgaWYgKHRpdGxlKSB7XG4gICAgICAgIGF0dHJpYnV0ZXNbJ2FyaWEtbGFiZWxsZWRieSddID0gXCJcIi5jb25jYXQoY29uZmlnLnJlcGxhY2VtZW50Q2xhc3MsIFwiLXRpdGxlLVwiKS5jb25jYXQodGl0bGVJZCB8fCBuZXh0VW5pcXVlSWQoKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhdHRyaWJ1dGVzWydhcmlhLWhpZGRlbiddID0gJ3RydWUnO1xuICAgICAgICBhdHRyaWJ1dGVzWydmb2N1c2FibGUnXSA9ICdmYWxzZSc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1ha2VJbmxpbmVTdmdBYnN0cmFjdCh7XG4gICAgICBpY29uczoge1xuICAgICAgICBtYWluOiBhc0ZvdW5kSWNvbihpY29uKSxcbiAgICAgICAgbWFzazogbWFzayA/IGFzRm91bmRJY29uKG1hc2suaWNvbikgOiB7XG4gICAgICAgICAgZm91bmQ6IGZhbHNlLFxuICAgICAgICAgIHdpZHRoOiBudWxsLFxuICAgICAgICAgIGhlaWdodDogbnVsbCxcbiAgICAgICAgICBpY29uOiB7fVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcHJlZml4OiBwcmVmaXgsXG4gICAgICBpY29uTmFtZTogaWNvbk5hbWUsXG4gICAgICB0cmFuc2Zvcm06IF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBtZWFuaW5nbGVzc1RyYW5zZm9ybSksIHRyYW5zZm9ybSksXG4gICAgICBzeW1ib2w6IHN5bWJvbCxcbiAgICAgIHRpdGxlOiB0aXRsZSxcbiAgICAgIG1hc2tJZDogbWFza0lkLFxuICAgICAgdGl0bGVJZDogdGl0bGVJZCxcbiAgICAgIGV4dHJhOiB7XG4gICAgICAgIGF0dHJpYnV0ZXM6IGF0dHJpYnV0ZXMsXG4gICAgICAgIHN0eWxlczogc3R5bGVzLFxuICAgICAgICBjbGFzc2VzOiBjbGFzc2VzXG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufTtcbnZhciBSZXBsYWNlRWxlbWVudHMgPSB7XG4gIG1peG91dDogZnVuY3Rpb24gbWl4b3V0KCkge1xuICAgIHJldHVybiB7XG4gICAgICBpY29uOiByZXNvbHZlSWNvbnMocmVuZGVyKVxuICAgIH07XG4gIH0sXG4gIGhvb2tzOiBmdW5jdGlvbiBob29rcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbXV0YXRpb25PYnNlcnZlckNhbGxiYWNrczogZnVuY3Rpb24gbXV0YXRpb25PYnNlcnZlckNhbGxiYWNrcyhhY2N1bXVsYXRvcikge1xuICAgICAgICBhY2N1bXVsYXRvci50cmVlQ2FsbGJhY2sgPSBvblRyZWU7XG4gICAgICAgIGFjY3VtdWxhdG9yLm5vZGVDYWxsYmFjayA9IG9uTm9kZTtcbiAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgICAgfVxuICAgIH07XG4gIH0sXG4gIHByb3ZpZGVzOiBmdW5jdGlvbiBwcm92aWRlcyhwcm92aWRlcnMkJDEpIHtcbiAgICBwcm92aWRlcnMkJDEuaTJzdmcgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICB2YXIgX3BhcmFtcyRub2RlID0gcGFyYW1zLm5vZGUsXG4gICAgICAgICAgbm9kZSA9IF9wYXJhbXMkbm9kZSA9PT0gdm9pZCAwID8gRE9DVU1FTlQgOiBfcGFyYW1zJG5vZGUsXG4gICAgICAgICAgX3BhcmFtcyRjYWxsYmFjayA9IHBhcmFtcy5jYWxsYmFjayxcbiAgICAgICAgICBjYWxsYmFjayA9IF9wYXJhbXMkY2FsbGJhY2sgPT09IHZvaWQgMCA/IGZ1bmN0aW9uICgpIHt9IDogX3BhcmFtcyRjYWxsYmFjaztcbiAgICAgIHJldHVybiBvblRyZWUobm9kZSwgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICBwcm92aWRlcnMkJDEuZ2VuZXJhdGVTdmdSZXBsYWNlbWVudE11dGF0aW9uID0gZnVuY3Rpb24gKG5vZGUsIG5vZGVNZXRhKSB7XG4gICAgICB2YXIgaWNvbk5hbWUgPSBub2RlTWV0YS5pY29uTmFtZSxcbiAgICAgICAgICB0aXRsZSA9IG5vZGVNZXRhLnRpdGxlLFxuICAgICAgICAgIHRpdGxlSWQgPSBub2RlTWV0YS50aXRsZUlkLFxuICAgICAgICAgIHByZWZpeCA9IG5vZGVNZXRhLnByZWZpeCxcbiAgICAgICAgICB0cmFuc2Zvcm0gPSBub2RlTWV0YS50cmFuc2Zvcm0sXG4gICAgICAgICAgc3ltYm9sID0gbm9kZU1ldGEuc3ltYm9sLFxuICAgICAgICAgIG1hc2sgPSBub2RlTWV0YS5tYXNrLFxuICAgICAgICAgIG1hc2tJZCA9IG5vZGVNZXRhLm1hc2tJZCxcbiAgICAgICAgICBleHRyYSA9IG5vZGVNZXRhLmV4dHJhO1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgUHJvbWlzZS5hbGwoW2ZpbmRJY29uKGljb25OYW1lLCBwcmVmaXgpLCBtYXNrLmljb25OYW1lID8gZmluZEljb24obWFzay5pY29uTmFtZSwgbWFzay5wcmVmaXgpIDogUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgICBmb3VuZDogZmFsc2UsXG4gICAgICAgICAgd2lkdGg6IDUxMixcbiAgICAgICAgICBoZWlnaHQ6IDUxMixcbiAgICAgICAgICBpY29uOiB7fVxuICAgICAgICB9KV0pLnRoZW4oZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgICB2YXIgX3JlZjIgPSBfc2xpY2VkVG9BcnJheShfcmVmLCAyKSxcbiAgICAgICAgICAgICAgbWFpbiA9IF9yZWYyWzBdLFxuICAgICAgICAgICAgICBtYXNrID0gX3JlZjJbMV07XG5cbiAgICAgICAgICByZXNvbHZlKFtub2RlLCBtYWtlSW5saW5lU3ZnQWJzdHJhY3Qoe1xuICAgICAgICAgICAgaWNvbnM6IHtcbiAgICAgICAgICAgICAgbWFpbjogbWFpbixcbiAgICAgICAgICAgICAgbWFzazogbWFza1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByZWZpeDogcHJlZml4LFxuICAgICAgICAgICAgaWNvbk5hbWU6IGljb25OYW1lLFxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2Zvcm0sXG4gICAgICAgICAgICBzeW1ib2w6IHN5bWJvbCxcbiAgICAgICAgICAgIG1hc2tJZDogbWFza0lkLFxuICAgICAgICAgICAgdGl0bGU6IHRpdGxlLFxuICAgICAgICAgICAgdGl0bGVJZDogdGl0bGVJZCxcbiAgICAgICAgICAgIGV4dHJhOiBleHRyYSxcbiAgICAgICAgICAgIHdhdGNoYWJsZTogdHJ1ZVxuICAgICAgICAgIH0pXSk7XG4gICAgICAgIH0pLmNhdGNoKHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgcHJvdmlkZXJzJCQxLmdlbmVyYXRlQWJzdHJhY3RJY29uID0gZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBfcmVmMy5jaGlsZHJlbixcbiAgICAgICAgICBhdHRyaWJ1dGVzID0gX3JlZjMuYXR0cmlidXRlcyxcbiAgICAgICAgICBtYWluID0gX3JlZjMubWFpbixcbiAgICAgICAgICB0cmFuc2Zvcm0gPSBfcmVmMy50cmFuc2Zvcm0sXG4gICAgICAgICAgc3R5bGVzID0gX3JlZjMuc3R5bGVzO1xuICAgICAgdmFyIHN0eWxlU3RyaW5nID0gam9pblN0eWxlcyhzdHlsZXMpO1xuXG4gICAgICBpZiAoc3R5bGVTdHJpbmcubGVuZ3RoID4gMCkge1xuICAgICAgICBhdHRyaWJ1dGVzWydzdHlsZSddID0gc3R5bGVTdHJpbmc7XG4gICAgICB9XG5cbiAgICAgIHZhciBuZXh0Q2hpbGQ7XG5cbiAgICAgIGlmICh0cmFuc2Zvcm1Jc01lYW5pbmdmdWwodHJhbnNmb3JtKSkge1xuICAgICAgICBuZXh0Q2hpbGQgPSBjYWxsUHJvdmlkZWQoJ2dlbmVyYXRlQWJzdHJhY3RUcmFuc2Zvcm1Hcm91cGluZycsIHtcbiAgICAgICAgICBtYWluOiBtYWluLFxuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNmb3JtLFxuICAgICAgICAgIGNvbnRhaW5lcldpZHRoOiBtYWluLndpZHRoLFxuICAgICAgICAgIGljb25XaWR0aDogbWFpbi53aWR0aFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgY2hpbGRyZW4ucHVzaChuZXh0Q2hpbGQgfHwgbWFpbi5pY29uKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICAgICAgYXR0cmlidXRlczogYXR0cmlidXRlc1xuICAgICAgfTtcbiAgICB9O1xuICB9XG59O1xuXG52YXIgTGF5ZXJzID0ge1xuICBtaXhvdXQ6IGZ1bmN0aW9uIG1peG91dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGF5ZXI6IGZ1bmN0aW9uIGxheWVyKGFzc2VtYmxlcikge1xuICAgICAgICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgICAgdmFyIF9wYXJhbXMkY2xhc3NlcyA9IHBhcmFtcy5jbGFzc2VzLFxuICAgICAgICAgICAgY2xhc3NlcyA9IF9wYXJhbXMkY2xhc3NlcyA9PT0gdm9pZCAwID8gW10gOiBfcGFyYW1zJGNsYXNzZXM7XG4gICAgICAgIHJldHVybiBkb21WYXJpYW50cyh7XG4gICAgICAgICAgdHlwZTogJ2xheWVyJ1xuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY2FsbEhvb2tzKCdiZWZvcmVET01FbGVtZW50Q3JlYXRpb24nLCB7XG4gICAgICAgICAgICBhc3NlbWJsZXI6IGFzc2VtYmxlcixcbiAgICAgICAgICAgIHBhcmFtczogcGFyYW1zXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdmFyIGNoaWxkcmVuID0gW107XG4gICAgICAgICAgYXNzZW1ibGVyKGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgICAgICBBcnJheS5pc0FycmF5KGFyZ3MpID8gYXJncy5tYXAoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlbi5jb25jYXQoYS5hYnN0cmFjdCk7XG4gICAgICAgICAgICB9KSA6IGNoaWxkcmVuID0gY2hpbGRyZW4uY29uY2F0KGFyZ3MuYWJzdHJhY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBbe1xuICAgICAgICAgICAgdGFnOiAnc3BhbicsXG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICAgIGNsYXNzOiBbXCJcIi5jb25jYXQoY29uZmlnLmNzc1ByZWZpeCwgXCItbGF5ZXJzXCIpXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGNsYXNzZXMpKS5qb2luKCcgJylcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICAgICAgICB9XTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufTtcblxudmFyIExheWVyc0NvdW50ZXIgPSB7XG4gIG1peG91dDogZnVuY3Rpb24gbWl4b3V0KCkge1xuICAgIHJldHVybiB7XG4gICAgICBjb3VudGVyOiBmdW5jdGlvbiBjb3VudGVyKGNvbnRlbnQpIHtcbiAgICAgICAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgICAgIHZhciBfcGFyYW1zJHRpdGxlID0gcGFyYW1zLnRpdGxlLFxuICAgICAgICAgICAgdGl0bGUgPSBfcGFyYW1zJHRpdGxlID09PSB2b2lkIDAgPyBudWxsIDogX3BhcmFtcyR0aXRsZSxcbiAgICAgICAgICAgIF9wYXJhbXMkY2xhc3NlcyA9IHBhcmFtcy5jbGFzc2VzLFxuICAgICAgICAgICAgY2xhc3NlcyA9IF9wYXJhbXMkY2xhc3NlcyA9PT0gdm9pZCAwID8gW10gOiBfcGFyYW1zJGNsYXNzZXMsXG4gICAgICAgICAgICBfcGFyYW1zJGF0dHJpYnV0ZXMgPSBwYXJhbXMuYXR0cmlidXRlcyxcbiAgICAgICAgICAgIGF0dHJpYnV0ZXMgPSBfcGFyYW1zJGF0dHJpYnV0ZXMgPT09IHZvaWQgMCA/IHt9IDogX3BhcmFtcyRhdHRyaWJ1dGVzLFxuICAgICAgICAgICAgX3BhcmFtcyRzdHlsZXMgPSBwYXJhbXMuc3R5bGVzLFxuICAgICAgICAgICAgc3R5bGVzID0gX3BhcmFtcyRzdHlsZXMgPT09IHZvaWQgMCA/IHt9IDogX3BhcmFtcyRzdHlsZXM7XG4gICAgICAgIHJldHVybiBkb21WYXJpYW50cyh7XG4gICAgICAgICAgdHlwZTogJ2NvdW50ZXInLFxuICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnRcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNhbGxIb29rcygnYmVmb3JlRE9NRWxlbWVudENyZWF0aW9uJywge1xuICAgICAgICAgICAgY29udGVudDogY29udGVudCxcbiAgICAgICAgICAgIHBhcmFtczogcGFyYW1zXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIG1ha2VMYXllcnNDb3VudGVyQWJzdHJhY3Qoe1xuICAgICAgICAgICAgY29udGVudDogY29udGVudC50b1N0cmluZygpLFxuICAgICAgICAgICAgdGl0bGU6IHRpdGxlLFxuICAgICAgICAgICAgZXh0cmE6IHtcbiAgICAgICAgICAgICAgYXR0cmlidXRlczogYXR0cmlidXRlcyxcbiAgICAgICAgICAgICAgc3R5bGVzOiBzdHlsZXMsXG4gICAgICAgICAgICAgIGNsYXNzZXM6IFtcIlwiLmNvbmNhdChjb25maWcuY3NzUHJlZml4LCBcIi1sYXllcnMtY291bnRlclwiKV0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShjbGFzc2VzKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufTtcblxudmFyIExheWVyc1RleHQgPSB7XG4gIG1peG91dDogZnVuY3Rpb24gbWl4b3V0KCkge1xuICAgIHJldHVybiB7XG4gICAgICB0ZXh0OiBmdW5jdGlvbiB0ZXh0KGNvbnRlbnQpIHtcbiAgICAgICAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgICAgIHZhciBfcGFyYW1zJHRyYW5zZm9ybSA9IHBhcmFtcy50cmFuc2Zvcm0sXG4gICAgICAgICAgICB0cmFuc2Zvcm0gPSBfcGFyYW1zJHRyYW5zZm9ybSA9PT0gdm9pZCAwID8gbWVhbmluZ2xlc3NUcmFuc2Zvcm0gOiBfcGFyYW1zJHRyYW5zZm9ybSxcbiAgICAgICAgICAgIF9wYXJhbXMkdGl0bGUgPSBwYXJhbXMudGl0bGUsXG4gICAgICAgICAgICB0aXRsZSA9IF9wYXJhbXMkdGl0bGUgPT09IHZvaWQgMCA/IG51bGwgOiBfcGFyYW1zJHRpdGxlLFxuICAgICAgICAgICAgX3BhcmFtcyRjbGFzc2VzID0gcGFyYW1zLmNsYXNzZXMsXG4gICAgICAgICAgICBjbGFzc2VzID0gX3BhcmFtcyRjbGFzc2VzID09PSB2b2lkIDAgPyBbXSA6IF9wYXJhbXMkY2xhc3NlcyxcbiAgICAgICAgICAgIF9wYXJhbXMkYXR0cmlidXRlcyA9IHBhcmFtcy5hdHRyaWJ1dGVzLFxuICAgICAgICAgICAgYXR0cmlidXRlcyA9IF9wYXJhbXMkYXR0cmlidXRlcyA9PT0gdm9pZCAwID8ge30gOiBfcGFyYW1zJGF0dHJpYnV0ZXMsXG4gICAgICAgICAgICBfcGFyYW1zJHN0eWxlcyA9IHBhcmFtcy5zdHlsZXMsXG4gICAgICAgICAgICBzdHlsZXMgPSBfcGFyYW1zJHN0eWxlcyA9PT0gdm9pZCAwID8ge30gOiBfcGFyYW1zJHN0eWxlcztcbiAgICAgICAgcmV0dXJuIGRvbVZhcmlhbnRzKHtcbiAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgY29udGVudDogY29udGVudFxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY2FsbEhvb2tzKCdiZWZvcmVET01FbGVtZW50Q3JlYXRpb24nLCB7XG4gICAgICAgICAgICBjb250ZW50OiBjb250ZW50LFxuICAgICAgICAgICAgcGFyYW1zOiBwYXJhbXNcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gbWFrZUxheWVyc1RleHRBYnN0cmFjdCh7XG4gICAgICAgICAgICBjb250ZW50OiBjb250ZW50LFxuICAgICAgICAgICAgdHJhbnNmb3JtOiBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgbWVhbmluZ2xlc3NUcmFuc2Zvcm0pLCB0cmFuc2Zvcm0pLFxuICAgICAgICAgICAgdGl0bGU6IHRpdGxlLFxuICAgICAgICAgICAgZXh0cmE6IHtcbiAgICAgICAgICAgICAgYXR0cmlidXRlczogYXR0cmlidXRlcyxcbiAgICAgICAgICAgICAgc3R5bGVzOiBzdHlsZXMsXG4gICAgICAgICAgICAgIGNsYXNzZXM6IFtcIlwiLmNvbmNhdChjb25maWcuY3NzUHJlZml4LCBcIi1sYXllcnMtdGV4dFwiKV0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShjbGFzc2VzKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgcHJvdmlkZXM6IGZ1bmN0aW9uIHByb3ZpZGVzKHByb3ZpZGVycyQkMSkge1xuICAgIHByb3ZpZGVycyQkMS5nZW5lcmF0ZUxheWVyc1RleHQgPSBmdW5jdGlvbiAobm9kZSwgbm9kZU1ldGEpIHtcbiAgICAgIHZhciB0aXRsZSA9IG5vZGVNZXRhLnRpdGxlLFxuICAgICAgICAgIHRyYW5zZm9ybSA9IG5vZGVNZXRhLnRyYW5zZm9ybSxcbiAgICAgICAgICBleHRyYSA9IG5vZGVNZXRhLmV4dHJhO1xuICAgICAgdmFyIHdpZHRoID0gbnVsbDtcbiAgICAgIHZhciBoZWlnaHQgPSBudWxsO1xuXG4gICAgICBpZiAoSVNfSUUpIHtcbiAgICAgICAgdmFyIGNvbXB1dGVkRm9udFNpemUgPSBwYXJzZUludChnZXRDb21wdXRlZFN0eWxlKG5vZGUpLmZvbnRTaXplLCAxMCk7XG4gICAgICAgIHZhciBib3VuZGluZ0NsaWVudFJlY3QgPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICB3aWR0aCA9IGJvdW5kaW5nQ2xpZW50UmVjdC53aWR0aCAvIGNvbXB1dGVkRm9udFNpemU7XG4gICAgICAgIGhlaWdodCA9IGJvdW5kaW5nQ2xpZW50UmVjdC5oZWlnaHQgLyBjb21wdXRlZEZvbnRTaXplO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29uZmlnLmF1dG9BMTF5ICYmICF0aXRsZSkge1xuICAgICAgICBleHRyYS5hdHRyaWJ1dGVzWydhcmlhLWhpZGRlbiddID0gJ3RydWUnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFtub2RlLCBtYWtlTGF5ZXJzVGV4dEFic3RyYWN0KHtcbiAgICAgICAgY29udGVudDogbm9kZS5pbm5lckhUTUwsXG4gICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNmb3JtLFxuICAgICAgICB0aXRsZTogdGl0bGUsXG4gICAgICAgIGV4dHJhOiBleHRyYSxcbiAgICAgICAgd2F0Y2hhYmxlOiB0cnVlXG4gICAgICB9KV0pO1xuICAgIH07XG4gIH1cbn07XG5cbnZhciBDTEVBTl9DT05URU5UX1BBVFRFUk4gPSBuZXcgUmVnRXhwKFwiXFxcIlwiLCAndWcnKTtcbnZhciBTRUNPTkRBUllfVU5JQ09ERV9SQU5HRSA9IFsxMTA1OTIwLCAxMTEyMzE5XTtcbmZ1bmN0aW9uIGhleFZhbHVlRnJvbUNvbnRlbnQoY29udGVudCkge1xuICB2YXIgY2xlYW5lZCA9IGNvbnRlbnQucmVwbGFjZShDTEVBTl9DT05URU5UX1BBVFRFUk4sICcnKTtcbiAgdmFyIGNvZGVQb2ludCA9IGNvZGVQb2ludEF0KGNsZWFuZWQsIDApO1xuICB2YXIgaXNQcmVwZW5kVGVuID0gY29kZVBvaW50ID49IFNFQ09OREFSWV9VTklDT0RFX1JBTkdFWzBdICYmIGNvZGVQb2ludCA8PSBTRUNPTkRBUllfVU5JQ09ERV9SQU5HRVsxXTtcbiAgdmFyIGlzRG91YmxlZCA9IGNsZWFuZWQubGVuZ3RoID09PSAyID8gY2xlYW5lZFswXSA9PT0gY2xlYW5lZFsxXSA6IGZhbHNlO1xuICByZXR1cm4ge1xuICAgIHZhbHVlOiBpc0RvdWJsZWQgPyB0b0hleChjbGVhbmVkWzBdKSA6IHRvSGV4KGNsZWFuZWQpLFxuICAgIGlzU2Vjb25kYXJ5OiBpc1ByZXBlbmRUZW4gfHwgaXNEb3VibGVkXG4gIH07XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VGb3JQb3NpdGlvbihub2RlLCBwb3NpdGlvbikge1xuICB2YXIgcGVuZGluZ0F0dHJpYnV0ZSA9IFwiXCIuY29uY2F0KERBVEFfRkFfUFNFVURPX0VMRU1FTlRfUEVORElORykuY29uY2F0KHBvc2l0aW9uLnJlcGxhY2UoJzonLCAnLScpKTtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBpZiAobm9kZS5nZXRBdHRyaWJ1dGUocGVuZGluZ0F0dHJpYnV0ZSkgIT09IG51bGwpIHtcbiAgICAgIC8vIFRoaXMgbm9kZSBpcyBhbHJlYWR5IGJlaW5nIHByb2Nlc3NlZFxuICAgICAgcmV0dXJuIHJlc29sdmUoKTtcbiAgICB9XG5cbiAgICB2YXIgY2hpbGRyZW4gPSB0b0FycmF5KG5vZGUuY2hpbGRyZW4pO1xuICAgIHZhciBhbHJlYWR5UHJvY2Vzc2VkUHNldWRvRWxlbWVudCA9IGNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbiAoYykge1xuICAgICAgcmV0dXJuIGMuZ2V0QXR0cmlidXRlKERBVEFfRkFfUFNFVURPX0VMRU1FTlQpID09PSBwb3NpdGlvbjtcbiAgICB9KVswXTtcbiAgICB2YXIgc3R5bGVzID0gV0lORE9XLmdldENvbXB1dGVkU3R5bGUobm9kZSwgcG9zaXRpb24pO1xuICAgIHZhciBmb250RmFtaWx5ID0gc3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ2ZvbnQtZmFtaWx5JykubWF0Y2goRk9OVF9GQU1JTFlfUEFUVEVSTik7XG4gICAgdmFyIGZvbnRXZWlnaHQgPSBzdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnZm9udC13ZWlnaHQnKTtcbiAgICB2YXIgY29udGVudCA9IHN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdjb250ZW50Jyk7XG5cbiAgICBpZiAoYWxyZWFkeVByb2Nlc3NlZFBzZXVkb0VsZW1lbnQgJiYgIWZvbnRGYW1pbHkpIHtcbiAgICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgcHJvY2Vzc2VkIGl0IGJ1dCB0aGUgY3VycmVudCBjb21wdXRlZCBzdHlsZSBkb2VzIG5vdCByZXN1bHQgaW4gYSBmb250LWZhbWlseSxcbiAgICAgIC8vIHRoYXQgcHJvYmFibHkgbWVhbnMgdGhhdCBhIGNsYXNzIG5hbWUgdGhhdCB3YXMgcHJldmlvdXNseSBwcmVzZW50IHRvIG1ha2UgdGhlIGljb24gaGFzIGJlZW5cbiAgICAgIC8vIHJlbW92ZWQuIFNvIHdlIG5vdyBzaG91bGQgZGVsZXRlIHRoZSBpY29uLlxuICAgICAgbm9kZS5yZW1vdmVDaGlsZChhbHJlYWR5UHJvY2Vzc2VkUHNldWRvRWxlbWVudCk7XG4gICAgICByZXR1cm4gcmVzb2x2ZSgpO1xuICAgIH0gZWxzZSBpZiAoZm9udEZhbWlseSAmJiBjb250ZW50ICE9PSAnbm9uZScgJiYgY29udGVudCAhPT0gJycpIHtcbiAgICAgIHZhciBfY29udGVudCA9IHN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdjb250ZW50Jyk7XG5cbiAgICAgIHZhciBmYW1pbHkgPSB+WydTaGFycCddLmluZGV4T2YoZm9udEZhbWlseVsyXSkgPyBGQU1JTFlfU0hBUlAgOiBGQU1JTFlfQ0xBU1NJQztcbiAgICAgIHZhciBwcmVmaXggPSB+WydTb2xpZCcsICdSZWd1bGFyJywgJ0xpZ2h0JywgJ1RoaW4nLCAnRHVvdG9uZScsICdCcmFuZHMnLCAnS2l0J10uaW5kZXhPZihmb250RmFtaWx5WzJdKSA/IFNUWUxFX1RPX1BSRUZJWFtmYW1pbHldW2ZvbnRGYW1pbHlbMl0udG9Mb3dlckNhc2UoKV0gOiBGT05UX1dFSUdIVF9UT19QUkVGSVhbZmFtaWx5XVtmb250V2VpZ2h0XTtcblxuICAgICAgdmFyIF9oZXhWYWx1ZUZyb21Db250ZW50ID0gaGV4VmFsdWVGcm9tQ29udGVudChfY29udGVudCksXG4gICAgICAgICAgaGV4VmFsdWUgPSBfaGV4VmFsdWVGcm9tQ29udGVudC52YWx1ZSxcbiAgICAgICAgICBpc1NlY29uZGFyeSA9IF9oZXhWYWx1ZUZyb21Db250ZW50LmlzU2Vjb25kYXJ5O1xuXG4gICAgICB2YXIgaXNWNCA9IGZvbnRGYW1pbHlbMF0uc3RhcnRzV2l0aCgnRm9udEF3ZXNvbWUnKTtcbiAgICAgIHZhciBpY29uTmFtZSA9IGJ5VW5pY29kZShwcmVmaXgsIGhleFZhbHVlKTtcbiAgICAgIHZhciBpY29uSWRlbnRpZmllciA9IGljb25OYW1lO1xuXG4gICAgICBpZiAoaXNWNCkge1xuICAgICAgICB2YXIgaWNvbk5hbWU0ID0gYnlPbGRVbmljb2RlKGhleFZhbHVlKTtcblxuICAgICAgICBpZiAoaWNvbk5hbWU0Lmljb25OYW1lICYmIGljb25OYW1lNC5wcmVmaXgpIHtcbiAgICAgICAgICBpY29uTmFtZSA9IGljb25OYW1lNC5pY29uTmFtZTtcbiAgICAgICAgICBwcmVmaXggPSBpY29uTmFtZTQucHJlZml4O1xuICAgICAgICB9XG4gICAgICB9IC8vIE9ubHkgY29udmVydCB0aGUgcHNldWRvIGVsZW1lbnQgaW4gdGhpcyA6OmJlZm9yZS86OmFmdGVyIHBvc2l0aW9uIGludG8gYW4gaWNvbiBpZiB3ZSBoYXZlbid0XG4gICAgICAvLyBhbHJlYWR5IGRvbmUgc28gd2l0aCB0aGUgc2FtZSBwcmVmaXggYW5kIGljb25OYW1lXG5cblxuICAgICAgaWYgKGljb25OYW1lICYmICFpc1NlY29uZGFyeSAmJiAoIWFscmVhZHlQcm9jZXNzZWRQc2V1ZG9FbGVtZW50IHx8IGFscmVhZHlQcm9jZXNzZWRQc2V1ZG9FbGVtZW50LmdldEF0dHJpYnV0ZShEQVRBX1BSRUZJWCkgIT09IHByZWZpeCB8fCBhbHJlYWR5UHJvY2Vzc2VkUHNldWRvRWxlbWVudC5nZXRBdHRyaWJ1dGUoREFUQV9JQ09OKSAhPT0gaWNvbklkZW50aWZpZXIpKSB7XG4gICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKHBlbmRpbmdBdHRyaWJ1dGUsIGljb25JZGVudGlmaWVyKTtcblxuICAgICAgICBpZiAoYWxyZWFkeVByb2Nlc3NlZFBzZXVkb0VsZW1lbnQpIHtcbiAgICAgICAgICAvLyBEZWxldGUgdGhlIG9sZCBvbmUsIHNpbmNlIHdlJ3JlIHJlcGxhY2luZyBpdCB3aXRoIGEgbmV3IG9uZVxuICAgICAgICAgIG5vZGUucmVtb3ZlQ2hpbGQoYWxyZWFkeVByb2Nlc3NlZFBzZXVkb0VsZW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG1ldGEgPSBibGFua01ldGEoKTtcbiAgICAgICAgdmFyIGV4dHJhID0gbWV0YS5leHRyYTtcbiAgICAgICAgZXh0cmEuYXR0cmlidXRlc1tEQVRBX0ZBX1BTRVVET19FTEVNRU5UXSA9IHBvc2l0aW9uO1xuICAgICAgICBmaW5kSWNvbihpY29uTmFtZSwgcHJlZml4KS50aGVuKGZ1bmN0aW9uIChtYWluKSB7XG4gICAgICAgICAgdmFyIF9hYnN0cmFjdCA9IG1ha2VJbmxpbmVTdmdBYnN0cmFjdChfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgbWV0YSksIHt9LCB7XG4gICAgICAgICAgICBpY29uczoge1xuICAgICAgICAgICAgICBtYWluOiBtYWluLFxuICAgICAgICAgICAgICBtYXNrOiBlbXB0eUNhbm9uaWNhbEljb24oKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByZWZpeDogcHJlZml4LFxuICAgICAgICAgICAgaWNvbk5hbWU6IGljb25JZGVudGlmaWVyLFxuICAgICAgICAgICAgZXh0cmE6IGV4dHJhLFxuICAgICAgICAgICAgd2F0Y2hhYmxlOiB0cnVlXG4gICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgdmFyIGVsZW1lbnQgPSBET0NVTUVOVC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ3N2ZycpO1xuXG4gICAgICAgICAgaWYgKHBvc2l0aW9uID09PSAnOjpiZWZvcmUnKSB7XG4gICAgICAgICAgICBub2RlLmluc2VydEJlZm9yZShlbGVtZW50LCBub2RlLmZpcnN0Q2hpbGQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub2RlLmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGVsZW1lbnQub3V0ZXJIVE1MID0gX2Fic3RyYWN0Lm1hcChmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgcmV0dXJuIHRvSHRtbChhKTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKTtcbiAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShwZW5kaW5nQXR0cmlidXRlKTtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0pLmNhdGNoKHJlamVjdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc29sdmUoKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZXBsYWNlKG5vZGUpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKFtyZXBsYWNlRm9yUG9zaXRpb24obm9kZSwgJzo6YmVmb3JlJyksIHJlcGxhY2VGb3JQb3NpdGlvbihub2RlLCAnOjphZnRlcicpXSk7XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NhYmxlKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUucGFyZW50Tm9kZSAhPT0gZG9jdW1lbnQuaGVhZCAmJiAhflRBR05BTUVTX1RPX1NLSVBfRk9SX1BTRVVET0VMRU1FTlRTLmluZGV4T2Yobm9kZS50YWdOYW1lLnRvVXBwZXJDYXNlKCkpICYmICFub2RlLmdldEF0dHJpYnV0ZShEQVRBX0ZBX1BTRVVET19FTEVNRU5UKSAmJiAoIW5vZGUucGFyZW50Tm9kZSB8fCBub2RlLnBhcmVudE5vZGUudGFnTmFtZSAhPT0gJ3N2ZycpO1xufVxuXG5mdW5jdGlvbiBzZWFyY2hQc2V1ZG9FbGVtZW50cyhyb290KSB7XG4gIGlmICghSVNfRE9NKSByZXR1cm47XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIG9wZXJhdGlvbnMgPSB0b0FycmF5KHJvb3QucXVlcnlTZWxlY3RvckFsbCgnKicpKS5maWx0ZXIocHJvY2Vzc2FibGUpLm1hcChyZXBsYWNlKTtcbiAgICB2YXIgZW5kID0gcGVyZi5iZWdpbignc2VhcmNoUHNldWRvRWxlbWVudHMnKTtcbiAgICBkaXNhYmxlT2JzZXJ2YXRpb24oKTtcbiAgICBQcm9taXNlLmFsbChvcGVyYXRpb25zKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIGVuZCgpO1xuICAgICAgZW5hYmxlT2JzZXJ2YXRpb24oKTtcbiAgICAgIHJlc29sdmUoKTtcbiAgICB9KS5jYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICBlbmQoKTtcbiAgICAgIGVuYWJsZU9ic2VydmF0aW9uKCk7XG4gICAgICByZWplY3QoKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbnZhciBQc2V1ZG9FbGVtZW50cyA9IHtcbiAgaG9va3M6IGZ1bmN0aW9uIGhvb2tzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBtdXRhdGlvbk9ic2VydmVyQ2FsbGJhY2tzOiBmdW5jdGlvbiBtdXRhdGlvbk9ic2VydmVyQ2FsbGJhY2tzKGFjY3VtdWxhdG9yKSB7XG4gICAgICAgIGFjY3VtdWxhdG9yLnBzZXVkb0VsZW1lbnRzQ2FsbGJhY2sgPSBzZWFyY2hQc2V1ZG9FbGVtZW50cztcbiAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgICAgfVxuICAgIH07XG4gIH0sXG4gIHByb3ZpZGVzOiBmdW5jdGlvbiBwcm92aWRlcyhwcm92aWRlcnMkJDEpIHtcbiAgICBwcm92aWRlcnMkJDEucHNldWRvRWxlbWVudHMyc3ZnID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgdmFyIF9wYXJhbXMkbm9kZSA9IHBhcmFtcy5ub2RlLFxuICAgICAgICAgIG5vZGUgPSBfcGFyYW1zJG5vZGUgPT09IHZvaWQgMCA/IERPQ1VNRU5UIDogX3BhcmFtcyRub2RlO1xuXG4gICAgICBpZiAoY29uZmlnLnNlYXJjaFBzZXVkb0VsZW1lbnRzKSB7XG4gICAgICAgIHNlYXJjaFBzZXVkb0VsZW1lbnRzKG5vZGUpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn07XG5cbnZhciBfdW53YXRjaGVkID0gZmFsc2U7XG52YXIgTXV0YXRpb25PYnNlcnZlciQxID0ge1xuICBtaXhvdXQ6IGZ1bmN0aW9uIG1peG91dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZG9tOiB7XG4gICAgICAgIHVud2F0Y2g6IGZ1bmN0aW9uIHVud2F0Y2goKSB7XG4gICAgICAgICAgZGlzYWJsZU9ic2VydmF0aW9uKCk7XG4gICAgICAgICAgX3Vud2F0Y2hlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICBob29rczogZnVuY3Rpb24gaG9va3MoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJvb3RzdHJhcDogZnVuY3Rpb24gYm9vdHN0cmFwKCkge1xuICAgICAgICBvYnNlcnZlKGNoYWluSG9va3MoJ211dGF0aW9uT2JzZXJ2ZXJDYWxsYmFja3MnLCB7fSkpO1xuICAgICAgfSxcbiAgICAgIG5vQXV0bzogZnVuY3Rpb24gbm9BdXRvKCkge1xuICAgICAgICBkaXNjb25uZWN0KCk7XG4gICAgICB9LFxuICAgICAgd2F0Y2g6IGZ1bmN0aW9uIHdhdGNoKHBhcmFtcykge1xuICAgICAgICB2YXIgb2JzZXJ2ZU11dGF0aW9uc1Jvb3QgPSBwYXJhbXMub2JzZXJ2ZU11dGF0aW9uc1Jvb3Q7XG5cbiAgICAgICAgaWYgKF91bndhdGNoZWQpIHtcbiAgICAgICAgICBlbmFibGVPYnNlcnZhdGlvbigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9ic2VydmUoY2hhaW5Ib29rcygnbXV0YXRpb25PYnNlcnZlckNhbGxiYWNrcycsIHtcbiAgICAgICAgICAgIG9ic2VydmVNdXRhdGlvbnNSb290OiBvYnNlcnZlTXV0YXRpb25zUm9vdFxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cbn07XG5cbnZhciBwYXJzZVRyYW5zZm9ybVN0cmluZyA9IGZ1bmN0aW9uIHBhcnNlVHJhbnNmb3JtU3RyaW5nKHRyYW5zZm9ybVN0cmluZykge1xuICB2YXIgdHJhbnNmb3JtID0ge1xuICAgIHNpemU6IDE2LFxuICAgIHg6IDAsXG4gICAgeTogMCxcbiAgICBmbGlwWDogZmFsc2UsXG4gICAgZmxpcFk6IGZhbHNlLFxuICAgIHJvdGF0ZTogMFxuICB9O1xuICByZXR1cm4gdHJhbnNmb3JtU3RyaW5nLnRvTG93ZXJDYXNlKCkuc3BsaXQoJyAnKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgbikge1xuICAgIHZhciBwYXJ0cyA9IG4udG9Mb3dlckNhc2UoKS5zcGxpdCgnLScpO1xuICAgIHZhciBmaXJzdCA9IHBhcnRzWzBdO1xuICAgIHZhciByZXN0ID0gcGFydHMuc2xpY2UoMSkuam9pbignLScpO1xuXG4gICAgaWYgKGZpcnN0ICYmIHJlc3QgPT09ICdoJykge1xuICAgICAgYWNjLmZsaXBYID0gdHJ1ZTtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuXG4gICAgaWYgKGZpcnN0ICYmIHJlc3QgPT09ICd2Jykge1xuICAgICAgYWNjLmZsaXBZID0gdHJ1ZTtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuXG4gICAgcmVzdCA9IHBhcnNlRmxvYXQocmVzdCk7XG5cbiAgICBpZiAoaXNOYU4ocmVzdCkpIHtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuXG4gICAgc3dpdGNoIChmaXJzdCkge1xuICAgICAgY2FzZSAnZ3Jvdyc6XG4gICAgICAgIGFjYy5zaXplID0gYWNjLnNpemUgKyByZXN0O1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnc2hyaW5rJzpcbiAgICAgICAgYWNjLnNpemUgPSBhY2Muc2l6ZSAtIHJlc3Q7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgYWNjLnggPSBhY2MueCAtIHJlc3Q7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgIGFjYy54ID0gYWNjLnggKyByZXN0O1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAndXAnOlxuICAgICAgICBhY2MueSA9IGFjYy55IC0gcmVzdDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2Rvd24nOlxuICAgICAgICBhY2MueSA9IGFjYy55ICsgcmVzdDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ3JvdGF0ZSc6XG4gICAgICAgIGFjYy5yb3RhdGUgPSBhY2Mucm90YXRlICsgcmVzdDtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfSwgdHJhbnNmb3JtKTtcbn07XG52YXIgUG93ZXJUcmFuc2Zvcm1zID0ge1xuICBtaXhvdXQ6IGZ1bmN0aW9uIG1peG91dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGFyc2U6IHtcbiAgICAgICAgdHJhbnNmb3JtOiBmdW5jdGlvbiB0cmFuc2Zvcm0odHJhbnNmb3JtU3RyaW5nKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlVHJhbnNmb3JtU3RyaW5nKHRyYW5zZm9ybVN0cmluZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICBob29rczogZnVuY3Rpb24gaG9va3MoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhcnNlTm9kZUF0dHJpYnV0ZXM6IGZ1bmN0aW9uIHBhcnNlTm9kZUF0dHJpYnV0ZXMoYWNjdW11bGF0b3IsIG5vZGUpIHtcbiAgICAgICAgdmFyIHRyYW5zZm9ybVN0cmluZyA9IG5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLWZhLXRyYW5zZm9ybScpO1xuXG4gICAgICAgIGlmICh0cmFuc2Zvcm1TdHJpbmcpIHtcbiAgICAgICAgICBhY2N1bXVsYXRvci50cmFuc2Zvcm0gPSBwYXJzZVRyYW5zZm9ybVN0cmluZyh0cmFuc2Zvcm1TdHJpbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgICAgfVxuICAgIH07XG4gIH0sXG4gIHByb3ZpZGVzOiBmdW5jdGlvbiBwcm92aWRlcyhwcm92aWRlcnMpIHtcbiAgICBwcm92aWRlcnMuZ2VuZXJhdGVBYnN0cmFjdFRyYW5zZm9ybUdyb3VwaW5nID0gZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciBtYWluID0gX3JlZi5tYWluLFxuICAgICAgICAgIHRyYW5zZm9ybSA9IF9yZWYudHJhbnNmb3JtLFxuICAgICAgICAgIGNvbnRhaW5lcldpZHRoID0gX3JlZi5jb250YWluZXJXaWR0aCxcbiAgICAgICAgICBpY29uV2lkdGggPSBfcmVmLmljb25XaWR0aDtcbiAgICAgIHZhciBvdXRlciA9IHtcbiAgICAgICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZShcIi5jb25jYXQoY29udGFpbmVyV2lkdGggLyAyLCBcIiAyNTYpXCIpXG4gICAgICB9O1xuICAgICAgdmFyIGlubmVyVHJhbnNsYXRlID0gXCJ0cmFuc2xhdGUoXCIuY29uY2F0KHRyYW5zZm9ybS54ICogMzIsIFwiLCBcIikuY29uY2F0KHRyYW5zZm9ybS55ICogMzIsIFwiKSBcIik7XG4gICAgICB2YXIgaW5uZXJTY2FsZSA9IFwic2NhbGUoXCIuY29uY2F0KHRyYW5zZm9ybS5zaXplIC8gMTYgKiAodHJhbnNmb3JtLmZsaXBYID8gLTEgOiAxKSwgXCIsIFwiKS5jb25jYXQodHJhbnNmb3JtLnNpemUgLyAxNiAqICh0cmFuc2Zvcm0uZmxpcFkgPyAtMSA6IDEpLCBcIikgXCIpO1xuICAgICAgdmFyIGlubmVyUm90YXRlID0gXCJyb3RhdGUoXCIuY29uY2F0KHRyYW5zZm9ybS5yb3RhdGUsIFwiIDAgMClcIik7XG4gICAgICB2YXIgaW5uZXIgPSB7XG4gICAgICAgIHRyYW5zZm9ybTogXCJcIi5jb25jYXQoaW5uZXJUcmFuc2xhdGUsIFwiIFwiKS5jb25jYXQoaW5uZXJTY2FsZSwgXCIgXCIpLmNvbmNhdChpbm5lclJvdGF0ZSlcbiAgICAgIH07XG4gICAgICB2YXIgcGF0aCA9IHtcbiAgICAgICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZShcIi5jb25jYXQoaWNvbldpZHRoIC8gMiAqIC0xLCBcIiAtMjU2KVwiKVxuICAgICAgfTtcbiAgICAgIHZhciBvcGVyYXRpb25zID0ge1xuICAgICAgICBvdXRlcjogb3V0ZXIsXG4gICAgICAgIGlubmVyOiBpbm5lcixcbiAgICAgICAgcGF0aDogcGF0aFxuICAgICAgfTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRhZzogJ2cnLFxuICAgICAgICBhdHRyaWJ1dGVzOiBfb2JqZWN0U3ByZWFkMih7fSwgb3BlcmF0aW9ucy5vdXRlciksXG4gICAgICAgIGNoaWxkcmVuOiBbe1xuICAgICAgICAgIHRhZzogJ2cnLFxuICAgICAgICAgIGF0dHJpYnV0ZXM6IF9vYmplY3RTcHJlYWQyKHt9LCBvcGVyYXRpb25zLmlubmVyKSxcbiAgICAgICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgICAgIHRhZzogbWFpbi5pY29uLnRhZyxcbiAgICAgICAgICAgIGNoaWxkcmVuOiBtYWluLmljb24uY2hpbGRyZW4sXG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgbWFpbi5pY29uLmF0dHJpYnV0ZXMpLCBvcGVyYXRpb25zLnBhdGgpXG4gICAgICAgICAgfV1cbiAgICAgICAgfV1cbiAgICAgIH07XG4gICAgfTtcbiAgfVxufTtcblxudmFyIEFMTF9TUEFDRSA9IHtcbiAgeDogMCxcbiAgeTogMCxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgaGVpZ2h0OiAnMTAwJSdcbn07XG5cbmZ1bmN0aW9uIGZpbGxCbGFjayhfYWJzdHJhY3QpIHtcbiAgdmFyIGZvcmNlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0cnVlO1xuXG4gIGlmIChfYWJzdHJhY3QuYXR0cmlidXRlcyAmJiAoX2Fic3RyYWN0LmF0dHJpYnV0ZXMuZmlsbCB8fCBmb3JjZSkpIHtcbiAgICBfYWJzdHJhY3QuYXR0cmlidXRlcy5maWxsID0gJ2JsYWNrJztcbiAgfVxuXG4gIHJldHVybiBfYWJzdHJhY3Q7XG59XG5cbmZ1bmN0aW9uIGRlR3JvdXAoX2Fic3RyYWN0Mikge1xuICBpZiAoX2Fic3RyYWN0Mi50YWcgPT09ICdnJykge1xuICAgIHJldHVybiBfYWJzdHJhY3QyLmNoaWxkcmVuO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBbX2Fic3RyYWN0Ml07XG4gIH1cbn1cblxudmFyIE1hc2tzID0ge1xuICBob29rczogZnVuY3Rpb24gaG9va3MoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhcnNlTm9kZUF0dHJpYnV0ZXM6IGZ1bmN0aW9uIHBhcnNlTm9kZUF0dHJpYnV0ZXMoYWNjdW11bGF0b3IsIG5vZGUpIHtcbiAgICAgICAgdmFyIG1hc2tEYXRhID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtZmEtbWFzaycpO1xuICAgICAgICB2YXIgbWFzayA9ICFtYXNrRGF0YSA/IGVtcHR5Q2Fub25pY2FsSWNvbigpIDogZ2V0Q2Fub25pY2FsSWNvbihtYXNrRGF0YS5zcGxpdCgnICcpLm1hcChmdW5jdGlvbiAoaSkge1xuICAgICAgICAgIHJldHVybiBpLnRyaW0oKTtcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIGlmICghbWFzay5wcmVmaXgpIHtcbiAgICAgICAgICBtYXNrLnByZWZpeCA9IGdldERlZmF1bHRVc2FibGVQcmVmaXgoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFjY3VtdWxhdG9yLm1hc2sgPSBtYXNrO1xuICAgICAgICBhY2N1bXVsYXRvci5tYXNrSWQgPSBub2RlLmdldEF0dHJpYnV0ZSgnZGF0YS1mYS1tYXNrLWlkJyk7XG4gICAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICBwcm92aWRlczogZnVuY3Rpb24gcHJvdmlkZXMocHJvdmlkZXJzKSB7XG4gICAgcHJvdmlkZXJzLmdlbmVyYXRlQWJzdHJhY3RNYXNrID0gZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW4sXG4gICAgICAgICAgYXR0cmlidXRlcyA9IF9yZWYuYXR0cmlidXRlcyxcbiAgICAgICAgICBtYWluID0gX3JlZi5tYWluLFxuICAgICAgICAgIG1hc2sgPSBfcmVmLm1hc2ssXG4gICAgICAgICAgZXhwbGljaXRNYXNrSWQgPSBfcmVmLm1hc2tJZCxcbiAgICAgICAgICB0cmFuc2Zvcm0gPSBfcmVmLnRyYW5zZm9ybTtcbiAgICAgIHZhciBtYWluV2lkdGggPSBtYWluLndpZHRoLFxuICAgICAgICAgIG1haW5QYXRoID0gbWFpbi5pY29uO1xuICAgICAgdmFyIG1hc2tXaWR0aCA9IG1hc2sud2lkdGgsXG4gICAgICAgICAgbWFza1BhdGggPSBtYXNrLmljb247XG4gICAgICB2YXIgdHJhbnMgPSB0cmFuc2Zvcm1Gb3JTdmcoe1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zZm9ybSxcbiAgICAgICAgY29udGFpbmVyV2lkdGg6IG1hc2tXaWR0aCxcbiAgICAgICAgaWNvbldpZHRoOiBtYWluV2lkdGhcbiAgICAgIH0pO1xuICAgICAgdmFyIG1hc2tSZWN0ID0ge1xuICAgICAgICB0YWc6ICdyZWN0JyxcbiAgICAgICAgYXR0cmlidXRlczogX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIEFMTF9TUEFDRSksIHt9LCB7XG4gICAgICAgICAgZmlsbDogJ3doaXRlJ1xuICAgICAgICB9KVxuICAgICAgfTtcbiAgICAgIHZhciBtYXNrSW5uZXJHcm91cENoaWxkcmVuTWl4aW4gPSBtYWluUGF0aC5jaGlsZHJlbiA/IHtcbiAgICAgICAgY2hpbGRyZW46IG1haW5QYXRoLmNoaWxkcmVuLm1hcChmaWxsQmxhY2spXG4gICAgICB9IDoge307XG4gICAgICB2YXIgbWFza0lubmVyR3JvdXAgPSB7XG4gICAgICAgIHRhZzogJ2cnLFxuICAgICAgICBhdHRyaWJ1dGVzOiBfb2JqZWN0U3ByZWFkMih7fSwgdHJhbnMuaW5uZXIpLFxuICAgICAgICBjaGlsZHJlbjogW2ZpbGxCbGFjayhfb2JqZWN0U3ByZWFkMih7XG4gICAgICAgICAgdGFnOiBtYWluUGF0aC50YWcsXG4gICAgICAgICAgYXR0cmlidXRlczogX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIG1haW5QYXRoLmF0dHJpYnV0ZXMpLCB0cmFucy5wYXRoKVxuICAgICAgICB9LCBtYXNrSW5uZXJHcm91cENoaWxkcmVuTWl4aW4pKV1cbiAgICAgIH07XG4gICAgICB2YXIgbWFza091dGVyR3JvdXAgPSB7XG4gICAgICAgIHRhZzogJ2cnLFxuICAgICAgICBhdHRyaWJ1dGVzOiBfb2JqZWN0U3ByZWFkMih7fSwgdHJhbnMub3V0ZXIpLFxuICAgICAgICBjaGlsZHJlbjogW21hc2tJbm5lckdyb3VwXVxuICAgICAgfTtcbiAgICAgIHZhciBtYXNrSWQgPSBcIm1hc2stXCIuY29uY2F0KGV4cGxpY2l0TWFza0lkIHx8IG5leHRVbmlxdWVJZCgpKTtcbiAgICAgIHZhciBjbGlwSWQgPSBcImNsaXAtXCIuY29uY2F0KGV4cGxpY2l0TWFza0lkIHx8IG5leHRVbmlxdWVJZCgpKTtcbiAgICAgIHZhciBtYXNrVGFnID0ge1xuICAgICAgICB0YWc6ICdtYXNrJyxcbiAgICAgICAgYXR0cmlidXRlczogX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIEFMTF9TUEFDRSksIHt9LCB7XG4gICAgICAgICAgaWQ6IG1hc2tJZCxcbiAgICAgICAgICBtYXNrVW5pdHM6ICd1c2VyU3BhY2VPblVzZScsXG4gICAgICAgICAgbWFza0NvbnRlbnRVbml0czogJ3VzZXJTcGFjZU9uVXNlJ1xuICAgICAgICB9KSxcbiAgICAgICAgY2hpbGRyZW46IFttYXNrUmVjdCwgbWFza091dGVyR3JvdXBdXG4gICAgICB9O1xuICAgICAgdmFyIGRlZnMgPSB7XG4gICAgICAgIHRhZzogJ2RlZnMnLFxuICAgICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgICB0YWc6ICdjbGlwUGF0aCcsXG4gICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgaWQ6IGNsaXBJZFxuICAgICAgICAgIH0sXG4gICAgICAgICAgY2hpbGRyZW46IGRlR3JvdXAobWFza1BhdGgpXG4gICAgICAgIH0sIG1hc2tUYWddXG4gICAgICB9O1xuICAgICAgY2hpbGRyZW4ucHVzaChkZWZzLCB7XG4gICAgICAgIHRhZzogJ3JlY3QnLFxuICAgICAgICBhdHRyaWJ1dGVzOiBfb2JqZWN0U3ByZWFkMih7XG4gICAgICAgICAgZmlsbDogJ2N1cnJlbnRDb2xvcicsXG4gICAgICAgICAgJ2NsaXAtcGF0aCc6IFwidXJsKCNcIi5jb25jYXQoY2xpcElkLCBcIilcIiksXG4gICAgICAgICAgbWFzazogXCJ1cmwoI1wiLmNvbmNhdChtYXNrSWQsIFwiKVwiKVxuICAgICAgICB9LCBBTExfU1BBQ0UpXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICAgICAgYXR0cmlidXRlczogYXR0cmlidXRlc1xuICAgICAgfTtcbiAgICB9O1xuICB9XG59O1xuXG52YXIgTWlzc2luZ0ljb25JbmRpY2F0b3IgPSB7XG4gIHByb3ZpZGVzOiBmdW5jdGlvbiBwcm92aWRlcyhwcm92aWRlcnMpIHtcbiAgICB2YXIgcmVkdWNlTW90aW9uID0gZmFsc2U7XG5cbiAgICBpZiAoV0lORE9XLm1hdGNoTWVkaWEpIHtcbiAgICAgIHJlZHVjZU1vdGlvbiA9IFdJTkRPVy5tYXRjaE1lZGlhKCcocHJlZmVycy1yZWR1Y2VkLW1vdGlvbjogcmVkdWNlKScpLm1hdGNoZXM7XG4gICAgfVxuXG4gICAgcHJvdmlkZXJzLm1pc3NpbmdJY29uQWJzdHJhY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZ0NoaWxkcmVuID0gW107XG4gICAgICB2YXIgRklMTCA9IHtcbiAgICAgICAgZmlsbDogJ2N1cnJlbnRDb2xvcidcbiAgICAgIH07XG4gICAgICB2YXIgQU5JTUFUSU9OX0JBU0UgPSB7XG4gICAgICAgIGF0dHJpYnV0ZVR5cGU6ICdYTUwnLFxuICAgICAgICByZXBlYXRDb3VudDogJ2luZGVmaW5pdGUnLFxuICAgICAgICBkdXI6ICcycydcbiAgICAgIH07IC8vIFJpbmdcblxuICAgICAgZ0NoaWxkcmVuLnB1c2goe1xuICAgICAgICB0YWc6ICdwYXRoJyxcbiAgICAgICAgYXR0cmlidXRlczogX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIEZJTEwpLCB7fSwge1xuICAgICAgICAgIGQ6ICdNMTU2LjUsNDQ3LjdsLTEyLjYsMjkuNWMtMTguNy05LjUtMzUuOS0yMS4yLTUxLjUtMzQuOWwyMi43LTIyLjdDMTI3LjYsNDMwLjUsMTQxLjUsNDQwLDE1Ni41LDQ0Ny43eiBNNDAuNiwyNzJIOC41IGMxLjQsMjEuMiw1LjQsNDEuNywxMS43LDYxLjFMNTAsMzIxLjJDNDUuMSwzMDUuNSw0MS44LDI4OSw0MC42LDI3MnogTTQwLjYsMjQwYzEuNC0xOC44LDUuMi0zNywxMS4xLTU0LjFsLTI5LjUtMTIuNiBDMTQuNywxOTQuMywxMCwyMTYuNyw4LjUsMjQwSDQwLjZ6IE02NC4zLDE1Ni41YzcuOC0xNC45LDE3LjItMjguOCwyOC4xLTQxLjVMNjkuNyw5Mi4zYy0xMy43LDE1LjYtMjUuNSwzMi44LTM0LjksNTEuNSBMNjQuMywxNTYuNXogTTM5Nyw0MTkuNmMtMTMuOSwxMi0yOS40LDIyLjMtNDYuMSwzMC40bDExLjksMjkuOGMyMC43LTkuOSwzOS44LTIyLjYsNTYuOS0zNy42TDM5Nyw0MTkuNnogTTExNSw5Mi40IGMxMy45LTEyLDI5LjQtMjIuMyw0Ni4xLTMwLjRsLTExLjktMjkuOGMtMjAuNyw5LjktMzkuOCwyMi42LTU2LjgsMzcuNkwxMTUsOTIuNHogTTQ0Ny43LDM1NS41Yy03LjgsMTQuOS0xNy4yLDI4LjgtMjguMSw0MS41IGwyMi43LDIyLjdjMTMuNy0xNS42LDI1LjUtMzIuOSwzNC45LTUxLjVMNDQ3LjcsMzU1LjV6IE00NzEuNCwyNzJjLTEuNCwxOC44LTUuMiwzNy0xMS4xLDU0LjFsMjkuNSwxMi42IGM3LjUtMjEuMSwxMi4yLTQzLjUsMTMuNi02Ni44SDQ3MS40eiBNMzIxLjIsNDYyYy0xNS43LDUtMzIuMiw4LjItNDkuMiw5LjR2MzIuMWMyMS4yLTEuNCw0MS43LTUuNCw2MS4xLTExLjdMMzIxLjIsNDYyeiBNMjQwLDQ3MS40Yy0xOC44LTEuNC0zNy01LjItNTQuMS0xMS4xbC0xMi42LDI5LjVjMjEuMSw3LjUsNDMuNSwxMi4yLDY2LjgsMTMuNlY0NzEuNHogTTQ2MiwxOTAuOGM1LDE1LjcsOC4yLDMyLjIsOS40LDQ5LjJoMzIuMSBjLTEuNC0yMS4yLTUuNC00MS43LTExLjctNjEuMUw0NjIsMTkwLjh6IE05Mi40LDM5N2MtMTItMTMuOS0yMi4zLTI5LjQtMzAuNC00Ni4xbC0yOS44LDExLjljOS45LDIwLjcsMjIuNiwzOS44LDM3LjYsNTYuOSBMOTIuNCwzOTd6IE0yNzIsNDAuNmMxOC44LDEuNCwzNi45LDUuMiw1NC4xLDExLjFsMTIuNi0yOS41QzMxNy43LDE0LjcsMjk1LjMsMTAsMjcyLDguNVY0MC42eiBNMTkwLjgsNTAgYzE1LjctNSwzMi4yLTguMiw0OS4yLTkuNFY4LjVjLTIxLjIsMS40LTQxLjcsNS40LTYxLjEsMTEuN0wxOTAuOCw1MHogTTQ0Mi4zLDkyLjNMNDE5LjYsMTE1YzEyLDEzLjksMjIuMywyOS40LDMwLjUsNDYuMSBsMjkuOC0xMS45QzQ3MCwxMjguNSw0NTcuMywxMDkuNCw0NDIuMyw5Mi4zeiBNMzk3LDkyLjRsMjIuNy0yMi43Yy0xNS42LTEzLjctMzIuOC0yNS41LTUxLjUtMzQuOWwtMTIuNiwyOS41IEMzNzAuNCw3Mi4xLDM4NC40LDgxLjUsMzk3LDkyLjR6J1xuICAgICAgICB9KVxuICAgICAgfSk7XG5cbiAgICAgIHZhciBPUEFDSVRZX0FOSU1BVEUgPSBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgQU5JTUFUSU9OX0JBU0UpLCB7fSwge1xuICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnb3BhY2l0eSdcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgZG90ID0ge1xuICAgICAgICB0YWc6ICdjaXJjbGUnLFxuICAgICAgICBhdHRyaWJ1dGVzOiBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgRklMTCksIHt9LCB7XG4gICAgICAgICAgY3g6ICcyNTYnLFxuICAgICAgICAgIGN5OiAnMzY0JyxcbiAgICAgICAgICByOiAnMjgnXG4gICAgICAgIH0pLFxuICAgICAgICBjaGlsZHJlbjogW11cbiAgICAgIH07XG5cbiAgICAgIGlmICghcmVkdWNlTW90aW9uKSB7XG4gICAgICAgIGRvdC5jaGlsZHJlbi5wdXNoKHtcbiAgICAgICAgICB0YWc6ICdhbmltYXRlJyxcbiAgICAgICAgICBhdHRyaWJ1dGVzOiBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgQU5JTUFUSU9OX0JBU0UpLCB7fSwge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3InLFxuICAgICAgICAgICAgdmFsdWVzOiAnMjg7MTQ7Mjg7Mjg7MTQ7Mjg7J1xuICAgICAgICAgIH0pXG4gICAgICAgIH0sIHtcbiAgICAgICAgICB0YWc6ICdhbmltYXRlJyxcbiAgICAgICAgICBhdHRyaWJ1dGVzOiBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgT1BBQ0lUWV9BTklNQVRFKSwge30sIHtcbiAgICAgICAgICAgIHZhbHVlczogJzE7MDsxOzE7MDsxOydcbiAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZ0NoaWxkcmVuLnB1c2goZG90KTtcbiAgICAgIGdDaGlsZHJlbi5wdXNoKHtcbiAgICAgICAgdGFnOiAncGF0aCcsXG4gICAgICAgIGF0dHJpYnV0ZXM6IF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBGSUxMKSwge30sIHtcbiAgICAgICAgICBvcGFjaXR5OiAnMScsXG4gICAgICAgICAgZDogJ00yNjMuNywzMTJoLTE2Yy02LjYsMC0xMi01LjQtMTItMTJjMC03MSw3Ny40LTYzLjksNzcuNC0xMDcuOGMwLTIwLTE3LjgtNDAuMi01Ny40LTQwLjJjLTI5LjEsMC00NC4zLDkuNi01OS4yLDI4LjcgYy0zLjksNS0xMS4xLDYtMTYuMiwyLjRsLTEzLjEtOS4yYy01LjYtMy45LTYuOS0xMS44LTIuNi0xNy4yYzIxLjItMjcuMiw0Ni40LTQ0LjcsOTEuMi00NC43YzUyLjMsMCw5Ny40LDI5LjgsOTcuNCw4MC4yIGMwLDY3LjYtNzcuNCw2My41LTc3LjQsMTA3LjhDMjc1LjcsMzA2LjYsMjcwLjMsMzEyLDI2My43LDMxMnonXG4gICAgICAgIH0pLFxuICAgICAgICBjaGlsZHJlbjogcmVkdWNlTW90aW9uID8gW10gOiBbe1xuICAgICAgICAgIHRhZzogJ2FuaW1hdGUnLFxuICAgICAgICAgIGF0dHJpYnV0ZXM6IF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBPUEFDSVRZX0FOSU1BVEUpLCB7fSwge1xuICAgICAgICAgICAgdmFsdWVzOiAnMTswOzA7MDswOzE7J1xuICAgICAgICAgIH0pXG4gICAgICAgIH1dXG4gICAgICB9KTtcblxuICAgICAgaWYgKCFyZWR1Y2VNb3Rpb24pIHtcbiAgICAgICAgLy8gRXhjbGFtYXRpb25cbiAgICAgICAgZ0NoaWxkcmVuLnB1c2goe1xuICAgICAgICAgIHRhZzogJ3BhdGgnLFxuICAgICAgICAgIGF0dHJpYnV0ZXM6IF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBGSUxMKSwge30sIHtcbiAgICAgICAgICAgIG9wYWNpdHk6ICcwJyxcbiAgICAgICAgICAgIGQ6ICdNMjMyLjUsMTM0LjVsNywxNjhjMC4zLDYuNCw1LjYsMTEuNSwxMiwxMS41aDljNi40LDAsMTEuNy01LjEsMTItMTEuNWw3LTE2OGMwLjMtNi44LTUuMi0xMi41LTEyLTEyLjVoLTIzIEMyMzcuNywxMjIsMjMyLjIsMTI3LjcsMjMyLjUsMTM0LjV6J1xuICAgICAgICAgIH0pLFxuICAgICAgICAgIGNoaWxkcmVuOiBbe1xuICAgICAgICAgICAgdGFnOiAnYW5pbWF0ZScsXG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgT1BBQ0lUWV9BTklNQVRFKSwge30sIHtcbiAgICAgICAgICAgICAgdmFsdWVzOiAnMDswOzE7MTswOzA7J1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdGFnOiAnZycsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAnY2xhc3MnOiAnbWlzc2luZydcbiAgICAgICAgfSxcbiAgICAgICAgY2hpbGRyZW46IGdDaGlsZHJlblxuICAgICAgfTtcbiAgICB9O1xuICB9XG59O1xuXG52YXIgU3ZnU3ltYm9scyA9IHtcbiAgaG9va3M6IGZ1bmN0aW9uIGhvb2tzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXJzZU5vZGVBdHRyaWJ1dGVzOiBmdW5jdGlvbiBwYXJzZU5vZGVBdHRyaWJ1dGVzKGFjY3VtdWxhdG9yLCBub2RlKSB7XG4gICAgICAgIHZhciBzeW1ib2xEYXRhID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtZmEtc3ltYm9sJyk7XG4gICAgICAgIHZhciBzeW1ib2wgPSBzeW1ib2xEYXRhID09PSBudWxsID8gZmFsc2UgOiBzeW1ib2xEYXRhID09PSAnJyA/IHRydWUgOiBzeW1ib2xEYXRhO1xuICAgICAgICBhY2N1bXVsYXRvclsnc3ltYm9sJ10gPSBzeW1ib2w7XG4gICAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59O1xuXG52YXIgcGx1Z2lucyA9IFtJbmplY3RDU1MsIFJlcGxhY2VFbGVtZW50cywgTGF5ZXJzLCBMYXllcnNDb3VudGVyLCBMYXllcnNUZXh0LCBQc2V1ZG9FbGVtZW50cywgTXV0YXRpb25PYnNlcnZlciQxLCBQb3dlclRyYW5zZm9ybXMsIE1hc2tzLCBNaXNzaW5nSWNvbkluZGljYXRvciwgU3ZnU3ltYm9sc107XG5cbnJlZ2lzdGVyUGx1Z2lucyhwbHVnaW5zLCB7XG4gIG1peG91dHNUbzogYXBpXG59KTtcbnZhciBub0F1dG8kMSA9IGFwaS5ub0F1dG87XG52YXIgY29uZmlnJDEgPSBhcGkuY29uZmlnO1xudmFyIGxpYnJhcnkkMSA9IGFwaS5saWJyYXJ5O1xudmFyIGRvbSQxID0gYXBpLmRvbTtcbnZhciBwYXJzZSQxID0gYXBpLnBhcnNlO1xudmFyIGZpbmRJY29uRGVmaW5pdGlvbiQxID0gYXBpLmZpbmRJY29uRGVmaW5pdGlvbjtcbnZhciB0b0h0bWwkMSA9IGFwaS50b0h0bWw7XG52YXIgaWNvbiA9IGFwaS5pY29uO1xudmFyIGxheWVyID0gYXBpLmxheWVyO1xudmFyIHRleHQgPSBhcGkudGV4dDtcbnZhciBjb3VudGVyID0gYXBpLmNvdW50ZXI7XG5cbmV4cG9ydCB7IG5vQXV0byQxIGFzIG5vQXV0bywgY29uZmlnJDEgYXMgY29uZmlnLCBsaWJyYXJ5JDEgYXMgbGlicmFyeSwgZG9tJDEgYXMgZG9tLCBwYXJzZSQxIGFzIHBhcnNlLCBmaW5kSWNvbkRlZmluaXRpb24kMSBhcyBmaW5kSWNvbkRlZmluaXRpb24sIHRvSHRtbCQxIGFzIHRvSHRtbCwgaWNvbiwgbGF5ZXIsIHRleHQsIGNvdW50ZXIsIGFwaSB9O1xuIl0sIm5hbWVzIjpbIm93bktleXMiLCJvYmplY3QiLCJlbnVtZXJhYmxlT25seSIsImtleXMiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW1ib2xzIiwiZmlsdGVyIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQyIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImZvckVhY2giLCJrZXkiLCJfZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlZmluZVByb3BlcnR5IiwiX3R5cGVvZiIsIm9iaiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJfd3JhcFJlZ0V4cCIsInJlIiwiZ3JvdXBzIiwiQmFiZWxSZWdFeHAiLCJfc3VwZXIiLCJSZWdFeHAiLCJfZ3JvdXBzIiwiV2Vha01hcCIsImZsYWdzIiwiX3RoaXMiLCJzZXQiLCJnZXQiLCJfc2V0UHJvdG90eXBlT2YiLCJidWlsZEdyb3VwcyIsInJlc3VsdCIsImciLCJyZWR1Y2UiLCJuYW1lIiwiY3JlYXRlIiwiX2luaGVyaXRzIiwiZXhlYyIsInN0ciIsImNhbGwiLCJyZXBsYWNlIiwic3Vic3RpdHV0aW9uIiwiXyIsImFyZ3MiLCJzbGljZSIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfZGVmaW5lUHJvcGVydGllcyIsInByb3BzIiwiZGVzY3JpcHRvciIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiX2NyZWF0ZUNsYXNzIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwidmFsdWUiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJvIiwicCIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX3NsaWNlZFRvQXJyYXkiLCJhcnIiLCJfYXJyYXlXaXRoSG9sZXMiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVSZXN0IiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiX2FycmF5V2l0aG91dEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVNwcmVhZCIsIkFycmF5IiwiaXNBcnJheSIsIl9hcnJheUxpa2VUb0FycmF5IiwiaXRlciIsImZyb20iLCJfaSIsIl9hcnIiLCJfbiIsIl9kIiwiX3MiLCJfZSIsIm5leHQiLCJkb25lIiwiZXJyIiwibWluTGVuIiwibiIsInRvU3RyaW5nIiwidGVzdCIsImxlbiIsImFycjIiLCJub29wIiwiX1dJTkRPVyIsIl9ET0NVTUVOVCIsIl9NVVRBVElPTl9PQlNFUlZFUiIsIl9QRVJGT1JNQU5DRSIsIm1hcmsiLCJtZWFzdXJlIiwid2luZG93IiwiZG9jdW1lbnQiLCJNdXRhdGlvbk9ic2VydmVyIiwicGVyZm9ybWFuY2UiLCJlIiwiX3JlZiIsIm5hdmlnYXRvciIsIl9yZWYkdXNlckFnZW50IiwidXNlckFnZW50IiwiV0lORE9XIiwiRE9DVU1FTlQiLCJNVVRBVElPTl9PQlNFUlZFUiIsIlBFUkZPUk1BTkNFIiwiSVNfQlJPV1NFUiIsIklTX0RPTSIsImRvY3VtZW50RWxlbWVudCIsImhlYWQiLCJhZGRFdmVudExpc3RlbmVyIiwiY3JlYXRlRWxlbWVudCIsIklTX0lFIiwiaW5kZXhPZiIsIl9mYW1pbHlQcm94eSIsIl9mYW1pbHlQcm94eTIiLCJfZmFtaWx5UHJveHkzIiwiX2ZhbWlseVByb3h5NCIsIl9mYW1pbHlQcm94eTUiLCJOQU1FU1BBQ0VfSURFTlRJRklFUiIsIlVOSVRTX0lOX0dSSUQiLCJERUZBVUxUX0NTU19QUkVGSVgiLCJERUZBVUxUX1JFUExBQ0VNRU5UX0NMQVNTIiwiREFUQV9GQV9JMlNWRyIsIkRBVEFfRkFfUFNFVURPX0VMRU1FTlQiLCJEQVRBX0ZBX1BTRVVET19FTEVNRU5UX1BFTkRJTkciLCJEQVRBX1BSRUZJWCIsIkRBVEFfSUNPTiIsIkhUTUxfQ0xBU1NfSTJTVkdfQkFTRV9DTEFTUyIsIk1VVEFUSU9OX0FQUFJPQUNIX0FTWU5DIiwiVEFHTkFNRVNfVE9fU0tJUF9GT1JfUFNFVURPRUxFTUVOVFMiLCJQUk9EVUNUSU9OIiwicHJvY2VzcyIsIkZBTUlMWV9DTEFTU0lDIiwiRkFNSUxZX1NIQVJQIiwiRkFNSUxJRVMiLCJmYW1pbHlQcm94eSIsIlByb3h5IiwicHJvcCIsIlBSRUZJWF9UT19TVFlMRSIsIlNUWUxFX1RPX1BSRUZJWCIsIlBSRUZJWF9UT19MT05HX1NUWUxFIiwiTE9OR19TVFlMRV9UT19QUkVGSVgiLCJJQ09OX1NFTEVDVElPTl9TWU5UQVhfUEFUVEVSTiIsIkxBWUVSU19URVhUX0NMQVNTTkFNRSIsIkZPTlRfRkFNSUxZX1BBVFRFUk4iLCJGT05UX1dFSUdIVF9UT19QUkVGSVgiLCJvbmVUb1RlbiIsIm9uZVRvVHdlbnR5IiwiY29uY2F0IiwiQVRUUklCVVRFU19XQVRDSEVEX0ZPUl9NVVRBVElPTiIsIkRVT1RPTkVfQ0xBU1NFUyIsIkdST1VQIiwiU1dBUF9PUEFDSVRZIiwiUFJJTUFSWSIsIlNFQ09OREFSWSIsInByZWZpeGVzIiwiU2V0IiwibWFwIiwiYWRkIiwiYmluZCIsIlJFU0VSVkVEX0NMQVNTRVMiLCJpbml0aWFsIiwiRm9udEF3ZXNvbWVDb25maWciLCJnZXRBdHRyQ29uZmlnIiwiYXR0ciIsImVsZW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiZ2V0QXR0cmlidXRlIiwiY29lcmNlIiwidmFsIiwiYXR0cnMiLCJfcmVmMiIsInVuZGVmaW5lZCIsIl9kZWZhdWx0Iiwic3R5bGVEZWZhdWx0IiwiZmFtaWx5RGVmYXVsdCIsImNzc1ByZWZpeCIsInJlcGxhY2VtZW50Q2xhc3MiLCJhdXRvUmVwbGFjZVN2ZyIsImF1dG9BZGRDc3MiLCJhdXRvQTExeSIsInNlYXJjaFBzZXVkb0VsZW1lbnRzIiwib2JzZXJ2ZU11dGF0aW9ucyIsIm11dGF0ZUFwcHJvYWNoIiwia2VlcE9yaWdpbmFsU291cmNlIiwibWVhc3VyZVBlcmZvcm1hbmNlIiwic2hvd01pc3NpbmdJY29ucyIsImZhbWlseVByZWZpeCIsIl9jb25maWciLCJjb25maWciLCJfb25DaGFuZ2VDYiIsImNiIiwib25DaGFuZ2UiLCJzcGxpY2UiLCJkIiwibWVhbmluZ2xlc3NUcmFuc2Zvcm0iLCJzaXplIiwieCIsInkiLCJyb3RhdGUiLCJmbGlwWCIsImZsaXBZIiwiaW5zZXJ0Q3NzIiwiY3NzIiwic3R5bGUiLCJzZXRBdHRyaWJ1dGUiLCJpbm5lckhUTUwiLCJoZWFkQ2hpbGRyZW4iLCJjaGlsZE5vZGVzIiwiYmVmb3JlQ2hpbGQiLCJjaGlsZCIsInRhZ05hbWUiLCJ0b1VwcGVyQ2FzZSIsImluc2VydEJlZm9yZSIsImlkUG9vbCIsIm5leHRVbmlxdWVJZCIsImlkIiwiTWF0aCIsInJhbmRvbSIsInRvQXJyYXkiLCJhcnJheSIsImNsYXNzQXJyYXkiLCJub2RlIiwiY2xhc3NMaXN0Iiwic3BsaXQiLCJodG1sRXNjYXBlIiwiam9pbkF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwiYWNjIiwiYXR0cmlidXRlTmFtZSIsInRyaW0iLCJqb2luU3R5bGVzIiwic3R5bGVzIiwic3R5bGVOYW1lIiwidHJhbnNmb3JtSXNNZWFuaW5nZnVsIiwidHJhbnNmb3JtIiwidHJhbnNmb3JtRm9yU3ZnIiwiY29udGFpbmVyV2lkdGgiLCJpY29uV2lkdGgiLCJvdXRlciIsImlubmVyVHJhbnNsYXRlIiwiaW5uZXJTY2FsZSIsImlubmVyUm90YXRlIiwiaW5uZXIiLCJwYXRoIiwidHJhbnNmb3JtRm9yQ3NzIiwiX3JlZjIkd2lkdGgiLCJ3aWR0aCIsIl9yZWYyJGhlaWdodCIsImhlaWdodCIsIl9yZWYyJHN0YXJ0Q2VudGVyZWQiLCJzdGFydENlbnRlcmVkIiwiYmFzZVN0eWxlcyIsImRjcCIsImRyYyIsImZwIiwicmMiLCJzIiwiZFBhdHQiLCJjdXN0b21Qcm9wUGF0dCIsInJQYXR0IiwiX2Nzc0luc2VydGVkIiwiZW5zdXJlQ3NzIiwiSW5qZWN0Q1NTIiwibWl4b3V0IiwiZG9tIiwiaG9va3MiLCJiZWZvcmVET01FbGVtZW50Q3JlYXRpb24iLCJiZWZvcmVJMnN2ZyIsInciLCJzaGltcyIsIm5hbWVzcGFjZSIsImZ1bmN0aW9ucyIsImxpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImxvYWRlZCIsImZuIiwiZG9TY3JvbGwiLCJyZWFkeVN0YXRlIiwiZG9tcmVhZHkiLCJzZXRUaW1lb3V0IiwidG9IdG1sIiwiYWJzdHJhY3ROb2RlcyIsInRhZyIsIl9hYnN0cmFjdE5vZGVzJGF0dHJpYiIsIl9hYnN0cmFjdE5vZGVzJGNoaWxkciIsImNoaWxkcmVuIiwiam9pbiIsImljb25Gcm9tTWFwcGluZyIsIm1hcHBpbmciLCJwcmVmaXgiLCJpY29uTmFtZSIsImljb24iLCJiaW5kSW50ZXJuYWw0IiwiZnVuYyIsInRoaXNDb250ZXh0IiwiYSIsImIiLCJjIiwiZmFzdFJlZHVjZU9iamVjdCIsInN1YmplY3QiLCJpbml0aWFsVmFsdWUiLCJ1Y3MyZGVjb2RlIiwic3RyaW5nIiwib3V0cHV0IiwiY291bnRlciIsImNoYXJDb2RlQXQiLCJleHRyYSIsInRvSGV4IiwidW5pY29kZSIsImRlY29kZWQiLCJjb2RlUG9pbnRBdCIsImluZGV4IiwiZmlyc3QiLCJzZWNvbmQiLCJub3JtYWxpemVJY29ucyIsImljb25zIiwiZXhwYW5kZWQiLCJkZWZpbmVJY29ucyIsInBhcmFtcyIsIl9wYXJhbXMkc2tpcEhvb2tzIiwic2tpcEhvb2tzIiwibm9ybWFsaXplZCIsImFkZFBhY2siLCJkdW90b25lUGF0aFJlIiwiZDEiLCJkMiIsImNsczEiLCJjbHMyIiwiX0xPTkdfU1RZTEUiLCJfUFJFRklYRVMiLCJfUFJFRklYRVNfRk9SX0ZBTUlMWSIsIkxPTkdfU1RZTEUiLCJ2YWx1ZXMiLCJfZGVmYXVsdFVzYWJsZVByZWZpeCIsIl9ieVVuaWNvZGUiLCJfYnlMaWdhdHVyZSIsIl9ieU9sZE5hbWUiLCJfYnlPbGRVbmljb2RlIiwiX2J5QWxpYXMiLCJQUkVGSVhFUyIsImlzUmVzZXJ2ZWQiLCJnZXRJY29uTmFtZSIsImNscyIsInBhcnRzIiwiYnVpbGQiLCJsb29rdXAiLCJyZWR1Y2VyIiwiYWxpYXNlcyIsImFsaWFzIiwiaGFzUmVndWxhciIsImF1dG9GZXRjaFN2ZyIsInNoaW1Mb29rdXBzIiwic2hpbSIsIm1heWJlTmFtZU1heWJlVW5pY29kZSIsIm5hbWVzIiwidW5pY29kZXMiLCJnZXRDYW5vbmljYWxQcmVmaXgiLCJmYW1pbHkiLCJieVVuaWNvZGUiLCJieUxpZ2F0dXJlIiwibGlnYXR1cmUiLCJieUFsaWFzIiwiYnlPbGROYW1lIiwiYnlPbGRVbmljb2RlIiwib2xkVW5pY29kZSIsIm5ld1VuaWNvZGUiLCJnZXREZWZhdWx0VXNhYmxlUHJlZml4IiwiZW1wdHlDYW5vbmljYWxJY29uIiwicmVzdCIsInN0eWxlT3JQcmVmaXgiLCJfcGFyYW1zJGZhbWlseSIsImRlZmluZWQiLCJQUkVGSVhFU19GT1JfRkFNSUxZIiwiZ2V0Q2Fub25pY2FsSWNvbiIsIl9mYW1Qcm9wcyIsIl9wYXJhbXMkc2tpcExvb2t1cHMiLCJza2lwTG9va3VwcyIsImZhbVByb3BzIiwiZ2l2ZW5QcmVmaXgiLCJpbmNsdWRlcyIsInNvbWUiLCJ2IiwiY2Fub25pY2FsIiwiYWxpYXNJY29uTmFtZSIsIkxpYnJhcnkiLCJkZWZpbml0aW9ucyIsIl9sZW4iLCJfa2V5IiwiYWRkaXRpb25zIiwiX3B1bGxEZWZpbml0aW9ucyIsImxvbmdQcmVmaXgiLCJyZXNldCIsImRlZmluaXRpb24iLCJfbm9ybWFsaXplZCRrZXkiLCJfcGx1Z2lucyIsIl9ob29rcyIsInByb3ZpZGVycyIsImRlZmF1bHRQcm92aWRlcktleXMiLCJyZWdpc3RlclBsdWdpbnMiLCJuZXh0UGx1Z2lucyIsIm1peG91dHNUbyIsImsiLCJwbHVnaW4iLCJ0ayIsInNrIiwiaG9vayIsInByb3ZpZGVzIiwiY2hhaW5Ib29rcyIsImFjY3VtdWxhdG9yIiwiaG9va0ZucyIsImhvb2tGbiIsImNhbGxIb29rcyIsIl9sZW4yIiwiX2tleTIiLCJjYWxsUHJvdmlkZWQiLCJmaW5kSWNvbkRlZmluaXRpb24iLCJpY29uTG9va3VwIiwibGlicmFyeSIsIm5vQXV0byIsImkyc3ZnIiwiUHJvbWlzZSIsInJlamVjdCIsIndhdGNoIiwiYXV0b1JlcGxhY2VTdmdSb290IiwiYXV0b1JlcGxhY2UiLCJwYXJzZSIsIl9pY29uIiwibWF0Y2giLCJjYW5vbmljYWxJY29uIiwiX3ByZWZpeCIsImFwaSIsIl9wYXJhbXMkYXV0b1JlcGxhY2VTdiIsImRvbVZhcmlhbnRzIiwiYWJzdHJhY3RDcmVhdG9yIiwiYWJzdHJhY3QiLCJjb250YWluZXIiLCJodG1sIiwiYXNJY29uIiwibWFpbiIsIm1hc2siLCJmb3VuZCIsIm9mZnNldCIsImFzU3ltYm9sIiwic3ltYm9sIiwibWFrZUlubGluZVN2Z0Fic3RyYWN0IiwiX3BhcmFtcyRpY29ucyIsInRpdGxlIiwibWFza0lkIiwidGl0bGVJZCIsIl9wYXJhbXMkd2F0Y2hhYmxlIiwid2F0Y2hhYmxlIiwiaXNVcGxvYWRlZEljb24iLCJhdHRyQ2xhc3MiLCJjbGFzc2VzIiwiY29udGVudCIsInJvbGUiLCJ1cGxvYWRlZEljb25XaWR0aFN0eWxlIiwibWFrZUxheWVyc1RleHRBYnN0cmFjdCIsIl9wYXJhbXMkd2F0Y2hhYmxlMiIsInN0eWxlU3RyaW5nIiwiY2xhc3MiLCJtYWtlTGF5ZXJzQ291bnRlckFic3RyYWN0Iiwic3R5bGVzJDEiLCJhc0ZvdW5kSWNvbiIsIl9pY29uJHNsaWNlIiwiX2ljb24kc2xpY2UyIiwidmVjdG9yRGF0YSIsImZpbGwiLCJtaXNzaW5nSWNvblJlc29sdXRpb25NaXhpbiIsIm1heWJlTm90aWZ5TWlzc2luZyIsImNvbnNvbGUiLCJlcnJvciIsImZpbmRJY29uIiwicmVzb2x2ZSIsIm5vb3AkMSIsInByZWFtYmxlIiwiYmVnaW4iLCJlbmQiLCJwZXJmIiwibm9vcCQyIiwiaXNXYXRjaGVkIiwiaGFzUHJlZml4QW5kSWNvbiIsImhhc0JlZW5SZXBsYWNlZCIsImNvbnRhaW5zIiwiZ2V0TXV0YXRvciIsIm11dGF0b3JzIiwibXV0YXRvciIsImNyZWF0ZUVsZW1lbnROUyIsImNvbnZlcnRTVkciLCJhYnN0cmFjdE9iaiIsIl9wYXJhbXMkY2VGbiIsImNlRm4iLCJjcmVhdGVUZXh0Tm9kZSIsImFwcGVuZENoaWxkIiwibm9kZUFzQ29tbWVudCIsImNvbW1lbnQiLCJvdXRlckhUTUwiLCJtdXRhdGlvbiIsInBhcmVudE5vZGUiLCJfYWJzdHJhY3QiLCJjcmVhdGVDb21tZW50IiwicmVwbGFjZUNoaWxkIiwicmVtb3ZlIiwibmVzdCIsIl9hYnN0cmFjdDIiLCJmb3JTdmciLCJzcGxpdENsYXNzZXMiLCJ0b1N2ZyIsInRvTm9kZSIsInJlbW92ZUF0dHJpYnV0ZSIsIm5ld0lubmVySFRNTCIsInBlcmZvcm1PcGVyYXRpb25TeW5jIiwib3AiLCJwZXJmb3JtIiwibXV0YXRpb25zIiwiY2FsbGJhY2siLCJjYWxsYmFja0Z1bmN0aW9uIiwiZnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJkaXNhYmxlZCIsImRpc2FibGVPYnNlcnZhdGlvbiIsImVuYWJsZU9ic2VydmF0aW9uIiwibW8iLCJvYnNlcnZlIiwib3B0aW9ucyIsIl9vcHRpb25zJHRyZWVDYWxsYmFjayIsInRyZWVDYWxsYmFjayIsIl9vcHRpb25zJG5vZGVDYWxsYmFjayIsIm5vZGVDYWxsYmFjayIsIl9vcHRpb25zJHBzZXVkb0VsZW1lbiIsInBzZXVkb0VsZW1lbnRzQ2FsbGJhY2siLCJfb3B0aW9ucyRvYnNlcnZlTXV0YXQiLCJvYnNlcnZlTXV0YXRpb25zUm9vdCIsIm9iamVjdHMiLCJkZWZhdWx0UHJlZml4IiwibXV0YXRpb25SZWNvcmQiLCJ0eXBlIiwiYWRkZWROb2RlcyIsIl9nZXRDYW5vbmljYWxJY29uIiwiY2hpbGRMaXN0IiwiY2hhcmFjdGVyRGF0YSIsInN1YnRyZWUiLCJkaXNjb25uZWN0Iiwic3R5bGVQYXJzZXIiLCJjbGFzc1BhcnNlciIsImV4aXN0aW5nUHJlZml4IiwiZXhpc3RpbmdJY29uTmFtZSIsImlubmVyVGV4dCIsImZpcnN0Q2hpbGQiLCJub2RlVHlwZSIsIk5vZGUiLCJURVhUX05PREUiLCJkYXRhIiwiYXR0cmlidXRlc1BhcnNlciIsImV4dHJhQXR0cmlidXRlcyIsImJsYW5rTWV0YSIsInBhcnNlTWV0YSIsInBhcnNlciIsIl9jbGFzc1BhcnNlciIsImV4dHJhQ2xhc3NlcyIsInBsdWdpbk1ldGEiLCJleHRyYVN0eWxlcyIsInN0eWxlcyQyIiwiZ2VuZXJhdGVNdXRhdGlvbiIsIm5vZGVNZXRhIiwia25vd25QcmVmaXhlcyIsIm9uVHJlZSIsInJvb3QiLCJodG1sQ2xhc3NMaXN0IiwiaGNsQWRkIiwic3VmZml4IiwiaGNsUmVtb3ZlIiwiZiIsInByZWZpeGVzRG9tUXVlcnkiLCJjYW5kaWRhdGVzIiwicXVlcnlTZWxlY3RvckFsbCIsImFsbCIsInRoZW4iLCJyZXNvbHZlZE11dGF0aW9ucyIsImNhdGNoIiwib25Ob2RlIiwicmVzb2x2ZUljb25zIiwibWF5YmVJY29uRGVmaW5pdGlvbiIsImljb25EZWZpbml0aW9uIiwicmVuZGVyIiwiX3BhcmFtcyR0cmFuc2Zvcm0iLCJfcGFyYW1zJHN5bWJvbCIsIl9wYXJhbXMkbWFzayIsIl9wYXJhbXMkbWFza0lkIiwiX3BhcmFtcyR0aXRsZSIsIl9wYXJhbXMkdGl0bGVJZCIsIl9wYXJhbXMkY2xhc3NlcyIsIl9wYXJhbXMkYXR0cmlidXRlcyIsIl9wYXJhbXMkc3R5bGVzIiwiUmVwbGFjZUVsZW1lbnRzIiwibXV0YXRpb25PYnNlcnZlckNhbGxiYWNrcyIsInByb3ZpZGVycyQkMSIsIl9wYXJhbXMkbm9kZSIsIl9wYXJhbXMkY2FsbGJhY2siLCJnZW5lcmF0ZVN2Z1JlcGxhY2VtZW50TXV0YXRpb24iLCJnZW5lcmF0ZUFic3RyYWN0SWNvbiIsIl9yZWYzIiwibmV4dENoaWxkIiwiTGF5ZXJzIiwibGF5ZXIiLCJhc3NlbWJsZXIiLCJMYXllcnNDb3VudGVyIiwiTGF5ZXJzVGV4dCIsInRleHQiLCJnZW5lcmF0ZUxheWVyc1RleHQiLCJjb21wdXRlZEZvbnRTaXplIiwicGFyc2VJbnQiLCJnZXRDb21wdXRlZFN0eWxlIiwiZm9udFNpemUiLCJib3VuZGluZ0NsaWVudFJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJDTEVBTl9DT05URU5UX1BBVFRFUk4iLCJTRUNPTkRBUllfVU5JQ09ERV9SQU5HRSIsImhleFZhbHVlRnJvbUNvbnRlbnQiLCJjbGVhbmVkIiwiY29kZVBvaW50IiwiaXNQcmVwZW5kVGVuIiwiaXNEb3VibGVkIiwiaXNTZWNvbmRhcnkiLCJyZXBsYWNlRm9yUG9zaXRpb24iLCJwb3NpdGlvbiIsInBlbmRpbmdBdHRyaWJ1dGUiLCJhbHJlYWR5UHJvY2Vzc2VkUHNldWRvRWxlbWVudCIsImZvbnRGYW1pbHkiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiZm9udFdlaWdodCIsInJlbW92ZUNoaWxkIiwiX2NvbnRlbnQiLCJ0b0xvd2VyQ2FzZSIsIl9oZXhWYWx1ZUZyb21Db250ZW50IiwiaGV4VmFsdWUiLCJpc1Y0Iiwic3RhcnRzV2l0aCIsImljb25JZGVudGlmaWVyIiwiaWNvbk5hbWU0IiwibWV0YSIsInByb2Nlc3NhYmxlIiwib3BlcmF0aW9ucyIsIlBzZXVkb0VsZW1lbnRzIiwicHNldWRvRWxlbWVudHMyc3ZnIiwiX3Vud2F0Y2hlZCIsIk11dGF0aW9uT2JzZXJ2ZXIkMSIsInVud2F0Y2giLCJib290c3RyYXAiLCJwYXJzZVRyYW5zZm9ybVN0cmluZyIsInRyYW5zZm9ybVN0cmluZyIsInBhcnNlRmxvYXQiLCJpc05hTiIsIlBvd2VyVHJhbnNmb3JtcyIsInBhcnNlTm9kZUF0dHJpYnV0ZXMiLCJnZW5lcmF0ZUFic3RyYWN0VHJhbnNmb3JtR3JvdXBpbmciLCJBTExfU1BBQ0UiLCJmaWxsQmxhY2siLCJmb3JjZSIsImRlR3JvdXAiLCJNYXNrcyIsIm1hc2tEYXRhIiwiZ2VuZXJhdGVBYnN0cmFjdE1hc2siLCJleHBsaWNpdE1hc2tJZCIsIm1haW5XaWR0aCIsIm1haW5QYXRoIiwibWFza1dpZHRoIiwibWFza1BhdGgiLCJ0cmFucyIsIm1hc2tSZWN0IiwibWFza0lubmVyR3JvdXBDaGlsZHJlbk1peGluIiwibWFza0lubmVyR3JvdXAiLCJtYXNrT3V0ZXJHcm91cCIsImNsaXBJZCIsIm1hc2tUYWciLCJtYXNrVW5pdHMiLCJtYXNrQ29udGVudFVuaXRzIiwiZGVmcyIsIk1pc3NpbmdJY29uSW5kaWNhdG9yIiwicmVkdWNlTW90aW9uIiwibWF0Y2hNZWRpYSIsIm1hdGNoZXMiLCJtaXNzaW5nSWNvbkFic3RyYWN0IiwiZ0NoaWxkcmVuIiwiRklMTCIsIkFOSU1BVElPTl9CQVNFIiwiYXR0cmlidXRlVHlwZSIsInJlcGVhdENvdW50IiwiZHVyIiwiT1BBQ0lUWV9BTklNQVRFIiwiZG90IiwiY3giLCJjeSIsInIiLCJvcGFjaXR5IiwiU3ZnU3ltYm9scyIsInN5bWJvbERhdGEiLCJwbHVnaW5zIiwibm9BdXRvJDEiLCJjb25maWckMSIsImxpYnJhcnkkMSIsImRvbSQxIiwicGFyc2UkMSIsImZpbmRJY29uRGVmaW5pdGlvbiQxIiwidG9IdG1sJDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@fortawesome/fontawesome-svg-core/index.mjs\n");

/***/ })

};
;